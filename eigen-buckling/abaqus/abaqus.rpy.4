# -*- coding: mbcs -*-
#
# Abaqus/CAE Release 2020 replay file
# Internal Version: 2019_09_13-10.49.31 163176
# Run by sbonnell on Mon Sep  8 19:23:56 2025
#

# from driverUtils import executeOnCaeGraphicsStartup
# executeOnCaeGraphicsStartup()
#: Executing "onCaeGraphicsStartup()" in the site directory ...
from abaqus import *
from abaqusConstants import *
session.Viewport(name='Viewport: 1', origin=(0.0, 0.0), width=389.915618896484, 
    height=228.66667175293)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].maximize()
from caeModules import *
from driverUtils import executeOnCaeStartup
executeOnCaeStartup()
session.viewports['Viewport: 1'].partDisplay.geometryOptions.setValues(
    referenceRepresentation=ON)
openMdb(
    pathName='C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/SP1-T2.cae')
#: The model database "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae" has been opened.
session.viewports['Viewport: 1'].setValues(displayedObject=None)
p = mdb.models['eigen-plate'].parts['Part-1']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
p1 = mdb.models['riks-web-panel'].parts['Part-1']
session.viewports['Viewport: 1'].setValues(displayedObject=p1)
a = mdb.models['riks-web-panel'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='riks')
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=ON, optimizationTasks=OFF, 
    geometricRestrictions=OFF, stopConditions=OFF)
o1 = session.openOdb(
    name='C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/SP1-UC1-e.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o1)
#: Model: C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/SP1-UC1-e.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     1
#: Number of Meshes:             1
#: Number of Element Sets:       6
#: Number of Node Sets:          2
#: Number of Steps:              1
#: 
#: Node: PART-1-1.3927
#:                                         1             2             3        Magnitude
#: Base coordinates:                  3.00000e+00,  1.80000e+00,  1.32275e-02,      -      
#: No deformed coordinates for current plot.
#: 
#: Node: PART-1-1.3926
#:                                         1             2             3        Magnitude
#: Base coordinates:                  3.00000e+00,  1.80000e+00,  0.00000e+00,      -      
#: No deformed coordinates for current plot.
#: 
#: Nodes for distance: PART-1-1.3927, PART-1-1.3926
#:                                        1             2             3        Magnitude
#: Base distance:                     0.00000e+00,  0.00000e+00, -1.32275e-02,  1.32275e-02
#: No deformed coordinates for current plot.
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.93914, 
    farPlane=10.5456, width=0.436687, height=0.204121, viewOffsetX=0.872161, 
    viewOffsetY=-0.288822)
a = mdb.models['riks-web-panel'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=OFF)
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.80812, 
    farPlane=10.6739, width=2.13992, height=1.00026, viewOffsetX=0.553237, 
    viewOffsetY=-0.349663)
a = mdb.models['eigen-web-panel'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='Initial')
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=ON)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=ON)
p = mdb.models['eigen-web-panel'].parts['Part-1']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
session.viewports['Viewport: 1'].partDisplay.setValues(mesh=ON)
session.viewports['Viewport: 1'].partDisplay.meshOptions.setValues(
    meshTechnique=ON)
session.viewports['Viewport: 1'].partDisplay.geometryOptions.setValues(
    referenceRepresentation=OFF)
p = mdb.models['eigen-web-panel'].parts['panel']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
session.viewports['Viewport: 1'].view.setValues(nearPlane=7.13608, 
    farPlane=10.9028, width=1.49298, height=0.699105, viewOffsetX=-0.608147, 
    viewOffsetY=-0.285907)
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.7216, 
    farPlane=11.3172, width=6.88885, height=3.22578, viewOffsetX=1.19097, 
    viewOffsetY=0.561291)
p = mdb.models['eigen-web-panel'].parts['panel']
n = p.nodes
nodes = n.getSequenceFromMask(mask=('[#0:23 #180000 ]', ), )
p.editNode(nodes=nodes, offset2=0.0132275)
session.viewports['Viewport: 1'].view.setValues(nearPlane=7.18996, 
    farPlane=10.8489, width=0.794335, height=0.371956, viewOffsetX=-0.684546, 
    viewOffsetY=-0.275732)
p = mdb.models['eigen-web-panel'].parts['panel']
p.undoMeshEdit()
session.viewports['Viewport: 1'].view.setValues(nearPlane=7.20309, 
    farPlane=10.8358, width=0.624173, height=0.292276, viewOffsetX=0.753473, 
    viewOffsetY=0.493635)
p = mdb.models['eigen-web-panel'].parts['panel']
n = p.nodes
nodes = n.getSequenceFromMask(mask=('[#0:23 #180000 ]', ), )
p.editNode(nodes=nodes, coordinate2=0.00182)
session.viewports['Viewport: 1'].view.setValues(nearPlane=7.08009, 
    farPlane=10.9588, width=2.50476, height=1.17288, viewOffsetX=0.694832, 
    viewOffsetY=0.275135)
mdb.save()
#: The model database has been saved to "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae".
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.88108, 
    farPlane=11.1578, width=4.80814, height=2.25147, viewOffsetX=0.902775, 
    viewOffsetY=0.118105)
p1 = mdb.models['riks-web-panel'].parts['panel']
session.viewports['Viewport: 1'].setValues(displayedObject=p1)
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
session.viewports['Viewport: 1'].view.setValues(nearPlane=7.19487, 
    farPlane=10.844, width=0.730767, height=0.34219, viewOffsetX=0.73087, 
    viewOffsetY=0.535445)
p = mdb.models['riks-web-panel'].parts['panel']
n = p.nodes
nodes = n.getSequenceFromMask(mask=('[#0:23 #180000 ]', ), )
p.editNode(nodes=nodes, coordinate2=0.00182)
session.viewports['Viewport: 1'].view.setValues(nearPlane=7.17454, 
    farPlane=10.8643, width=1.12371, height=0.526191, viewOffsetX=0.818933, 
    viewOffsetY=0.566341)
mdb.save()
#: The model database has been saved to "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae".
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.87756, 
    farPlane=11.1613, width=4.85392, height=2.2729, viewOffsetX=0.57254, 
    viewOffsetY=0.180709)
a = mdb.models['eigen-web-panel'].rootAssembly
a.regenerate()
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=OFF, loads=ON, 
    bcs=ON, predefinedFields=ON, connectors=ON)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=OFF)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='buckle')
session.viewports['Viewport: 1'].view.setValues(nearPlane=7.01107, 
    farPlane=10.4327, width=6.71202, height=3.1374, cameraPosition=(4.45322, 
    -2.52063, 7.12632), cameraUpVector=(-0.0466954, 0.998526, -0.0276843), 
    cameraTarget=(0.0784508, -0.00511694, -0.0108327))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.78612, 
    farPlane=10.5401, width=6.49667, height=3.03674, cameraPosition=(-2.23025, 
    -5.51254, 6.36291), cameraUpVector=(0.355058, 0.843812, 0.402386), 
    cameraTarget=(0.0931106, 0.00144563, -0.00915821))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.23697, 
    farPlane=11.072, width=5.97094, height=2.791, cameraPosition=(-4.53417, 
    -6.54145, 3.46232), cameraUpVector=(0.402007, 0.546016, 0.735022), 
    cameraTarget=(0.113828, 0.010698, 0.016925))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.4296, 
    farPlane=10.8794, width=4.07393, height=1.90428, viewOffsetX=-0.325312, 
    viewOffsetY=-0.166006)
mdb.save()
#: The model database has been saved to "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae".
mdb.save()
#: The model database has been saved to "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae".
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, connectors=OFF)
mdb.jobs['eigen-web-panel'].submit(consistencyChecking=OFF)
#: Abaqus Warning: The following input options are not supported by parallel execution of element operations: buckle. Only the solver will be executed in parallel for this analysis.
#: The job input file "eigen-web-panel.inp" has been submitted for analysis.
#: Job eigen-web-panel: Analysis Input File Processor completed successfully.
#: Job eigen-web-panel: Abaqus/Standard completed successfully.
#: Job eigen-web-panel completed successfully. 
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/SP1-UC1-e.odb'])
o1 = session.openOdb(
    name='C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/eigen-web-panel.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o1)
#: Model: C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/eigen-web-panel.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     1
#: Number of Meshes:             1
#: Number of Element Sets:       1
#: Number of Node Sets:          7
#: Number of Steps:              1
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].view.setValues(cameraPosition=(0.0784507, 
    -0.00511837, 8.73019), cameraUpVector=(0, 1, 0))
session.viewports['Viewport: 1'].view.setProjection(projection=PARALLEL)
session.viewports['Viewport: 1'].view.setValues(cameraPosition=(1.53379, 
    -0.354297, 8.73019), cameraTarget=(1.53379, -0.354297, -0.0108323))
a = mdb.models['riks-web-panel'].rootAssembly
a.regenerate()
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='riks')
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=ON)
mdb.save()
#: The model database has been saved to "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae".
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.53068, 
    farPlane=10.9514, width=5.7579, height=2.69142, viewOffsetX=-0.00759327, 
    viewOffsetY=-0.0482889)
session.viewports['Viewport: 1'].partDisplay.setValues(sectionAssignments=ON, 
    engineeringFeatures=ON, mesh=OFF)
session.viewports['Viewport: 1'].partDisplay.meshOptions.setValues(
    meshTechnique=OFF)
p1 = mdb.models['eigen-web-panel'].parts['panel']
session.viewports['Viewport: 1'].setValues(displayedObject=p1)
session.viewports['Viewport: 1'].view.setValues(nearPlane=7.20136, 
    farPlane=10.8375, width=0.647793, height=0.302798, viewOffsetX=0.760103, 
    viewOffsetY=0.536613)
p = mdb.models['eigen-web-panel'].parts['panel']
e = p.elements
elements = e.getSequenceFromMask(mask=('[#0:703 #38e380 #0:26 #8e000000 #e3 ]', 
    ), )
region = regionToolset.Region(elements=elements)
p = mdb.models['eigen-web-panel'].parts['panel']
p.SectionAssignment(region=region, sectionName='local-thickness', offset=0.0, 
    offsetType=MIDDLE_SURFACE, offsetField='', 
    thicknessAssignment=FROM_SECTION)
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.82649, 
    farPlane=11.2124, width=5.52955, height=2.58468, viewOffsetX=0.394042, 
    viewOffsetY=0.147086)
mdb.save()
#: The model database has been saved to "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae".
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='Initial')
a = mdb.models['eigen-web-panel'].rootAssembly
a.regenerate()
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=OFF)
mdb.jobs['eigen-web-panel'].submit(consistencyChecking=OFF)
#: Abaqus Warning: The following input options are not supported by parallel execution of element operations: buckle. Only the solver will be executed in parallel for this analysis.
#: The job input file "eigen-web-panel.inp" has been submitted for analysis.
#: Job eigen-web-panel: Analysis Input File Processor completed successfully.
p1 = mdb.models['riks-web-panel'].parts['panel']
session.viewports['Viewport: 1'].setValues(displayedObject=p1)
#: Job eigen-web-panel: Abaqus/Standard completed successfully.
session.viewports['Viewport: 1'].view.setValues(nearPlane=7.19844, 
    farPlane=10.8404, width=0.685679, height=0.320507, viewOffsetX=0.693296, 
    viewOffsetY=0.540064)
p = mdb.models['riks-web-panel'].parts['panel']
e = p.elements
elements = e.getSequenceFromMask(mask=('[#0:703 #38e380 #0:26 #8e000000 #e3 ]', 
    ), )
region = regionToolset.Region(elements=elements)
p = mdb.models['riks-web-panel'].parts['panel']
p.SectionAssignment(region=region, sectionName='local-thickness', offset=0.0, 
    offsetType=MIDDLE_SURFACE, offsetField='', 
    thicknessAssignment=FROM_SECTION)
#: Job eigen-web-panel completed successfully. 
session.viewports['Viewport: 1'].view.setValues(nearPlane=7.16342, 
    farPlane=10.8754, width=1.28771, height=0.601913, viewOffsetX=0.728632, 
    viewOffsetY=0.577076)
mdb.save()
#: The model database has been saved to "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae".
session.viewports['Viewport: 1'].view.setValues(nearPlane=31.1258, 
    farPlane=35.9274, width=8.2151, height=3.83999, cameraPosition=(19.4424, 
    19.2475, 20.9424), viewOffsetX=0.677605, viewOffsetY=0.521836)
o1 = session.openOdb(
    name='C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/eigen-web-panel.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o1)
#: Model: C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/eigen-web-panel.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     1
#: Number of Meshes:             1
#: Number of Element Sets:       1
#: Number of Node Sets:          7
#: Number of Steps:              1
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].view.setValues(cameraPosition=(0, 0, 8.55146), 
    cameraUpVector=(0, 1, 0))
session.viewports['Viewport: 1'].view.setProjection(projection=PARALLEL)
session.viewports['Viewport: 1'].view.setValues(cameraPosition=(1.6521, 
    -0.378895, 8.55146), cameraTarget=(1.6521, -0.378895, 0.0625))
a = mdb.models['riks-web-panel'].rootAssembly
a.regenerate()
session.viewports['Viewport: 1'].setValues(displayedObject=a)
mdb.jobs['riks-web-panel'].writeInput(consistencyChecking=OFF)
#: The job input file has been written to "riks-web-panel.inp".
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/eigen-web-panel.odb'])
o1 = session.openOdb(
    name='C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/riks-web-panel.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o1)
#: Model: C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/riks-web-panel.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     1
#: Number of Meshes:             1
#: Number of Element Sets:       1
#: Number of Node Sets:          7
#: Number of Steps:              1
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.07538, 
    farPlane=10.9026, cameraPosition=(4.96566, 4.87107, 4.92884), 
    cameraTarget=(0.0645319, -0.0300556, 0.0277186))
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.64198, 
    farPlane=10.3819, cameraPosition=(5.83924, -1.14888, 6.1485), 
    cameraUpVector=(-0.248774, 0.967229, -0.0507926), cameraTarget=(0.0645293, 
    -0.0300381, 0.027715))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.4617, 
    farPlane=10.5523, cameraPosition=(2.63601, -5.34771, 6.13083), 
    cameraUpVector=(0.174254, 0.943225, 0.282776), cameraTarget=(0.055896, 
    -0.0413549, 0.0276674))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.58131, 
    farPlane=10.4326, cameraPosition=(0.253816, -7.11011, 4.72653), 
    cameraUpVector=(0.329904, 0.771778, 0.543619), cameraTarget=(0.0508533, 
    -0.0450856, 0.0246947))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.09034, 
    farPlane=10.9135, cameraPosition=(-2.51535, -7.57641, 2.98778), 
    cameraUpVector=(0.349384, 0.554532, 0.755265), cameraTarget=(0.0450065, 
    -0.04607, 0.0210235))
session.viewports['Viewport: 1'].view.setValues(nearPlane=5.81458, 
    farPlane=11.1863, cameraPosition=(-4.65291, -7.09287, 0.613653), 
    cameraUpVector=(0.283217, 0.290185, 0.914101), cameraTarget=(0.0417578, 
    -0.0453351, 0.0174153))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.37606, 
    farPlane=10.6248, width=0.585001, height=0.273447, cameraPosition=(
    -5.64433, -6.43688, 0.56113), cameraTarget=(-0.949665, 0.610651, 
    -0.0351079))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.39273, 
    farPlane=10.6474, cameraPosition=(-5.7709, -6.33599, 0.7153), 
    cameraUpVector=(0.299232, 0.297575, 0.906592), cameraTarget=(-0.949835, 
    0.610786, -0.0349007))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.41837, 
    farPlane=10.6217, width=0.217371, height=0.101606, cameraPosition=(
    -5.82143, -6.30325, 0.693771), cameraTarget=(-1.00037, 0.643529, 
    -0.0564294))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.34686, 
    farPlane=10.4439, cameraPosition=(-5.06516, -6.75829, 0.813431), 
    cameraUpVector=(0.246705, 0.35282, 0.902582), cameraTarget=(-0.997609, 
    0.641871, -0.0559933))
session.viewports['Viewport: 1'].view.setValues(nearPlane=5.98504, 
    farPlane=10.8057, width=4.89666, height=2.28885, cameraPosition=(-4.15433, 
    -7.24852, 0.90205), cameraTarget=(-0.0867795, 0.151639, 0.0326255))
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    UNDEFORMED, ))
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    UNDEFORMED, ))
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].animationController.stop()
session.viewports['Viewport: 1'].animationController.showFirstFrame()
session.viewports['Viewport: 1'].animationController.showLastFrame()
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.animationOptions.setValues(frameRate=60)
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.14996, 
    farPlane=10.6741, cameraPosition=(-5.24452, -5.20218, 4.10959), 
    cameraUpVector=(0.558337, 0.500061, 0.661966), cameraTarget=(-0.0745367, 
    0.128658, -0.00339516))
session.viewports['Viewport: 1'].view.setProjection(projection=PARALLEL)
session.viewports['Viewport: 1'].animationController.stop()
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.animationOptions.setValues(frameRate=100)
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=0 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=44 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=0 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=44 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=0 )
session.viewports['Viewport: 1'].view.setValues(width=4.60286, height=2.15151, 
    cameraPosition=(-5.13314, -5.2699, 4.16182), cameraTarget=(0.0368415, 
    0.0609357, 0.0488316))
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=46 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=46 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=46 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=46 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=46 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=46 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=46 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=46 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=46 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=49 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=0 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=49 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=49 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=49 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=49 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=49 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=49 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=49 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=49 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=0 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=50 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=50 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=50 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=50 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=50 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=0 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=50 )
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.45403, 
    farPlane=10.361, width=0.52784, height=0.246729, cameraPosition=(-5.97013, 
    -4.80066, 3.71791), cameraTarget=(-0.800149, 0.530177, -0.395073))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.47603, 
    farPlane=10.339, width=0.274541, height=0.128329, cameraPosition=(-6.02802, 
    -4.76853, 3.68679), cameraTarget=(-0.858035, 0.562307, -0.426193))
odb = session.odbs['C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/riks-web-panel.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'U', NODAL, ((COMPONENT, 'U1'), )), ), nodePick=(('PANEL-1', 1, (
    '[#0:23 #100000 ]', )), ), )
xyp = session.XYPlot('XYPlot-1')
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
odb = session.odbs['C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/riks-web-panel.odb']
session.viewports['Viewport: 1'].setValues(displayedObject=odb)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.08707, 
    farPlane=10.728, width=5.28682, height=2.47122, cameraPosition=(-5.30762, 
    -5.18552, 4.05187), cameraTarget=(-0.13764, 0.14532, -0.0611194))
session.viewports['Viewport: 1'].view.setValues(nearPlane=5.99241, 
    farPlane=10.8425, cameraPosition=(-5.27715, -6.04329, 2.64507), 
    cameraUpVector=(0.389341, 0.476293, 0.788389), cameraTarget=(-0.137935, 
    0.153632, -0.0474873))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.05331, 
    farPlane=10.8718, cameraPosition=(-6.57911, -4.64314, 2.69741), 
    cameraUpVector=(0.467002, 0.410889, 0.782994), cameraTarget=(-0.126868, 
    0.14173, -0.0479322))
session.viewports['Viewport: 1'].view.setValues(nearPlane=5.97794, 
    farPlane=10.8609, cameraPosition=(-5.17951, -6.25935, 2.30698), 
    cameraUpVector=(0.419987, 0.408498, 0.810395), cameraTarget=(-0.131244, 
    0.146783, -0.0467116))
session.viewports['Viewport: 1'].view.setValues(nearPlane=5.97795, 
    farPlane=10.8609, cameraPosition=(-4.9763, -6.42796, 2.28393), 
    cameraTarget=(0.0719661, -0.0218241, -0.0697651))
session.viewports['Viewport: 1'].view.setValues(nearPlane=5.89979, 
    farPlane=10.9391, width=5.98327, height=2.79676, cameraPosition=(-4.90348, 
    -6.4826, 2.29139), cameraTarget=(0.144781, -0.0764633, -0.062303))
mdb.Model(name='eigen-multiweb', objectToCopy=mdb.models['eigen-web-panel'])
#: The model "eigen-multiweb" has been created.
a = mdb.models['eigen-multiweb'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='buckle')
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=ON, bcs=ON, 
    predefinedFields=ON, connectors=ON)
del mdb.models['eigen-multiweb'].loads['Load-1']
mdb.models['eigen-multiweb'].boundaryConditions.delete(('Centre', 'Edge', 
    'Fixed', ))
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, interactions=ON, constraints=ON, 
    engineeringFeatures=ON)
mdb.models['eigen-multiweb'].constraints.delete(('End', 'Fixed', 'Web', ))
session.viewports['Viewport: 1'].partDisplay.setValues(sectionAssignments=OFF, 
    engineeringFeatures=OFF)
session.viewports['Viewport: 1'].partDisplay.geometryOptions.setValues(
    referenceRepresentation=ON)
p1 = mdb.models['eigen-multiweb'].parts['Part-1']
session.viewports['Viewport: 1'].setValues(displayedObject=p1)
del mdb.models['eigen-multiweb'].parts['Part-1']
del mdb.models['eigen-multiweb'].parts['panel']
a = mdb.models['eigen-multiweb'].rootAssembly
a.regenerate()
session.viewports['Viewport: 1'].setValues(displayedObject=a)
#* FeatureError: Regeneration failed
a = mdb.models['eigen-multiweb'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(interactions=OFF, 
    constraints=OFF, connectors=OFF, engineeringFeatures=OFF)
a = mdb.models['eigen-multiweb'].rootAssembly
del a.features['panel-1']
mdb.models['eigen-multiweb'].rootAssembly.deleteSets(setNames=(
    'Fixed-Follower', 'Fixed-Main', 'Load-Follower', 'Load-Main', 
    'Web-Follower', 'Web-Main', ))
session.viewports['Viewport: 1'].setValues(displayedObject=None)
session.viewports['Viewport: 1'].view.setValues(width=2.25551, height=1.0543, 
    viewOffsetX=0.00396794, viewOffsetY=-0.0028275)
s = mdb.models['eigen-multiweb'].ConstrainedSketch(name='__profile__', 
    sheetSize=4.0)
g, v, d, c = s.geometry, s.vertices, s.dimensions, s.constraints
s.setPrimaryObject(option=STANDALONE)
s.Line(point1=(-1.5, 0.0), point2=(1.5, 0.0))
s.HorizontalConstraint(entity=g[2], addUndoState=False)
session.viewports['Viewport: 1'].view.setValues(nearPlane=3.45655, 
    farPlane=4.08592, width=4.61866, height=2.1589, cameraPosition=(0.0957143, 
    -0.0443276, 3.77124), cameraTarget=(0.0957143, -0.0443276, 0))
s.Line(point1=(-0.9, 0.0), point2=(-0.9, 0.125))
s.VerticalConstraint(entity=g[3], addUndoState=False)
s.Line(point1=(-0.3, 0.0), point2=(-0.3, 0.125))
s.VerticalConstraint(entity=g[4], addUndoState=False)
s.Line(point1=(0.3, 0.0), point2=(0.3, 0.125))
s.VerticalConstraint(entity=g[5], addUndoState=False)
s.Line(point1=(0.9, 0.0), point2=(0.9, 0.125))
s.VerticalConstraint(entity=g[6], addUndoState=False)
p = mdb.models['eigen-multiweb'].Part(name='Part-1', dimensionality=THREE_D, 
    type=DEFORMABLE_BODY)
p = mdb.models['eigen-multiweb'].parts['Part-1']
p.BaseShellExtrude(sketch=s, depth=3.0)
s.unsetPrimaryObject()
p = mdb.models['eigen-multiweb'].parts['Part-1']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
del mdb.models['eigen-multiweb'].sketches['__profile__']
session.viewports['Viewport: 1'].partDisplay.setValues(mesh=ON)
session.viewports['Viewport: 1'].partDisplay.meshOptions.setValues(
    meshTechnique=ON)
session.viewports['Viewport: 1'].partDisplay.geometryOptions.setValues(
    referenceRepresentation=OFF)
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.79718, 
    farPlane=11.2417, width=5.90178, height=2.76358, viewOffsetX=0.590321, 
    viewOffsetY=-0.132753)
elemType1 = mesh.ElemType(elemCode=S4R, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, hourglassControl=DEFAULT)
elemType2 = mesh.ElemType(elemCode=S3, elemLibrary=STANDARD)
p = mdb.models['eigen-multiweb'].parts['Part-1']
f = p.faces
faces = f.getSequenceFromMask(mask=('[#1ff ]', ), )
pickedRegions =(faces, )
p.setElementType(regions=pickedRegions, elemTypes=(elemType1, elemType2))
o7 = session.odbs['C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/SP1-UC1-e.odb']
session.viewports['Viewport: 1'].setValues(displayedObject=o7)
#: 
#: Node: PART-1-1.4236
#:                                         1             2             3        Magnitude
#: Base coordinates:                  2.98000e+00,  1.80000e+00,  2.16667e-02,      -      
#: No deformed coordinates for current plot.
#: 
#: Node: PART-1-1.3925
#:                                         1             2             3        Magnitude
#: Base coordinates:                  2.98000e+00,  1.80000e+00,  0.00000e+00,      -      
#: No deformed coordinates for current plot.
#: 
#: Nodes for distance: PART-1-1.4236, PART-1-1.3925
#:                                        1             2             3        Magnitude
#: Base distance:                     0.00000e+00,  0.00000e+00, -2.16667e-02,  2.16667e-02
#: No deformed coordinates for current plot.
a = mdb.models['eigen-multiweb'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=ON)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=ON)
p = mdb.models['eigen-multiweb'].parts['Part-1']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
p = mdb.models['eigen-multiweb'].parts['Part-1']
e = p.edges
pickedEdges = e.getSequenceFromMask(mask=('[#fff08a1 ]', ), )
p.seedEdgeBySize(edges=pickedEdges, size=0.0216667, deviationFactor=0.1, 
    constraint=FINER)
p = mdb.models['eigen-multiweb'].parts['Part-1']
e = p.edges
pickedEdges = e.getSequenceFromMask(mask=('[#f75e ]', ), )
p.seedEdgeBySize(edges=pickedEdges, size=0.02, deviationFactor=0.1, 
    constraint=FINER)
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.70721, 
    farPlane=11.3316, width=7.01153, height=3.28323, viewOffsetX=0.924927, 
    viewOffsetY=-0.100175)
p = mdb.models['eigen-multiweb'].parts['Part-1']
p.generateMesh()
mdb.save()
#: The model database has been saved to "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae".
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.89154, 
    farPlane=11.1473, width=4.67178, height=2.18761, viewOffsetX=0.307982, 
    viewOffsetY=-0.0306661)
p = mdb.models['eigen-multiweb'].parts['Part-1']
p.PartFromMesh(name='panel', copySets=True)
p1 = mdb.models['eigen-multiweb'].parts['panel']
session.viewports['Viewport: 1'].setValues(displayedObject=p1)
session.viewports['Viewport: 1'].partDisplay.setValues(sectionAssignments=ON, 
    engineeringFeatures=ON, mesh=OFF)
session.viewports['Viewport: 1'].partDisplay.meshOptions.setValues(
    meshTechnique=OFF)
o7 = session.odbs['C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/SP1-UC1-e.odb']
session.viewports['Viewport: 1'].setValues(displayedObject=o7)
#: 
#: Node: PART-1-1.3927
#:                                         1             2             3        Magnitude
#: Base coordinates:                  3.00000e+00,  1.80000e+00,  1.32275e-02,      -      
#: No deformed coordinates for current plot.
#: 
#: Node: PART-1-1.3926
#:                                         1             2             3        Magnitude
#: Base coordinates:                  3.00000e+00,  1.80000e+00,  0.00000e+00,      -      
#: No deformed coordinates for current plot.
#: 
#: Nodes for distance: PART-1-1.3927, PART-1-1.3926
#:                                        1             2             3        Magnitude
#: Base distance:                     0.00000e+00,  0.00000e+00, -1.32275e-02,  1.32275e-02
#: No deformed coordinates for current plot.
session.viewports['Viewport: 1'].partDisplay.setValues(sectionAssignments=OFF, 
    engineeringFeatures=OFF, mesh=ON)
session.viewports['Viewport: 1'].partDisplay.meshOptions.setValues(
    meshTechnique=ON)
p = mdb.models['eigen-multiweb'].parts['panel']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
session.viewports['Viewport: 1'].view.setValues(nearPlane=7.21717, 
    farPlane=10.8217, width=0.441839, height=0.206896, viewOffsetX=0.431806, 
    viewOffsetY=0.740711)
p = mdb.models['eigen-multiweb'].parts['panel']
n = p.nodes
nodes = n.getSequenceFromMask(mask=(
    '[#0:37 #3000000 #0:4 #1800000 #0:4 #c00000 #0:4', ' #600000 ]', ), )
p.editNode(nodes=nodes, coordinate2=0.0132275)
session.viewports['Viewport: 1'].view.setValues(nearPlane=7.20744, 
    farPlane=10.8314, width=0.686008, height=0.321231, viewOffsetX=0.470551, 
    viewOffsetY=0.755495)
mdb.save()
#: The model database has been saved to "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae".
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.8854, 
    farPlane=11.1534, width=4.75184, height=2.2251, viewOffsetX=0.736941, 
    viewOffsetY=0.137615)
session.viewports['Viewport: 1'].partDisplay.setValues(sectionAssignments=ON, 
    engineeringFeatures=ON, mesh=OFF)
session.viewports['Viewport: 1'].partDisplay.meshOptions.setValues(
    meshTechnique=OFF)
session.viewports['Viewport: 1'].view.setValues(nearPlane=7.7777, 
    farPlane=11.3086, width=5.37718, height=2.51346, cameraPosition=(8.36405, 
    4.59208, 2.49042), cameraUpVector=(-0.779684, 0.625568, -0.0275101), 
    cameraTarget=(0.725525, -0.152994, 1.79239), viewOffsetX=0.832443, 
    viewOffsetY=0.155449)
session.viewports['Viewport: 1'].view.setValues(nearPlane=7.93423, 
    farPlane=11.9018, width=5.4854, height=2.56404, cameraPosition=(9.52104, 
    -2.7059, 0.937199), cameraUpVector=(-0.0976189, 0.994178, 0.0456219), 
    cameraTarget=(0.790644, -0.574193, 1.70276), viewOffsetX=0.849196, 
    viewOffsetY=0.158577)
session.viewports['Viewport: 1'].view.setValues(nearPlane=8.02275, 
    farPlane=11.8574, width=5.5466, height=2.59265, cameraPosition=(9.0419, 
    -4.07628, 1.05448), cameraUpVector=(0.0468264, 0.997659, 0.0498356), 
    cameraTarget=(0.702469, -0.704198, 1.71254), viewOffsetX=0.858671, 
    viewOffsetY=0.160346)
p = mdb.models['eigen-multiweb'].parts['panel']
e = p.elements
elements = e.getSequenceFromMask(mask=('[#ffffffff:703 #f ]', ), )
region = regionToolset.Region(elements=elements)
p = mdb.models['eigen-multiweb'].parts['panel']
p.SectionAssignment(region=region, sectionName='plate', offset=0.0, 
    offsetType=MIDDLE_SURFACE, offsetField='', 
    thicknessAssignment=FROM_SECTION)
session.viewports['Viewport: 1'].view.setValues(nearPlane=8.01854, 
    farPlane=11.8616, width=5.54369, height=2.59129, cameraPosition=(9.18604, 
    -3.72236, 1.06751), cameraUpVector=(0.00583597, 0.960384, -0.278619), 
    cameraTarget=(0.846606, -0.350279, 1.72557), viewOffsetX=0.858221, 
    viewOffsetY=0.160262)
session.viewports['Viewport: 1'].view.setValues(nearPlane=7.9382, 
    farPlane=11.56, width=5.48815, height=2.56533, cameraPosition=(9.01188, 
    3.79509, 1.71459), cameraUpVector=(-0.686786, 0.724662, -0.0564781), 
    cameraTarget=(0.768, 0.136841, 1.79088), viewOffsetX=0.849623, 
    viewOffsetY=0.158656)
session.viewports['Viewport: 1'].view.setValues(nearPlane=7.97732, 
    farPlane=11.5078, width=5.5152, height=2.57797, cameraPosition=(8.69483, 
    4.47025, 1.68688), cameraUpVector=(-0.739892, 0.670107, -0.0592914), 
    cameraTarget=(0.752759, 0.196708, 1.78925), viewOffsetX=0.85381, 
    viewOffsetY=0.159438)
p = mdb.models['eigen-multiweb'].parts['panel']
e = p.elements
elements = e.getSequenceFromMask(mask=(
    '[#0:703 #fffffff0 #ffffffff:111 #fffff ]', ), )
region = regionToolset.Region(elements=elements)
p = mdb.models['eigen-multiweb'].parts['panel']
p.SectionAssignment(region=region, sectionName='web', offset=0.0, 
    offsetType=MIDDLE_SURFACE, offsetField='', 
    thicknessAssignment=FROM_SECTION)
mdb.models['eigen-multiweb'].sections['flange'].setValues(preIntegrate=OFF, 
    material='M1', thicknessType=UNIFORM, thickness=0.004, thicknessField='', 
    nodalThicknessField='', idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, numIntPts=5)
session.viewports['Viewport: 1'].view.setValues(nearPlane=8.29201, 
    farPlane=11.1932, width=1.07849, height=0.504119, viewOffsetX=-0.684356, 
    viewOffsetY=-0.0392298)
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.98109, 
    farPlane=11.2039, width=0.907988, height=0.424421, cameraPosition=(6.7281, 
    2.70515, -4.01835), cameraUpVector=(-0.582261, 0.777855, 0.236462), 
    cameraTarget=(0.161266, -0.030824, 1.52613), viewOffsetX=-0.576164, 
    viewOffsetY=-0.0330278)
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.68031, 
    farPlane=11.5046, width=5.52816, height=2.58403, viewOffsetX=0.308589, 
    viewOffsetY=-0.320149)
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.30549, 
    farPlane=11.2967, width=5.21798, height=2.43904, cameraPosition=(5.88201, 
    1.55356, 7.8802), cameraUpVector=(-0.366975, 0.86478, -0.342761), 
    cameraTarget=(-0.293854, -0.11109, 1.52113), viewOffsetX=0.291274, 
    viewOffsetY=-0.302186)
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.64966, 
    farPlane=10.9525, width=0.716636, height=0.334977, viewOffsetX=1.26667, 
    viewOffsetY=0.0830816)
p = mdb.models['eigen-multiweb'].parts['panel']
e = p.elements
elements = e.getSequenceFromMask(mask=(
    '[#0:703 #38e380 #0:26 #8e000000 #38e38e3 #0:26 #e0000000', 
    ' #38e38e38 #0:27 #8e38e38e #3 #0:26 #e38e0 ]', ), )
region = regionToolset.Region(elements=elements)
p = mdb.models['eigen-multiweb'].parts['panel']
p.SectionAssignment(region=region, sectionName='local-thickness', offset=0.0, 
    offsetType=MIDDLE_SURFACE, offsetField='', 
    thicknessAssignment=FROM_SECTION)
mdb.save()
#: The model database has been saved to "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae".
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.05016, 
    farPlane=11.552, width=9.55888, height=4.46811, viewOffsetX=2.46106, 
    viewOffsetY=0.407763)
session.viewports['Viewport: 1'].view.setValues(nearPlane=7.83567, 
    farPlane=12.7482, width=12.3799, height=5.78673, cameraPosition=(8.63075, 
    4.3355, 5.17782), cameraUpVector=(-0.588691, 0.704437, -0.396499), 
    cameraTarget=(0.891704, 0.596699, 2.44309), viewOffsetX=3.18736, 
    viewOffsetY=0.528102)
session.viewports['Viewport: 1'].view.setValues(nearPlane=8.03064, 
    farPlane=12.5532, width=6.42388, height=3.00272, viewOffsetX=1.55378, 
    viewOffsetY=0.250212)
session.viewports['Viewport: 1'].view.setValues(nearPlane=7.68806, 
    farPlane=12.4746, width=6.14984, height=2.87462, cameraPosition=(7.99746, 
    3.57482, 6.57019), cameraUpVector=(-0.505755, 0.758047, -0.411796), 
    cameraTarget=(0.592875, 0.398531, 2.51637), viewOffsetX=1.4875, 
    viewOffsetY=0.239538)
session.viewports['Viewport: 1'].view.setValues(nearPlane=7.58986, 
    farPlane=12.4175, width=6.07129, height=2.8379, cameraPosition=(7.69564, 
    3.30129, 7.04458), cameraUpVector=(-0.504456, 0.773594, -0.383506), 
    cameraTarget=(0.505641, 0.259823, 2.52756), viewOffsetX=1.4685, 
    viewOffsetY=0.236478)
session.viewports['Viewport: 1'].view.setValues(nearPlane=7.59522, 
    farPlane=12.4121, width=6.07558, height=2.83991, viewOffsetX=0.784889, 
    viewOffsetY=0.153039)
session.viewports['Viewport: 1'].view.setProjection(projection=PARALLEL)
session.viewports['Viewport: 1'].view.setValues(nearPlane=7.62732, 
    farPlane=12.38, width=5.295, height=2.47504, cameraPosition=(8.10123, 
    3.43418, 6.30951), cameraTarget=(0.126629, 0.0608177, 1.29957))
a = mdb.models['eigen-multiweb'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=OFF)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=OFF)
a1 = mdb.models['eigen-multiweb'].rootAssembly
p = mdb.models['eigen-multiweb'].parts['panel']
a1.Instance(name='panel-1', part=p, dependent=ON)
a1 = mdb.models['eigen-multiweb'].rootAssembly
a1.rotate(instanceList=('panel-1', ), axisPoint=(0.0, 0.0, 0.0), 
    axisDirection=(0.0, 1.0, 0.0), angle=90.0)
#: The instance panel-1 was rotated by 90. degrees about the axis defined by the point 0., 0., 0. and the vector 0., 1., 0.
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.26827, 
    farPlane=11.2654, width=6.98331, height=3.26421, viewOffsetX=-0.0899673, 
    viewOffsetY=-0.134854)
a1 = mdb.models['eigen-multiweb'].rootAssembly
a1.rotate(instanceList=('panel-1', ), axisPoint=(0.0, 0.0, 0.0), 
    axisDirection=(1.0, 0.0, 0.0), angle=90.0)
#: The instance panel-1 was rotated by 90. degrees about the axis defined by the point 0., 0., 0. and the vector 1., 0., 0.
a1 = mdb.models['eigen-multiweb'].rootAssembly
a1.translate(instanceList=('panel-1', ), vector=(-1.5, 0.0, 0.0))
#: The instance panel-1 was translated by -1.5, 0., 0. with respect to the assembly coordinate system
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.52804, 
    farPlane=12.5443, width=10.615, height=4.96175, cameraPosition=(2.99686, 
    -2.90771, 10.3032), cameraUpVector=(0.213777, 0.956461, -0.1987), 
    cameraTarget=(0.0527715, -0.823727, 2.03639), viewOffsetX=-0.136754, 
    viewOffsetY=-0.204984)
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.68402, 
    farPlane=13.4907, width=10.7888, height=5.04298, cameraPosition=(-1.99184, 
    -7.01872, 9.08111), cameraUpVector=(0.561246, 0.786046, 0.259102), 
    cameraTarget=(-0.82581, -1.6649, 1.91677), viewOffsetX=-0.138993, 
    viewOffsetY=-0.20834)
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.31214, 
    farPlane=14.7528, width=10.3745, height=4.84932, cameraPosition=(-6.50913, 
    -9.09085, 4.52873), cameraUpVector=(0.632832, 0.364697, 0.683022), 
    cameraTarget=(-1.85448, -2.23919, 0.959437), viewOffsetX=-0.133656, 
    viewOffsetY=-0.20034)
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.56402, 
    farPlane=14.6863, width=10.6551, height=4.98049, cameraPosition=(-8.97722, 
    -5.60285, 5.99683), cameraUpVector=(0.741575, 0.25799, 0.619281), 
    cameraTarget=(-2.49714, -1.39847, 1.34036), viewOffsetX=-0.137271, 
    viewOffsetY=-0.205759)
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.62607, 
    farPlane=15.273, width=10.7242, height=5.0128, cameraPosition=(-8.04974, 
    -8.76222, -3.61579), cameraUpVector=(0.209473, -0.0970581, 0.972985), 
    cameraTarget=(-2.32131, -2.26144, -1.11063), viewOffsetX=-0.138162, 
    viewOffsetY=-0.207094)
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.38654, 
    farPlane=15.0786, width=10.4573, height=4.88806, cameraPosition=(-6.75436, 
    -10.1989, 0.390152), cameraUpVector=(0.129194, 0.354588, 0.926054), 
    cameraTarget=(-1.9643, -2.56428, 0.0451327), viewOffsetX=-0.134724, 
    viewOffsetY=-0.201941)
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.38234, 
    farPlane=15.0765, width=10.4526, height=4.88587, cameraPosition=(-7.76506, 
    -9.26373, 1.94788), cameraUpVector=(0.244844, 0.424713, 0.871591), 
    cameraTarget=(-2.21927, -2.30999, 0.450943), viewOffsetX=-0.134664, 
    viewOffsetY=-0.201851)
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.41462, 
    farPlane=14.6959, width=10.4886, height=4.90268, cameraPosition=(-4.2886, 
    -10.9161, 2.86584), cameraUpVector=(0.251149, 0.496052, 0.831178), 
    cameraTarget=(-1.26776, -2.70603, 0.670367), viewOffsetX=-0.135127, 
    viewOffsetY=-0.202545)
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.57107, 
    farPlane=14.5394, width=7.82554, height=3.6579, viewOffsetX=-0.0291151, 
    viewOffsetY=-0.103261)
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.51563, 
    farPlane=14.8418, width=7.78021, height=3.63671, cameraPosition=(-8.21779, 
    -8.76172, 2.08511), cameraUpVector=(0.341544, 0.359992, 0.86819), 
    cameraTarget=(-2.2643, -2.17991, 0.476823), viewOffsetX=-0.0289464, 
    viewOffsetY=-0.102663)
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.52297, 
    farPlane=14.7862, width=7.78621, height=3.63952, cameraPosition=(-7.90073, 
    -8.80423, 2.86734), cameraUpVector=(0.377494, 0.40352, 0.833469), 
    cameraTarget=(-2.17712, -2.18619, 0.678099), viewOffsetX=-0.0289687, 
    viewOffsetY=-0.102742)
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.59923, 
    farPlane=14.8436, width=7.84856, height=3.66866, cameraPosition=(-9.87899, 
    -6.78064, 2.48238), cameraUpVector=(0.423425, 0.30987, 0.851288), 
    cameraTarget=(-2.69294, -1.67242, 0.580361), viewOffsetX=-0.0292007, 
    viewOffsetY=-0.103565)
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.57944, 
    farPlane=14.7961, width=7.83238, height=3.6611, cameraPosition=(-9.31227, 
    -7.14613, 3.35193), cameraUpVector=(0.467682, 0.353198, 0.810262), 
    cameraTarget=(-2.53729, -1.76397, 0.805793), viewOffsetX=-0.0291405, 
    viewOffsetY=-0.103352)
mdb.save()
#: The model database has been saved to "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae".
session.viewports['Viewport: 1'].view.setValues(nearPlane=10.0608, 
    farPlane=14.3148, width=1.13574, height=0.530879, viewOffsetX=-1.36427, 
    viewOffsetY=-0.0240392)
a = mdb.models['eigen-multiweb'].rootAssembly
n1 = a.instances['panel-1'].nodes
nodes1 = n1.getSequenceFromMask(mask=('[#4 ]', ), )
a.Set(nodes=nodes1, name='Load-Main')
#: The set 'Load-Main' has been created (1 node).
session.viewports['Viewport: 1'].view.setValues(nearPlane=10.093, 
    farPlane=14.2826, width=0.718411, height=0.335807, viewOffsetX=-1.39355, 
    viewOffsetY=-0.015533)
a = mdb.models['eigen-multiweb'].rootAssembly
n1 = a.instances['panel-1'].nodes
nodes1 = n1.getSequenceFromMask(mask=(
    '[#a62 #0:4 #fffffe00 #3f #0:10 #fffffc00 #7f', 
    ' #0:9 #ffffc000 #7ff #0:4 #1fffffff #0 #ff800000', ' #fffff ]', ), )
a.Set(nodes=nodes1, name='Load-Follower')
#: The set 'Load-Follower' has been created (150 nodes).
mdb.save()
#: The model database has been saved to "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae".
session.viewports['Viewport: 1'].view.setValues(nearPlane=10.1224, 
    farPlane=14.2532, width=0.335956, height=0.157036, viewOffsetX=-0.0690104, 
    viewOffsetY=0.495221)
a = mdb.models['eigen-multiweb'].rootAssembly
n1 = a.instances['panel-1'].nodes
nodes1 = n1.getSequenceFromMask(mask=('[#8 ]', ), )
a.Set(nodes=nodes1, name='Fixed-Main')
#: The set 'Fixed-Main' has been created (1 node).
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.80139, 
    farPlane=14.5742, width=5.08157, height=2.37528, viewOffsetX=-0.112063, 
    viewOffsetY=0.858617)
a = mdb.models['eigen-multiweb'].rootAssembly
n1 = a.instances['panel-1'].nodes
nodes1 = n1.getSequenceFromMask(mask=(
    '[#599 #0:9 #f8000000 #ffffffff #1fffff #0:9 #f0000000', 
    ' #1ffffff #0:10 #e0000000 #ffffffff #7fffff ]', ), )
a.Set(nodes=nodes1, name='Fixed-Follower')
#: The set 'Fixed-Follower' has been created (151 nodes).
session.viewports['Viewport: 1'].view.setValues(nearPlane=10.039, 
    farPlane=14.3366, width=1.41933, height=0.663439, viewOffsetX=-0.0698978, 
    viewOffsetY=0.581389)
a = mdb.models['eigen-multiweb'].rootAssembly
n1 = a.instances['panel-1'].nodes
nodes1 = n1.getSequenceFromMask(mask=(
    '[#591 #0:9 #f8000000 #ffffffff #1fffff #0:9 #f0000000', 
    ' #1ffffff #0:10 #e0000000 #ffffffff #7fffff ]', ), )
a.Set(nodes=nodes1, name='Fixed-Follower')
#: The set 'Fixed-Follower' has been edited (150 nodes).
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.85725, 
    farPlane=14.5183, width=4.23485, height=1.9795, viewOffsetX=0.583106, 
    viewOffsetY=0.612682)
mdb.save()
#: The model database has been saved to "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae".
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.80358, 
    farPlane=14.572, width=4.48063, height=2.09438, viewOffsetX=0.615042, 
    viewOffsetY=0.441963)
mdb.models['eigen-multiweb'].rootAssembly.sets.changeKey(
    fromName='Load-Follower', toName='Edge-Follower')
mdb.models['eigen-multiweb'].rootAssembly.sets.changeKey(fromName='Load-Main', 
    toName='Edge-Main')
session.viewports['Viewport: 1'].view.setValues(nearPlane=10.0173, 
    farPlane=14.3583, width=1.70118, height=0.795181, viewOffsetX=-0.540887, 
    viewOffsetY=0.12972)
a = mdb.models['eigen-multiweb'].rootAssembly
n1 = a.instances['panel-1'].nodes
nodes1 = n1.getSequenceFromMask(mask=('[#0:47 #800000 ]', ), )
a.Set(nodes=nodes1, name='Load-Main')
#: The set 'Load-Main' has been created (1 node).
session.viewports['Viewport: 1'].view.setValues(nearPlane=10.0374, 
    farPlane=14.3381, width=1.43913, height=0.672692, viewOffsetX=0.0905173, 
    viewOffsetY=-0.117156)
a = mdb.models['eigen-multiweb'].rootAssembly
n1 = a.instances['panel-1'].nodes
nodes1 = n1.getSequenceFromMask(mask=(
    '[#0:37 #2000000 #0:4 #1000000 #0:9 #400000 ]', ), )
a.Set(nodes=nodes1, name='Load-Follower')
#: The set 'Load-Follower' has been created (3 nodes).
mdb.save()
#: The model database has been saved to "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae".
session.viewports['Viewport: 1'].view.setValues(nearPlane=10.0432, 
    farPlane=14.3324, width=1.36465, height=0.637879, viewOffsetX=-0.693315, 
    viewOffsetY=-0.0429066)
a = mdb.models['eigen-multiweb'].rootAssembly
n1 = a.instances['panel-1'].nodes
nodes1 = n1.getSequenceFromMask(mask=('[#2 ]', ), )
a.Set(nodes=nodes1, name='Web1-Main')
#: The set 'Web1-Main' has been created (1 node).
a = mdb.models['eigen-multiweb'].rootAssembly
n1 = a.instances['panel-1'].nodes
nodes1 = n1.getSequenceFromMask(mask=('[#20 ]', ), )
a.Set(nodes=nodes1, name='Web2-Main')
#: The set 'Web2-Main' has been created (1 node).
a = mdb.models['eigen-multiweb'].rootAssembly
n1 = a.instances['panel-1'].nodes
nodes1 = n1.getSequenceFromMask(mask=('[#800 ]', ), )
a.Set(nodes=nodes1, name='Web3-Main')
#: The set 'Web3-Main' has been created (1 node).
session.viewports['Viewport: 1'].view.setValues(nearPlane=10.0432, 
    farPlane=14.3324, width=1.36465, height=0.637879, viewOffsetX=-0.431582, 
    viewOffsetY=-0.143893)
a = mdb.models['eigen-multiweb'].rootAssembly
n1 = a.instances['panel-1'].nodes
nodes1 = n1.getSequenceFromMask(mask=('[#40 ]', ), )
a.Set(nodes=nodes1, name='Web4-Main')
#: The set 'Web4-Main' has been created (1 node).
session.viewports['Viewport: 1'].view.setValues(nearPlane=10.021, 
    farPlane=14.3546, width=1.65281, height=0.772574, viewOffsetX=-0.745005, 
    viewOffsetY=-0.149761)
a = mdb.models['eigen-multiweb'].rootAssembly
n1 = a.instances['panel-1'].nodes
nodes1 = n1.getSequenceFromMask(mask=('[#30001 #0:46 #ffc0000 ]', ), )
a.Set(nodes=nodes1, name='Web1-Follower')
#: The set 'Web1-Follower' has been created (13 nodes).
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.95134, 
    farPlane=14.4242, width=2.88795, height=1.34992, viewOffsetX=-0.486577, 
    viewOffsetY=-0.0152703)
a = mdb.models['eigen-multiweb'].rootAssembly
n1 = a.instances['panel-1'].nodes
nodes1 = n1.getSequenceFromMask(mask=('[#c010 #0:41 #1ff80000 ]', ), )
a.Set(nodes=nodes1, name='Web2-Follower')
#: The set 'Web2-Follower' has been created (13 nodes).
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.98834, 
    farPlane=14.3872, width=2.07696, height=0.970833, viewOffsetX=-0.318677, 
    viewOffsetY=-0.192889)
a = mdb.models['eigen-multiweb'].rootAssembly
n1 = a.instances['panel-1'].nodes
nodes1 = n1.getSequenceFromMask(mask=('[#c0400 #0:51 #7fe0000 ]', ), )
a.Set(nodes=nodes1, name='Web3-Follower')
#: The set 'Web3-Follower' has been created (13 nodes).
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.8489, 
    farPlane=14.5267, width=4.38697, height=2.0506, viewOffsetX=-0.0365835, 
    viewOffsetY=-0.111058)
a = mdb.models['eigen-multiweb'].rootAssembly
n1 = a.instances['panel-1'].nodes
nodes1 = n1.getSequenceFromMask(mask=('[#3080 #0:36 #3ff00000 ]', ), )
a.Set(nodes=nodes1, name='Web4-Follower')
#: The set 'Web4-Follower' has been created (13 nodes).
mdb.save()
#: The model database has been saved to "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae".
session.viewports['Viewport: 1'].assemblyDisplay.setValues(interactions=ON, 
    constraints=ON, connectors=ON, engineeringFeatures=ON)
mdb.models['eigen-multiweb'].Equation(name='Web1', terms=((1.0, 
    'Web1-Follower', 2), (-1.0, 'Web1-Main', 2)))
mdb.models['eigen-multiweb'].Equation(name='Web2', terms=((1.0, 
    'Web2-Follower', 2), (-1.0, 'Web2-Main', 2)))
mdb.models['eigen-multiweb'].Equation(name='Web3', terms=((1.0, 
    'Web3-Follower', 2), (-1.0, 'Web3-Main', 2)))
mdb.models['eigen-multiweb'].Equation(name='Web4', terms=((1.0, 
    'Web4-Follower', 2), (-1.0, 'Web4-Main', 2)))
mdb.models['eigen-multiweb'].Equation(name='Free-Edge', terms=((1.0, 
    'Edge-Follower', 1), (-1.0, 'Edge-Main', 1)))
mdb.models['eigen-multiweb'].Equation(name='Edge-Fixed', terms=((1.0, 
    'Fixed-Follower', 1), (-1.0, 'Fixed-Main', 1)))
mdb.models['eigen-multiweb'].constraints.changeKey(fromName='Edge-Fixed', 
    toName='Fixed-Edge')
mdb.save()
#: The model database has been saved to "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae".
mdb.models['eigen-multiweb'].Equation(name='Constraint-7', terms=((1.0, 
    'Load-Follower', 1), (-1.0, 'Load-Main', 1)))
mdb.models['eigen-multiweb'].constraints.changeKey(fromName='Constraint-7', 
    toName='Load')
session.viewports['Viewport: 1'].assemblyDisplay.setValues(interactions=OFF, 
    constraints=OFF, connectors=OFF, engineeringFeatures=OFF, 
    adaptiveMeshConstraints=ON)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=ON, bcs=ON, 
    predefinedFields=ON, connectors=ON, adaptiveMeshConstraints=OFF)
session.viewports['Viewport: 1'].view.setValues(nearPlane=10.004, 
    farPlane=14.3716, width=1.87387, height=0.875904, viewOffsetX=-0.719117, 
    viewOffsetY=-0.0849318)
session.viewports['Viewport: 1'].view.setProjection(projection=PARALLEL)
session.viewports['Viewport: 1'].view.setValues(nearPlane=10.0009, 
    farPlane=14.3747, width=1.91202, height=0.893736, cameraPosition=(-9.60284, 
    -6.86199, 3.17941), cameraTarget=(-0.447968, 0.410798, -0.261126))
a = mdb.models['eigen-multiweb'].rootAssembly
n1 = a.instances['panel-1'].nodes
nodes1 = n1.getSequenceFromMask(mask=(
    '[#0:37 #2000000 #0:4 #1000000 #0:9 #400000 #0:13', ' #1000000 ]', ), )
region = regionToolset.Region(nodes=nodes1)
mdb.models['eigen-multiweb'].ConcentratedForce(name='Load-1', 
    createStepName='buckle', region=region, cf1=250000.0, 
    distributionType=UNIFORM, field='', localCsys=None)
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.95949, 
    farPlane=14.4161, width=2.77157, height=1.29551, cameraPosition=(-9.54854, 
    -6.90705, 3.22863), cameraTarget=(-0.393671, 0.365737, -0.211903))
session.viewports['Viewport: 1'].view.setValues(nearPlane=10.134, 
    farPlane=14.5298, cameraPosition=(-11.1677, -5.00723, 1.68388), 
    cameraUpVector=(0.395701, 0.272128, 0.877136), cameraTarget=(-0.393672, 
    0.365737, -0.211904))
session.viewports['Viewport: 1'].view.setValues(nearPlane=10.0542, 
    farPlane=14.4153, cameraPosition=(-10.1668, -5.78169, 3.70014), 
    cameraUpVector=(0.513249, 0.34226, 0.787041), cameraTarget=(-0.381976, 
    0.356687, -0.188344))
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.98366, 
    farPlane=14.4859, width=3.5206, height=1.64563, cameraPosition=(-9.99306, 
    -5.946, 3.87795), cameraTarget=(-0.208239, 0.19238, -0.0105344))
a = mdb.models['eigen-multiweb'].rootAssembly
n1 = a.instances['panel-1'].nodes
nodes1 = n1.getSequenceFromMask(mask=(
    '[#0:37 #2000000 #0:4 #1000000 #0:4 #800000 #0:4', ' #400000 ]', ), )
region = regionToolset.Region(nodes=nodes1)
mdb.models['eigen-multiweb'].loads['Load-1'].setValues(region=region, 
    distributionType=UNIFORM, field='')
session.viewports['Viewport: 1'].view.setValues(nearPlane=10.0679, 
    farPlane=14.4017, width=2.42875, height=1.13527, cameraPosition=(-10.1357, 
    -5.78802, 3.76843), cameraTarget=(-0.350863, 0.350353, -0.120051))
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.84197, 
    farPlane=14.2551, cameraPosition=(-6.77607, -9.60448, 2.75465), 
    cameraUpVector=(0.193937, 0.523377, 0.829738), cameraTarget=(-0.33796, 
    0.335695, -0.123945))
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.62289, 
    farPlane=14.4741, width=5.79918, height=2.71071, cameraPosition=(-6.57929, 
    -9.64959, 3.03898), cameraTarget=(-0.141183, 0.290584, 0.160383))
mdb.save()
#: The model database has been saved to "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae".
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.34394, 
    farPlane=14.7531, width=8.7416, height=4.08609, cameraPosition=(-5.21696, 
    -10.4559, 3.30147), cameraTarget=(1.22115, -0.515765, 0.422875))
a = mdb.models['eigen-multiweb'].rootAssembly
n1 = a.instances['panel-1'].nodes
nodes1 = n1.getSequenceFromMask(mask=(
    '[#fff #0:4 #fffffe00 #ffffffff:6 #1fffff #0:4 #fffffc00', 
    ' #7f #0:3 #f0000000 #ffffffff:6 #7ff #0:4 #ffffffff:3', ' #fffff ]', ), )
region = regionToolset.Region(nodes=nodes1)
mdb.models['eigen-multiweb'].DisplacementBC(name='Edge', 
    createStepName='buckle', region=region, u1=UNSET, u2=UNSET, u3=0.0, 
    ur1=UNSET, ur2=UNSET, ur3=UNSET, amplitude=UNSET, 
    buckleCase=PERTURBATION_AND_BUCKLING, fixed=OFF, distributionType=UNIFORM, 
    fieldName='', localCsys=None)
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.49173, 
    farPlane=14.6053, width=6.82499, height=3.19021, cameraPosition=(-5.66184, 
    -10.2117, 3.14978), cameraTarget=(0.776264, -0.271544, 0.271189))
mdb.save()
#: The model database has been saved to "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae".
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.87449, 
    farPlane=14.2225, width=1.86118, height=0.86997, cameraPosition=(-6.16404, 
    -9.95107, 2.92666), cameraTarget=(0.274068, -0.0108936, 0.0480648))
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.97468, 
    farPlane=14.1094, cameraPosition=(-6.18863, -9.05062, 5.04787), 
    cameraUpVector=(0.442289, 0.534219, 0.72041), cameraTarget=(0.274352, 
    -0.0213039, 0.0235408))
a = mdb.models['eigen-multiweb'].rootAssembly
n1 = a.instances['panel-1'].nodes
nodes1 = n1.getSequenceFromMask(mask=('[#0:530 #8 ]', ), )
region = regionToolset.Region(nodes=nodes1)
mdb.models['eigen-multiweb'].DisplacementBC(name='Centre', 
    createStepName='buckle', region=region, u1=UNSET, u2=0.0, u3=UNSET, 
    ur1=UNSET, ur2=UNSET, ur3=UNSET, amplitude=UNSET, 
    buckleCase=PERTURBATION_AND_BUCKLING, fixed=OFF, distributionType=UNIFORM, 
    fieldName='', localCsys=None)
session.viewports['Viewport: 1'].view.setValues(nearPlane=10.054, 
    farPlane=14.0301, width=0.720799, height=0.336923, cameraPosition=(
    -5.08669, -9.78756, 5.14098), cameraTarget=(1.37629, -0.758241, 0.116646))
a = mdb.models['eigen-multiweb'].rootAssembly
n1 = a.instances['panel-1'].nodes
nodes1 = n1.getSequenceFromMask(mask=(
    '[#0:37 #1000000 #0:4 #800000 #0:4 #400000 #0:4', ' #200000 ]', ), )
region = regionToolset.Region(nodes=nodes1)
mdb.models['eigen-multiweb'].DisplacementBC(name='End', 
    createStepName='buckle', region=region, u1=0.0, u2=UNSET, u3=UNSET, 
    ur1=UNSET, ur2=UNSET, ur3=UNSET, amplitude=UNSET, 
    buckleCase=PERTURBATION_AND_BUCKLING, fixed=OFF, distributionType=UNIFORM, 
    fieldName='', localCsys=None)
session.viewports['Viewport: 1'].view.setValues(nearPlane=9.64433, 
    farPlane=14.4398, width=6.03369, height=2.82033, cameraPosition=(-5.91005, 
    -9.30525, 4.94862), cameraTarget=(0.552934, -0.275934, -0.0757068))
mdb.save()
#: The model database has been saved to "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae".
mdb.Model(name='riks-multiweb', objectToCopy=mdb.models['eigen-multiweb'])
#: The model "riks-multiweb" has been created.
a = mdb.models['riks-multiweb'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, connectors=OFF, adaptiveMeshConstraints=ON)
mdb.models['riks-multiweb'].StaticRiksStep(name='buckle', previous='Initial', 
    maintainAttributes=True, maxNumInc=50, initialArcInc=0.001, 
    minArcInc=0.0007, maxArcInc=1e+36, totalArcLength=70.0)
mdb.models['riks-multiweb'].steps.changeKey(fromName='buckle', toName='riks')
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='Initial')
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=OFF)
mdb.Job(name='eigen-multiweb', model='eigen-multiweb', description='', 
    type=ANALYSIS, atTime=None, waitMinutes=0, waitHours=0, queue=None, 
    memory=90, memoryUnits=PERCENTAGE, getMemoryFromAnalysis=True, 
    explicitPrecision=SINGLE, nodalOutputPrecision=SINGLE, echoPrint=OFF, 
    modelPrint=OFF, contactPrint=OFF, historyPrint=OFF, userSubroutine='', 
    scratch='', resultsFormat=ODB, multiprocessingMode=DEFAULT, numCpus=4, 
    numDomains=4, numGPUs=4)
mdb.jobs['eigen-multiweb'].submit(consistencyChecking=OFF)
#: Abaqus Warning: The following input options are not supported by parallel execution of element operations: buckle. Only the solver will be executed in parallel for this analysis.
#: The job input file "eigen-multiweb.inp" has been submitted for analysis.
#: Job eigen-multiweb: Analysis Input File Processor completed successfully.
#: Job eigen-multiweb: Abaqus/Standard completed successfully.
#: Job eigen-multiweb completed successfully. 
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/SP1-UC1-e.odb'])
o1 = session.openOdb(
    name='C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/eigen-multiweb.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o1)
#: Model: C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/eigen-multiweb.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     1
#: Number of Meshes:             1
#: Number of Element Sets:       1
#: Number of Node Sets:          15
#: Number of Steps:              1
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.52242, 
    farPlane=10.9596, width=5.86956, height=2.74361, viewOffsetX=0.312345, 
    viewOffsetY=0.10707)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.18029, 
    farPlane=10.7315, width=5.56168, height=2.5997, cameraPosition=(4.63034, 
    -5.39525, 4.79593), cameraUpVector=(-0.0901037, 0.88865, 0.449647), 
    cameraTarget=(-0.0444772, -0.0248578, -0.274599), viewOffsetX=0.295961, 
    viewOffsetY=0.101454)
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.16963, 
    farPlane=10.1718, width=5.55208, height=2.59522, cameraPosition=(-1.1259, 
    -7.19722, 3.92659), cameraUpVector=(0.189215, 0.736976, 0.648894), 
    cameraTarget=(0.0831055, 0.282933, -0.43127), viewOffsetX=0.29545, 
    viewOffsetY=0.101279)
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.18656, 
    farPlane=10.2898, width=5.56732, height=2.60234, cameraPosition=(-0.945619, 
    -7.83458, 2.60434), cameraUpVector=(0.13858, 0.6194, 0.772748), 
    cameraTarget=(0.0734233, 0.328345, -0.350924), viewOffsetX=0.296261, 
    viewOffsetY=0.101557)
session.viewports['Viewport: 1'].view.setValues(nearPlane=5.97603, 
    farPlane=10.343, width=5.37786, height=2.51378, cameraPosition=(-1.9809, 
    -7.37217, 3.11376), cameraUpVector=(0.208498, 0.65139, 0.729534), 
    cameraTarget=(0.143688, 0.347742, -0.392575), viewOffsetX=0.286179, 
    viewOffsetY=0.098101)
session.viewports['Viewport: 1'].view.setValues(nearPlane=5.17216, 
    farPlane=10.2291, width=4.65445, height=2.17564, cameraPosition=(-5.86545, 
    5.02504, -0.0728675), cameraUpVector=(0.576527, 0.149409, 0.803302), 
    cameraTarget=(1.01163, -0.361711, -0.379526), viewOffsetX=0.247683, 
    viewOffsetY=0.0849049)
session.viewports['Viewport: 1'].view.setValues(nearPlane=5.24319, 
    farPlane=9.9814, width=4.71837, height=2.20552, cameraPosition=(-6.04749, 
    4.12821, 2.37936), cameraUpVector=(0.704315, -0.0291456, 0.709289), 
    cameraTarget=(0.958157, -0.135865, -0.644534), viewOffsetX=0.251085, 
    viewOffsetY=0.086071)
session.viewports['Viewport: 1'].view.setProjection(projection=PARALLEL)
session.viewports['Viewport: 1'].view.setValues(cameraPosition=(7.58608, 
    0.118434, -0.0209527), cameraUpVector=(0, 1, 0))
session.viewports['Viewport: 1'].view.setValues(cameraPosition=(7.58608, 
    -0.234237, -1.57393), cameraTarget=(-0.0262173, -0.234238, -1.57393))
session.viewports['Viewport: 1'].view.setValues(nearPlane=5.40857, 
    farPlane=9.7664, width=9.47059, height=4.42684, cameraPosition=(7.58608, 
    -0.255786, -1.83856), cameraTarget=(-0.0262173, -0.255787, -1.83856))
session.viewports['Viewport: 1'].view.setValues(nearPlane=5.36738, 
    farPlane=9.80759, cameraPosition=(7.58608, -0.30203, -2.05284), 
    cameraTarget=(-0.0262173, -0.302031, -2.05284))
session.viewports['Viewport: 1'].view.setValues(width=8.90235, height=4.16123, 
    cameraPosition=(7.58608, -0.291481, -1.94065), cameraTarget=(-0.0262173, 
    -0.291482, -1.94065))
session.viewports['Viewport: 1'].view.setValues(nearPlane=5.40857, 
    farPlane=9.7664, cameraPosition=(7.58608, -0.346806, -1.88141), 
    cameraTarget=(-0.0262173, -0.346807, -1.88141))
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=0 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=1 )
session.viewports['Viewport: 1'].odbDisplay.commonOptions.setValues(
    visibleEdges=FREE)
session.viewports['Viewport: 1'].view.setValues(nearPlane=4.08491, 
    farPlane=8.27733, cameraPosition=(2.15769, -4.68379, 3.95801), 
    cameraUpVector=(0.170596, 0.820181, 0.546077), cameraTarget=(-0.00846362, 
    -0.332623, -1.90051))
session.viewports['Viewport: 1'].view.setValues(nearPlane=4.60267, 
    farPlane=9.45812, cameraPosition=(-0.805644, -7.1087, 0.322366), 
    cameraUpVector=(0.0144633, 0.182129, 0.983168), cameraTarget=(0.677669, 
    0.228843, -1.05871))
session.viewports['Viewport: 1'].view.setValues(nearPlane=4.91258, 
    farPlane=9.94349, cameraPosition=(-1.35101, -6.93771, -2.41038), 
    cameraUpVector=(-0.155539, -0.169587, 0.973164), cameraTarget=(0.722809, 
    0.21469, -0.832521))
session.viewports['Viewport: 1'].view.setValues(nearPlane=4.14165, 
    farPlane=9.63021, cameraPosition=(-3.29387, -6.1554, 0.149364), 
    cameraUpVector=(0.147532, 0.0679936, 0.986717), cameraTarget=(0.771006, 
    0.195283, -0.896022))
session.viewports['Viewport: 1'].view.setValues(nearPlane=4.22376, 
    farPlane=9.51161, cameraPosition=(-2.41979, -6.50599, 0.75524), 
    cameraUpVector=(0.14019, 0.183211, 0.973026), cameraTarget=(0.678802, 
    0.232266, -0.959934))
session.viewports['Viewport: 1'].view.setValues(nearPlane=4.10675, 
    farPlane=9.35911, cameraPosition=(-2.53448, -6.20492, 1.51218), 
    cameraUpVector=(0.262753, 0.24033, 0.934453), cameraTarget=(0.691237, 
    0.199622, -1.042))
session.viewports['Viewport: 1'].view.setValues(farPlane=9.35911, 
    cameraPosition=(-1.42146, -6.59405, 1.9421), cameraTarget=(1.80425, 
    -0.189505, -0.612078))
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=2 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=3 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=4 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=5 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=5 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=0 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=1 )
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=0 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=1 )
mdb.save()
#: The model database has been saved to "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae".
a = mdb.models['riks-multiweb'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
mdb.Job(name='riks-multiweb', model='riks-multiweb', description='', 
    type=ANALYSIS, atTime=None, waitMinutes=0, waitHours=0, queue=None, 
    memory=90, memoryUnits=PERCENTAGE, getMemoryFromAnalysis=True, 
    explicitPrecision=SINGLE, nodalOutputPrecision=SINGLE, echoPrint=OFF, 
    modelPrint=OFF, contactPrint=OFF, historyPrint=OFF, userSubroutine='', 
    scratch='', resultsFormat=ODB, multiprocessingMode=DEFAULT, numCpus=4, 
    numDomains=4, numGPUs=4)
mdb.jobs['riks-multiweb'].writeInput(consistencyChecking=OFF)
#: The job input file has been written to "riks-multiweb.inp".
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/eigen-multiweb.odb'])
o1 = session.openOdb(
    name='C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/riks-multiweb.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o1)
#: Model: C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/riks-multiweb.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     1
#: Number of Meshes:             1
#: Number of Element Sets:       1
#: Number of Node Sets:          15
#: Number of Steps:              1
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].view.setValues(nearPlane=7.07892, 
    farPlane=10.1346, cameraPosition=(4.1634, -0.146242, 7.47359), 
    cameraUpVector=(-0.023751, 0.934591, -0.354929), cameraTarget=(-0.00477269, 
    -0.0326297, 0.0790099))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.91483, 
    farPlane=10.4022, cameraPosition=(1.4479, -4.00972, 7.45759), 
    cameraUpVector=(0.254478, 0.963945, 0.077788), cameraTarget=(-0.0418662, 
    -0.0854045, 0.0787914))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.39554, 
    farPlane=11.0073, cameraPosition=(-1.83904, -7.47627, 3.93885), 
    cameraUpVector=(0.257007, 0.689108, 0.677553), cameraTarget=(-0.106146, 
    -0.153196, 0.00997855))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.32063, 
    farPlane=11.0673, cameraPosition=(-1.64842, -8.46665, -1.09301), 
    cameraUpVector=(0.0445102, 0.217768, 0.974985), cameraTarget=(-0.101497, 
    -0.177352, -0.112749))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.13623, 
    farPlane=11.3094, cameraPosition=(-3.57527, -7.70425, -1.97406), 
    cameraUpVector=(0.058379, 0.106381, 0.99261), cameraTarget=(-0.146881, 
    -0.159395, -0.133501))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.10434, 
    farPlane=11.3566, cameraPosition=(-3.95306, -7.67186, 1.04557), 
    cameraUpVector=(0.151967, 0.429933, 0.88998), cameraTarget=(-0.156999, 
    -0.158528, -0.0526255))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.09578, 
    farPlane=11.3985, cameraPosition=(-4.77978, -6.81691, 2.4888), 
    cameraUpVector=(0.325505, 0.499876, 0.802602), cameraTarget=(-0.179847, 
    -0.1349, -0.0127388))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.08802, 
    farPlane=11.4082, cameraPosition=(-4.86138, -6.80544, 2.3651), 
    cameraUpVector=(0.317897, 0.490809, 0.811202), cameraTarget=(-0.182253, 
    -0.134562, -0.0163867))
session.viewports['Viewport: 1'].odbDisplay.commonOptions.setValues(
    visibleEdges=EXTERIOR)
session.viewports['Viewport: 1'].view.setValues(farPlane=11.4082, 
    cameraPosition=(-3.6518, -7.62585, 2.44359), cameraTarget=(1.02733, 
    -0.954972, 0.0621071))
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=0 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=1 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=0 )
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].animationController.stop()
session.viewports['Viewport: 1'].animationController.showLastFrame()
session.viewports['Viewport: 1'].animationController.showLastFrame()
session.viewports['Viewport: 1'].animationController.showLastFrame()
session.viewports['Viewport: 1'].animationController.showLastFrame()
session.viewports['Viewport: 1'].animationController.showLastFrame()
session.viewports['Viewport: 1'].animationController.showLastFrame()
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.incrementFrame()
session.viewports['Viewport: 1'].animationController.incrementFrame()
session.viewports['Viewport: 1'].animationController.incrementFrame()
session.viewports['Viewport: 1'].animationController.incrementFrame()
session.viewports['Viewport: 1'].animationController.incrementFrame()
session.viewports['Viewport: 1'].animationController.incrementFrame()
session.viewports['Viewport: 1'].animationController.incrementFrame()
session.viewports['Viewport: 1'].animationController.incrementFrame()
session.viewports['Viewport: 1'].animationController.incrementFrame()
session.viewports['Viewport: 1'].animationController.incrementFrame()
session.viewports['Viewport: 1'].animationController.incrementFrame()
session.viewports['Viewport: 1'].animationController.incrementFrame()
session.viewports['Viewport: 1'].animationController.incrementFrame()
session.viewports['Viewport: 1'].animationController.incrementFrame()
session.viewports['Viewport: 1'].animationController.incrementFrame()
session.viewports['Viewport: 1'].animationController.incrementFrame()
session.viewports['Viewport: 1'].animationController.incrementFrame()
session.viewports['Viewport: 1'].animationController.incrementFrame()
session.viewports['Viewport: 1'].partDisplay.setValues(sectionAssignments=OFF, 
    engineeringFeatures=OFF)
session.viewports['Viewport: 1'].partDisplay.geometryOptions.setValues(
    referenceRepresentation=ON)
p1 = mdb.models['eigen-multiweb'].parts['panel']
session.viewports['Viewport: 1'].setValues(displayedObject=p1)
session.viewports['Viewport: 1'].partDisplay.setValues(mesh=ON)
session.viewports['Viewport: 1'].partDisplay.meshOptions.setValues(
    meshTechnique=ON)
session.viewports['Viewport: 1'].partDisplay.geometryOptions.setValues(
    referenceRepresentation=OFF)
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
session.viewports['Viewport: 1'].view.setValues(nearPlane=7.9643, 
    farPlane=12.043, width=0.923164, height=0.432282, cameraPosition=(8.43523, 
    3.73764, 5.57351), cameraTarget=(0.460636, 0.36428, 0.56358))
p = mdb.models['eigen-multiweb'].parts['panel']
n = p.nodes
nodes = n.getSequenceFromMask(mask=(
    '[#0:37 #3000000 #0:4 #1800000 #0:4 #c00000 #0:4', ' #600000 ]', ), )
p.editNode(nodes=nodes, offset2=-0.002)
p1 = mdb.models['riks-multiweb'].parts['panel']
session.viewports['Viewport: 1'].setValues(displayedObject=p1)
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.65902, 
    farPlane=10.3189, width=0.800087, height=0.37465, cameraPosition=(4.97092, 
    5.64142, 5.65347), cameraTarget=(0.0698172, 0.740317, 0.752366))
p = mdb.models['riks-multiweb'].parts['panel']
n = p.nodes
nodes = n.getSequenceFromMask(mask=(
    '[#0:37 #3000000 #0:4 #1800000 #0:4 #c00000 #0:4', ' #600000 ]', ), )
p.editNode(nodes=nodes, offset2=-0.002)
mdb.save()
#: The model database has been saved to "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae".
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.53356, 
    farPlane=10.4444, width=2.74358, height=1.28471, cameraPosition=(5.08115, 
    5.6732, 5.51146), cameraTarget=(0.180046, 0.772096, 0.610358))
a = mdb.models['riks-multiweb'].rootAssembly
a.regenerate()
session.viewports['Viewport: 1'].setValues(displayedObject=a)
mdb.jobs['riks-multiweb'].writeInput(consistencyChecking=OFF)
#: The job input file has been written to "riks-multiweb.inp".
a = mdb.models['eigen-multiweb'].rootAssembly
a.regenerate()
session.viewports['Viewport: 1'].setValues(displayedObject=a)
a = mdb.models['eigen-multiweb'].rootAssembly
a.regenerate()
a = mdb.models['riks-multiweb'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
a = mdb.models['riks-multiweb'].rootAssembly
a.regenerate()
mdb.jobs['riks-multiweb'].writeInput(consistencyChecking=OFF)
#: The job input file has been written to "riks-multiweb.inp".
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.68336, 
    farPlane=10.2946, width=0.48586, height=0.227106, cameraPosition=(5.5748, 
    5.0117, 4.17931), cameraTarget=(0.673693, 0.110601, -0.721794))
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=ON)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=ON)
#: 
#: Point 1: 1.5, 900.E-03, 11.227E-03  Point 2: 1.5, 900.E-03, 0.
#:    Distance: 11.227E-03  Components: 0., 0., -11.227E-03
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.18334, 
    farPlane=10.7946, width=6.95807, height=3.25819, cameraPosition=(5.66042, 
    4.85467, 4.25072), cameraTarget=(0.759317, -0.046433, -0.650384))
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=OFF)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=OFF)
mdb.jobs['riks-multiweb'].writeInput(consistencyChecking=OFF)
#: The job input file has been written to "riks-multiweb.inp".
a = mdb.models['eigen-multiweb'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
a = mdb.models['eigen-multiweb'].rootAssembly
a.regenerate()
mdb.jobs['eigen-multiweb'].submit(consistencyChecking=OFF)
#: Abaqus Warning: The following input options are not supported by parallel execution of element operations: buckle. Only the solver will be executed in parallel for this analysis.
#: The job input file "eigen-multiweb.inp" has been submitted for analysis.
#: Job eigen-multiweb: Analysis Input File Processor completed successfully.
#: Job eigen-multiweb: Abaqus/Standard completed successfully.
#: Job eigen-multiweb completed successfully. 
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/riks-multiweb.odb'])
o1 = session.openOdb(
    name='C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/eigen-multiweb.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o1)
#: Model: C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/eigen-multiweb.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     1
#: Number of Meshes:             1
#: Number of Element Sets:       1
#: Number of Node Sets:          15
#: Number of Steps:              1
session.viewports['Viewport: 1'].view.setValues(nearPlane=4.41709, 
    farPlane=9.14461, width=5.77298, height=2.69846, cameraPosition=(-2.34344, 
    -6.01418, 2.23172), cameraTarget=(0.882271, 0.390362, -0.322456))
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].view.setValues(nearPlane=4.2167, 
    farPlane=9.24999, width=7.86612, height=3.67686, cameraPosition=(-2.24686, 
    -6.04588, 2.27423), cameraTarget=(0.978853, 0.358668, -0.279953))
session.viewports['Viewport: 1'].view.setValues(nearPlane=4.18249, 
    farPlane=9.2842, cameraPosition=(-1.58317, -6.41926, 2.17616), 
    cameraTarget=(1.64254, -0.0147144, -0.378016))
o1 = session.openOdb(
    name='C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/riks-multiweb.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o1)
#: Model: C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/riks-multiweb.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     1
#: Number of Meshes:             1
#: Number of Element Sets:       1
#: Number of Node Sets:          15
#: Number of Steps:              1
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.17643, 
    farPlane=11.1699, width=6.1419, height=2.87091, cameraPosition=(-4.38512, 
    -7.0694, 2.56146), cameraTarget=(0.294007, -0.398521, 0.179976))
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.66994, 
    farPlane=10.8598, width=0.622349, height=0.290905, cameraPosition=(
    -5.91391, -6.01974, 2.49795), cameraTarget=(-1.23478, 0.651141, 0.116467))
a = mdb.models['riks-multiweb'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='riks')
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=ON)
mdb.models['riks-multiweb'].steps['riks'].setValues(initialArcInc=0.0001, 
    minArcInc=1e-06, maxArcInc=1e+36, totalArcLength=50.0)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=OFF)
mdb.jobs['riks-multiweb'].writeInput(consistencyChecking=OFF)
#: The job input file has been written to "riks-multiweb.inp".
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/riks-multiweb.odb'])
o1 = session.openOdb(
    name='C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/riks-multiweb.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o1)
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.62237, 
    farPlane=10.9074, width=1.23929, height=0.579283, cameraPosition=(-5.80357, 
    -6.10928, 2.46393), cameraTarget=(-1.12444, 0.5616, 0.0824469))
session.viewports['Viewport: 1'].animationController.showLastFrame()
session.viewports['Viewport: 1'].animationController.showFirstFrame()
#: Warning: The output database 'C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/riks-multiweb.odb' disk file has changed.
#: 
#: The current plot operation has been canceled, re-open the file to view the results
o1 = session.openOdb(
    name='C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/riks-multiweb.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o1)
#: Model: C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/riks-multiweb.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     1
#: Number of Meshes:             1
#: Number of Element Sets:       1
#: Number of Node Sets:          15
#: Number of Steps:              1
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.1462, 
    farPlane=11.2001, width=6.53394, height=3.05416, cameraPosition=(-4.26598, 
    -7.14069, 2.59586), cameraTarget=(0.413155, -0.469812, 0.21438))
session.viewports['Viewport: 1'].animationController.showLastFrame()
session.viewports['Viewport: 1'].animationController.showLastFrame()
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.showFirstFrame()
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.1462, 
    farPlane=11.2001, width=6.53394, cameraPosition=(-4.20022, -7.21841, 
    2.50735), cameraTarget=(0.47891, -0.547534, 0.125867))
o1 = session.openOdb(
    name='C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/riks-multiweb.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o1)
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.11404, 
    farPlane=11.2323, width=6.951, height=3.24911, cameraPosition=(-4.19367, 
    -7.21476, 2.53046), cameraTarget=(0.485458, -0.543877, 0.148973))
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.62315, 
    farPlane=10.9066, width=1.22921, height=0.574572, cameraPosition=(-5.7506, 
    -6.13935, 2.48378), cameraTarget=(-1.07147, 0.531529, 0.102297))
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.decrementFrame()
session.viewports['Viewport: 1'].animationController.showFirstFrame()
session.viewports['Viewport: 1'].animationController.showFirstFrame()
session.viewports['Viewport: 1'].animationController.showFirstFrame()
session.viewports['Viewport: 1'].animationController.showFirstFrame()
session.viewports['Viewport: 1'].animationController.showFirstFrame()
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=0 )
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.50137, 
    farPlane=10.845, width=2.18182, height=1.01985, cameraPosition=(-5.72982, 
    -6.1639, 2.45584), cameraTarget=(-1.05069, 0.506983, 0.0743586))
session.animationOptions.setValues(frameRate=21)
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.27885, 
    farPlane=11.4619, width=4.64092, height=2.16931, cameraPosition=(-4.86023, 
    -6.74954, 2.52392), cameraTarget=(-0.181106, -0.0786654, 0.142433))
session.viewports['Viewport: 1'].animationController.stop()
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.19005, 
    farPlane=11.5507, width=5.9442, height=2.7785, cameraPosition=(-4.60971, 
    -7.0048, 2.30114), cameraTarget=(0.0694174, -0.333918, -0.08034))
a = mdb.models['riks-multiweb'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=ON, bcs=ON, 
    predefinedFields=ON, connectors=ON)
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.07556, 
    farPlane=10.9024, width=8.36815, height=3.91153, cameraPosition=(5.02377, 
    4.78347, 4.95858), cameraTarget=(0.122664, -0.117638, 0.0574743))
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, connectors=OFF, adaptiveMeshConstraints=ON)
mdb.models['riks-multiweb'].steps['riks'].setValues(nlgeom=ON)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=OFF)
mdb.jobs['riks-multiweb'].writeInput(consistencyChecking=OFF)
#: The job input file has been written to "riks-multiweb.inp".
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/riks-multiweb.odb'])
o1 = session.openOdb(
    name='C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/riks-multiweb.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o1)
#: Model: C:/Users/sbonnell/Desktop/lase/projects/ultimate-strength/eigen-buckling/abaqus/riks-multiweb.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     1
#: Number of Meshes:             1
#: Number of Element Sets:       1
#: Number of Node Sets:          15
#: Number of Steps:              1
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.1462, 
    farPlane=11.2001, width=6.53394, height=3.05416, cameraPosition=(-4.27454, 
    -7.20512, 2.39858), cameraTarget=(0.404594, -0.534238, 0.017093))
session.viewports['Viewport: 1'].partDisplay.setValues(mesh=OFF)
session.viewports['Viewport: 1'].partDisplay.meshOptions.setValues(
    meshTechnique=OFF)
session.viewports['Viewport: 1'].partDisplay.geometryOptions.setValues(
    referenceRepresentation=ON)
p1 = mdb.models['eigen-multiweb'].parts['panel']
session.viewports['Viewport: 1'].setValues(displayedObject=p1)
session.viewports['Viewport: 1'].partDisplay.setValues(mesh=ON)
session.viewports['Viewport: 1'].partDisplay.meshOptions.setValues(
    meshTechnique=ON)
session.viewports['Viewport: 1'].partDisplay.geometryOptions.setValues(
    referenceRepresentation=OFF)
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.46441, 
    farPlane=10.5135, width=0.731521, height=0.342543, cameraPosition=(7.11757, 
    3.29199, 4.94649), cameraTarget=(0.350444, 0.429396, 0.695134))
p = mdb.models['eigen-multiweb'].parts['panel']
n = p.nodes
nodes = n.getSequenceFromMask(mask=(
    '[#0:37 #3000000 #0:4 #1800000 #0:4 #c00000 #0:4', ' #600000 ]', ), )
p.editNode(nodes=nodes, offset2=0.002)
mdb.save()
#: The model database has been saved to "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae".
p1 = mdb.models['riks-multiweb'].parts['panel']
session.viewports['Viewport: 1'].setValues(displayedObject=p1)
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.63984, 
    farPlane=10.3381, width=1.04846, height=0.490952, cameraPosition=(5.13053, 
    5.57656, 5.55873), cameraTarget=(0.229421, 0.675457, 0.65762))
p = mdb.models['riks-multiweb'].parts['panel']
n = p.nodes
nodes = n.getSequenceFromMask(mask=(
    '[#0:37 #3000000 #0:4 #1800000 #0:4 #c00000 #0:4', ' #600000 ]', ), )
p.editNode(nodes=nodes, offset2=0.002)
mdb.save()
#: The model database has been saved to "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae".
a = mdb.models['riks-multiweb'].rootAssembly
a.regenerate()
session.viewports['Viewport: 1'].setValues(displayedObject=a)
a = mdb.models['eigen-multiweb'].rootAssembly
a.regenerate()
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='Initial')
a = mdb.models['eigen-multiweb'].rootAssembly
a.regenerate()
a = mdb.models['riks-multiweb'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
a = mdb.models['riks-multiweb'].rootAssembly
a.regenerate()
mdb.jobs['eigen-multiweb'].submit(consistencyChecking=OFF)
#: Abaqus Warning: The following input options are not supported by parallel execution of element operations: buckle. Only the solver will be executed in parallel for this analysis.
#: The job input file "eigen-multiweb.inp" has been submitted for analysis.
#: Job eigen-multiweb: Analysis Input File Processor completed successfully.
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.18488, 
    farPlane=10.793, width=6.95046, height=3.24885, cameraPosition=(5.16617, 
    4.82777, 4.77188), cameraTarget=(0.265063, -0.0733328, -0.129229))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.81104, 
    farPlane=10.2037, cameraPosition=(5.75645, 0.91773, 6.26803), 
    cameraUpVector=(-0.32304, 0.896272, -0.303877), cameraTarget=(0.265063, 
    -0.0733329, -0.129229))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.73398, 
    farPlane=10.2314, cameraPosition=(4.26842, -2.83031, 6.83286), 
    cameraUpVector=(-0.0175651, 0.999845, -0.00155804), cameraTarget=(0.261843, 
    -0.0814431, -0.128007))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.65687, 
    farPlane=10.2321, cameraPosition=(1.37969, -5.97887, 5.87359), 
    cameraUpVector=(0.305992, 0.887622, 0.344232), cameraTarget=(0.263981, 
    -0.0791124, -0.127297))
session.viewports['Viewport: 1'].view.setValues(nearPlane=6.25171, 
    farPlane=10.4702, cameraPosition=(-2.10575, -6.56875, 4.79811), 
    cameraUpVector=(0.453553, 0.693323, 0.559995), cameraTarget=(0.282342, 
    -0.0760051, -0.121632))
session.viewports['Viewport: 1'].view.setValues(nearPlane=5.87482, 
    farPlane=10.8781, cameraPosition=(-3.58126, -7.4118, 1.64614), 
    cameraUpVector=(0.307959, 0.421747, 0.852813), cameraTarget=(0.304933, 
    -0.0630973, -0.0733726))
session.viewports['Viewport: 1'].view.setValues(nearPlane=5.94206, 
    farPlane=10.8397, cameraPosition=(-3.10345, -7.5841, 1.89533), 
    cameraUpVector=(0.314052, 0.452838, 0.834452), cameraTarget=(0.298515, 
    -0.060783, -0.0767196))
session.viewports['Viewport: 1'].view.setValues(nearPlane=5.97676, 
    farPlane=10.7235, cameraPosition=(-3.32182, -6.87914, 3.44907), 
    cameraUpVector=(0.498643, 0.513606, 0.698257), cameraTarget=(0.301068, 
    -0.0690242, -0.0948833))
session.viewports['Viewport: 1'].view.setValues(nearPlane=5.75457, 
    farPlane=10.8114, cameraPosition=(-5.21002, -5.88546, 2.69337), 
    cameraUpVector=(0.518807, 0.362604, 0.774182), cameraTarget=(0.332463, 
    -0.0855462, -0.0823182))
session.viewports['Viewport: 1'].view.setValues(nearPlane=5.86076, 
    farPlane=10.6449, cameraPosition=(-5.13552, -5.15391, 3.97003), 
    cameraUpVector=(0.54887, 0.504955, 0.666155), cameraTarget=(0.33061, 
    -0.103738, -0.114066))
session.viewports['Viewport: 1'].view.setProjection(projection=PARALLEL)
#: Job eigen-multiweb: Abaqus/Standard completed successfully.
#: Job eigen-multiweb completed successfully. 
mdb.save()
#: The model database has been saved to "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae".
mdb.save()
#: The model database has been saved to "C:\Users\sbonnell\Desktop\lase\projects\ultimate-strength\eigen-buckling\abaqus\SP1-T2.cae".
