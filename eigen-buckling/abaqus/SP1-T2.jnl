from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='eigen-web-panel', objectToCopy=mdb.models['eigen-plate'])
del mdb.models['eigen-web-panel'].parts['Part-1']
del mdb.models['eigen-web-panel'].parts['panel']
mdb.models['eigen-web-panel'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
del mdb.models['eigen-web-panel'].rootAssembly.features['panel-1']
mdb.models['eigen-web-panel'].rootAssembly.deleteSets(setNames=(
    'Load-Follower', 'Load-Main'))
del mdb.models['eigen-web-panel'].constraints['End-Link']
del mdb.models['eigen-web-panel'].loads['Load-1']
mdb.models['eigen-web-panel'].boundaryConditions.delete(('Centre', 'Edge', 
    'End'))
mdb.models['eigen-web-panel'].ConstrainedSketch(name='__profile__', sheetSize=
    200.0)
del mdb.models['eigen-web-panel'].sketches['__profile__']
mdb.models['eigen-web-panel'].ConstrainedSketch(name='__profile__', sheetSize=
    4.0)
mdb.models['eigen-web-panel'].sketches['__profile__'].Line(point1=(-1.5, 0.0), 
    point2=(1.5, 0.0))
mdb.models['eigen-web-panel'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['eigen-web-panel'].sketches['__profile__'].geometry[2])
mdb.models['eigen-web-panel'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(0.0, 0.125))
mdb.models['eigen-web-panel'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['eigen-web-panel'].sketches['__profile__'].geometry[3])
mdb.models['eigen-web-panel'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['eigen-web-panel'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['eigen-web-panel'].sketches['__profile__'].geometry[3])
mdb.models['eigen-web-panel'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['eigen-web-panel'].sketches['__profile__'].vertices[2], entity2=
    mdb.models['eigen-web-panel'].sketches['__profile__'].geometry[2])
mdb.models['eigen-web-panel'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['eigen-web-panel'].sketches['__profile__'].vertices[0], entity2=
    mdb.models['eigen-web-panel'].sketches['__profile__'].vertices[1], 
    midpoint=mdb.models['eigen-web-panel'].sketches['__profile__'].vertices[2])
mdb.models['eigen-web-panel'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['eigen-web-panel'].parts['Part-1'].BaseShellExtrude(depth=3.0, 
    sketch=mdb.models['eigen-web-panel'].sketches['__profile__'])
del mdb.models['eigen-web-panel'].sketches['__profile__']
# Save by sbonnell on 2025_09_08-17.52.56; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-web-panel'].parts['Part-1'].setElementType(elemTypes=(
    ElemType(elemCode=S4R, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    hourglassControl=DEFAULT), ElemType(elemCode=S3, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['eigen-web-panel'].parts['Part-1'].faces.getSequenceFromMask((
    '[#7 ]', ), ), ))
mdb.models['eigen-web-panel'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['eigen-web-panel'].parts['Part-1'].edges.getSequenceFromMask((
    '[#7e ]', ), ), size=0.02)
mdb.models['eigen-web-panel'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['eigen-web-panel'].parts['Part-1'].edges.getSequenceFromMask((
    '[#381 ]', ), ), size=0.0216667)
mdb.models['eigen-web-panel'].parts['Part-1'].generateMesh()
# Save by sbonnell on 2025_09_08-17.54.31; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-web-panel'].parts['Part-1'].PartFromMesh(copySets=True, name=
    'panel')
mdb.models['eigen-web-panel'].rootAssembly.Instance(dependent=ON, name=
    'panel-1', part=mdb.models['eigen-web-panel'].parts['panel'])
mdb.models['eigen-web-panel'].rootAssembly.rotate(angle=90.0, axisDirection=(
    0.0, 1.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('panel-1', ))
mdb.models['eigen-web-panel'].rootAssembly.rotate(angle=90.0, axisDirection=(
    1.0, 0.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('panel-1', ))
mdb.models['eigen-web-panel'].rootAssembly.translate(instanceList=('panel-1', )
    , vector=(-1.5, 0.0, 0.0))
# Save by sbonnell on 2025_09_08-17.55.33; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-web-panel'].parts['panel'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    elements=mdb.models['eigen-web-panel'].parts['panel'].elements.getSequenceFromMask(
    mask=('[#ffffffff:703 #f ]', ), )), sectionName='plate', 
    thicknessAssignment=FROM_SECTION)
mdb.models['eigen-web-panel'].parts['panel'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    elements=mdb.models['eigen-web-panel'].parts['panel'].elements.getSequenceFromMask(
    mask=('[#0:703 #fffffff0 #ffffffff:27 #ff ]', ), )), sectionName='web', 
    thicknessAssignment=FROM_SECTION)
# Save by sbonnell on 2025_09_08-17.56.09; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-web-panel'].rootAssembly.regenerate()
mdb.models['eigen-web-panel'].rootAssembly.regenerate()
mdb.models['eigen-web-panel'].rootAssembly.Set(name='Load-Main', nodes=
    mdb.models['eigen-web-panel'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#4 ]', ), ))
mdb.models['eigen-web-panel'].rootAssembly.Set(name='Load-Follower', nodes=
    mdb.models['eigen-web-panel'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#2 #0:3 #e0000000 #ffffffff:2 #7f ]', ), ))
# Save by sbonnell on 2025_09_08-17.56.49; build 2020 2019_09_13-10.49.31 163176
# Save by sbonnell on 2025_09_08-17.56.54; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='riks-web-panel', objectToCopy=mdb.models['eigen-web-panel'])
mdb.models['riks-web-panel'].StaticRiksStep(initialArcInc=0.001, 
    maintainAttributes=True, maxArcInc=1e+36, maxNumInc=500, minArcInc=0.0007, 
    name='buckle', previous='Initial', totalArcLength=70.0)
mdb.models['riks-web-panel'].steps.changeKey(fromName='buckle', toName='riks')
mdb.models['eigen-web-panel'].ConcentratedForce(cf1=1000000.0, createStepName=
    'buckle', distributionType=UNIFORM, field='', localCsys=None, name='Load-1'
    , region=Region(
    nodes=mdb.models['eigen-web-panel'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:23 #100000 ]', ), )))
mdb.models['eigen-web-panel'].DisplacementBC(amplitude=UNSET, buckleCase=
    PERTURBATION_AND_BUCKLING, createStepName='buckle', distributionType=
    UNIFORM, fieldName='', fixed=OFF, localCsys=None, name='Edge', region=
    Region(
    nodes=mdb.models['eigen-web-panel'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#3f #0:3 #e0000000 #ffffffff:18 #7fff ]', ), )), u1=UNSET, u2=UNSET
    , u3=0.0, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['eigen-web-panel'].DisplacementBC(amplitude=UNSET, buckleCase=
    PERTURBATION_AND_BUCKLING, createStepName='buckle', distributionType=
    UNIFORM, fieldName='', fixed=OFF, localCsys=None, name='Centre', region=
    Region(
    nodes=mdb.models['eigen-web-panel'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:2 #40000 ]', ), )), u1=UNSET, u2=0.0, u3=UNSET, ur1=UNSET, ur2=
    UNSET, ur3=UNSET)
mdb.models['eigen-web-panel'].rootAssembly.Set(name='Web-Main', nodes=
    mdb.models['eigen-web-panel'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#2 ]', ), ))
mdb.models['eigen-web-panel'].rootAssembly.Set(name='Web-Follower', nodes=
    mdb.models['eigen-web-panel'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#c1 #0:22 #1ff8000 ]', ), ))
del mdb.models['riks-web-panel']
mdb.models['eigen-web-panel'].Equation(name='End', terms=((1.0, 
    'Load-Follower', 1), (-1.0, 'Load-Main', 1)))
mdb.models['eigen-web-panel'].rootAssembly.Set(name='Load-Follower', nodes=
    mdb.models['eigen-web-panel'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#22 #0:3 #e0000000 #ffffffff:2 #7f #0:13 #ffffffe0', 
    ' #ffffffff #7fff ]', ), ))
# Save by sbonnell on 2025_09_08-18.00.21; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-web-panel'].Equation(name='Web', terms=((1.0, 'Web-Follower', 
    2), (-1.0, 'Web-Main', 2)))
# Save by sbonnell on 2025_09_08-18.00.46; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-web-panel'].rootAssembly.Set(name='Fixed-Main', nodes=
    mdb.models['eigen-web-panel'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#8 ]', ), ))
mdb.models['eigen-web-panel'].rootAssembly.Set(name='Fixed-Follower', nodes=
    mdb.models['eigen-web-panel'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#1 #0:10 #f0000000 #ffffffff:2 #3f ]', ), ))
mdb.models['eigen-web-panel'].Equation(name='Fixed', terms=((1.0, 
    'Fixed-Follower', 1), (-1.0, 'Fixed-Main', 1)))
# Save by sbonnell on 2025_09_08-18.01.47; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-web-panel'].DisplacementBC(amplitude=UNSET, buckleCase=
    PERTURBATION_AND_BUCKLING, createStepName='buckle', distributionType=
    UNIFORM, fieldName='', fixed=OFF, localCsys=None, name='Fixed', region=
    Region(
    nodes=mdb.models['eigen-web-panel'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:23 #80000 ]', ), )), u1=0.0, u2=UNSET, u3=UNSET, ur1=UNSET, ur2=
    UNSET, ur3=UNSET)
# Save by sbonnell on 2025_09_08-18.02.12; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.jobs['SP1-T2-e']
del mdb.jobs['SP1-T2-r']
# Save by sbonnell on 2025_09_08-18.02.28; build 2020 2019_09_13-10.49.31 163176
# Save by sbonnell on 2025_09_08-18.03.07; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='eigen-web-panel', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='eigen-web-panel', nodalOutputPrecision=
    SINGLE, numCpus=4, numDomains=4, numGPUs=4, queue=None, resultsFormat=ODB, 
    scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['eigen-web-panel'].submit(consistencyChecking=OFF)
mdb.jobs['eigen-web-panel']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'BUCKLE OPTION IS NOT SUPPORTED FOR ELEMENT LOOP PARALLELIZATION. IF YOU HAVE SPECIFIED ELEMENT LOOP PARALLELIZATION, IT WILL BE TURNED OFF FOR THIS ANALYSIS.', 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\eigen-web-panel.odb', 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 16732, 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-web-panel', 'memory': 481.0})
mdb.jobs['eigen-web-panel']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MINIMUM_MEMORY, {'minimum_memory': 80.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-web-panel', 'memory': 498.0})
mdb.jobs['eigen-web-panel']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MINIMUM_MEMORY, {'minimum_memory': 80.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-web-panel'})
mdb.Model(name='riks-web-panel', objectToCopy=mdb.models['eigen-web-panel'])
mdb.jobs['eigen-web-panel']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'INCREASE THE NUMBER OF ITERATIONS TO GET THE REQUESTED NUMBER OF EIGENVALUES', 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'eigen-web-panel'})
mdb.models['riks-web-panel'].StaticRiksStep(initialArcInc=0.001, 
    maintainAttributes=True, maxArcInc=1e+36, maxNumInc=500, minArcInc=0.0007, 
    name='buckle', previous='Initial', totalArcLength=70.0)
mdb.models['riks-web-panel'].steps.changeKey(fromName='buckle', toName='riks')
mdb.models['riks-web-panel'].steps['riks'].setValues(nlgeom=ON)
# Save by sbonnell on 2025_09_08-18.05.22; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-web-panel'].steps['buckle'].setValues(maxIterations=300)
mdb.jobs['eigen-web-panel'].submit(consistencyChecking=OFF)
mdb.jobs['eigen-web-panel']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'BUCKLE OPTION IS NOT SUPPORTED FOR ELEMENT LOOP PARALLELIZATION. IF YOU HAVE SPECIFIED ELEMENT LOOP PARALLELIZATION, IT WILL BE TURNED OFF FOR THIS ANALYSIS.', 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\eigen-web-panel.odb', 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 6244, 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-web-panel', 'memory': 481.0})
mdb.jobs['eigen-web-panel']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MINIMUM_MEMORY, {'minimum_memory': 80.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-web-panel', 'memory': 498.0})
mdb.jobs['eigen-web-panel']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MINIMUM_MEMORY, {'minimum_memory': 80.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(STATUS, {'totalTime': 0.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 1, 
    'jobName': 'eigen-web-panel', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['eigen-web-panel']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(JOB_COMPLETED, {
    'time': 'Mon Sep  8 18:06:59 2025', 'jobName': 'eigen-web-panel'})
# Save by sbonnell on 2025_09_08-18.09.38; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['eigen-web-panel'].setValues(nodalOutputPrecision=FULL)
mdb.jobs['eigen-web-panel'].submit(consistencyChecking=OFF)
mdb.jobs['eigen-web-panel']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'BUCKLE OPTION IS NOT SUPPORTED FOR ELEMENT LOOP PARALLELIZATION. IF YOU HAVE SPECIFIED ELEMENT LOOP PARALLELIZATION, IT WILL BE TURNED OFF FOR THIS ANALYSIS.', 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\eigen-web-panel.odb', 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 5948, 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-web-panel', 'memory': 481.0})
mdb.jobs['eigen-web-panel']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MINIMUM_MEMORY, {'minimum_memory': 80.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-web-panel', 'memory': 498.0})
mdb.jobs['eigen-web-panel']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MINIMUM_MEMORY, {'minimum_memory': 80.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(STATUS, {'totalTime': 0.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 1, 
    'jobName': 'eigen-web-panel', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['eigen-web-panel']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(JOB_COMPLETED, {
    'time': 'Mon Sep  8 18:44:08 2025', 'jobName': 'eigen-web-panel'})
mdb.models['eigen-web-panel'].boundaryConditions['Centre'].setValues(
    buckleCase=PERTURBATION_AND_BUCKLING, region=Region(
    nodes=mdb.models['eigen-web-panel'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:175 #8 ]', ), )))
mdb.jobs['eigen-web-panel'].setValues(nodalOutputPrecision=SINGLE)
mdb.jobs['eigen-web-panel'].submit(consistencyChecking=OFF)
mdb.jobs['eigen-web-panel']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'BUCKLE OPTION IS NOT SUPPORTED FOR ELEMENT LOOP PARALLELIZATION. IF YOU HAVE SPECIFIED ELEMENT LOOP PARALLELIZATION, IT WILL BE TURNED OFF FOR THIS ANALYSIS.', 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\eigen-web-panel.odb', 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 18816, 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-web-panel', 'memory': 481.0})
mdb.jobs['eigen-web-panel']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MINIMUM_MEMORY, {'minimum_memory': 80.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-web-panel', 'memory': 498.0})
mdb.jobs['eigen-web-panel']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MINIMUM_MEMORY, {'minimum_memory': 80.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(STATUS, {'totalTime': 0.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 1, 
    'jobName': 'eigen-web-panel', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['eigen-web-panel']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(JOB_COMPLETED, {
    'time': 'Mon Sep  8 18:47:26 2025', 'jobName': 'eigen-web-panel'})
mdb.models['eigen-web-panel'].boundaryConditions['Fixed'].setValues(buckleCase=
    PERTURBATION_AND_BUCKLING, region=Region(
    nodes=mdb.models['eigen-web-panel'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#11 #0:13 #ffffffc0 #ffffffff #ffff #0:6 #80000 ]', ), )))
mdb.models['eigen-web-panel'].rootAssembly.Set(name='Fixed-Follower', nodes=
    mdb.models['eigen-web-panel'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#11 #0:10 #f0000000 #ffffffff:4 #ffff ]', ), ))
mdb.models['eigen-web-panel'].boundaryConditions['Fixed'].setValues(buckleCase=
    PERTURBATION_AND_BUCKLING, region=Region(
    nodes=mdb.models['eigen-web-panel'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:23 #80000 ]', ), )))
mdb.models['eigen-web-panel'].boundaryConditions['Centre'].setValues(
    buckleCase=PERTURBATION_AND_BUCKLING, region=Region(
    nodes=mdb.models['eigen-web-panel'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:2 #40000 ]', ), )))
# Save by sbonnell on 2025_09_08-18.49.15; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['eigen-web-panel'].submit(consistencyChecking=OFF)
mdb.jobs['eigen-web-panel']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'BUCKLE OPTION IS NOT SUPPORTED FOR ELEMENT LOOP PARALLELIZATION. IF YOU HAVE SPECIFIED ELEMENT LOOP PARALLELIZATION, IT WILL BE TURNED OFF FOR THIS ANALYSIS.', 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\eigen-web-panel.odb', 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 20736, 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-web-panel', 'memory': 478.0})
mdb.jobs['eigen-web-panel']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MINIMUM_MEMORY, {'minimum_memory': 80.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-web-panel', 'memory': 494.0})
mdb.jobs['eigen-web-panel']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MINIMUM_MEMORY, {'minimum_memory': 80.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(STATUS, {'totalTime': 0.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 1, 
    'jobName': 'eigen-web-panel', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['eigen-web-panel']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(JOB_COMPLETED, {
    'time': 'Mon Sep  8 18:50:18 2025', 'jobName': 'eigen-web-panel'})
mdb.models['riks-web-panel'].rootAssembly.Set(name='Fixed-Follower', nodes=
    mdb.models['riks-web-panel'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#11 #0:10 #f0000000 #ffffffff:4 #ffff ]', ), ))
# Save by sbonnell on 2025_09_08-18.55.43; build 2020 2019_09_13-10.49.31 163176
# Save by sbonnell on 2025_09_08-18.55.58; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='riks-web-panel', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='riks-web-panel', nodalOutputPrecision=
    SINGLE, numCpus=4, numDomains=4, numGPUs=4, queue=None, resultsFormat=ODB, 
    scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['riks-web-panel'].steps['riks'].setValues(maxNumInc=50)
# Save by sbonnell on 2025_09_08-19.17.03; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
mdb.models['eigen-web-panel'].parts['panel'].editNode(nodes=
    mdb.models['eigen-web-panel'].parts['panel'].nodes.getSequenceFromMask(
    mask=('[#0:23 #180000 ]', ), ), offset2=0.0132275)
mdb.models['eigen-web-panel'].parts['panel'].undoMeshEdit()
mdb.models['eigen-web-panel'].parts['panel'].editNode(coordinate2=0.00182, 
    nodes=
    mdb.models['eigen-web-panel'].parts['panel'].nodes.getSequenceFromMask(
    mask=('[#0:23 #180000 ]', ), ))
# Save by sbonnell on 2025_09_08-19.28.59; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
mdb.models['riks-web-panel'].parts['panel'].editNode(coordinate2=0.00182, 
    nodes=
    mdb.models['riks-web-panel'].parts['panel'].nodes.getSequenceFromMask(
    mask=('[#0:23 #180000 ]', ), ))
# Save by sbonnell on 2025_09_08-19.29.38; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-web-panel'].rootAssembly.regenerate()
# Save by sbonnell on 2025_09_08-19.30.09; build 2020 2019_09_13-10.49.31 163176
# Save by sbonnell on 2025_09_08-19.31.52; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['eigen-web-panel'].submit(consistencyChecking=OFF)
mdb.jobs['eigen-web-panel']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'BUCKLE OPTION IS NOT SUPPORTED FOR ELEMENT LOOP PARALLELIZATION. IF YOU HAVE SPECIFIED ELEMENT LOOP PARALLELIZATION, IT WILL BE TURNED OFF FOR THIS ANALYSIS.', 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\eigen-web-panel.odb', 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 22448, 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-web-panel', 'memory': 478.0})
mdb.jobs['eigen-web-panel']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MINIMUM_MEMORY, {'minimum_memory': 80.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-web-panel', 'memory': 494.0})
mdb.jobs['eigen-web-panel']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MINIMUM_MEMORY, {'minimum_memory': 80.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(STATUS, {'totalTime': 0.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 1, 
    'jobName': 'eigen-web-panel', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['eigen-web-panel']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(JOB_COMPLETED, {
    'time': 'Mon Sep  8 19:32:32 2025', 'jobName': 'eigen-web-panel'})
mdb.models['riks-web-panel'].rootAssembly.regenerate()
# Save by sbonnell on 2025_09_08-19.33.45; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-web-panel'].parts['panel'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    elements=mdb.models['eigen-web-panel'].parts['panel'].elements.getSequenceFromMask(
    mask=('[#0:703 #38e380 #0:26 #8e000000 #e3 ]', ), )), sectionName=
    'local-thickness', thicknessAssignment=FROM_SECTION)
# Save by sbonnell on 2025_09_08-19.34.56; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-web-panel'].rootAssembly.regenerate()
mdb.jobs['eigen-web-panel'].submit(consistencyChecking=OFF)
mdb.jobs['eigen-web-panel']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'BUCKLE OPTION IS NOT SUPPORTED FOR ELEMENT LOOP PARALLELIZATION. IF YOU HAVE SPECIFIED ELEMENT LOOP PARALLELIZATION, IT WILL BE TURNED OFF FOR THIS ANALYSIS.', 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\eigen-web-panel.odb', 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 15476, 
    'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-web-panel', 'memory': 478.0})
mdb.jobs['eigen-web-panel']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MINIMUM_MEMORY, {'minimum_memory': 80.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-web-panel', 'memory': 494.0})
mdb.jobs['eigen-web-panel']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(MINIMUM_MEMORY, {'minimum_memory': 80.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(STATUS, {'totalTime': 0.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 1, 
    'jobName': 'eigen-web-panel', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['eigen-web-panel']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-web-panel'})
mdb.jobs['eigen-web-panel']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-web-panel'})
mdb.models['riks-web-panel'].parts['panel'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    elements=mdb.models['riks-web-panel'].parts['panel'].elements.getSequenceFromMask(
    mask=('[#0:703 #38e380 #0:26 #8e000000 #e3 ]', ), )), sectionName=
    'local-thickness', thicknessAssignment=FROM_SECTION)
mdb.jobs['eigen-web-panel']._Message(JOB_COMPLETED, {
    'time': 'Mon Sep  8 19:36:00 2025', 'jobName': 'eigen-web-panel'})
# Save by sbonnell on 2025_09_08-19.36.02; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['riks-web-panel'].rootAssembly.regenerate()
mdb.Model(name='eigen-multiweb', objectToCopy=mdb.models['eigen-web-panel'])
del mdb.models['eigen-multiweb'].loads['Load-1']
mdb.models['eigen-multiweb'].boundaryConditions.delete(('Centre', 'Edge', 
    'Fixed'))
mdb.models['eigen-multiweb'].constraints.delete(('End', 'Fixed', 'Web'))
del mdb.models['eigen-multiweb'].parts['Part-1']
del mdb.models['eigen-multiweb'].parts['panel']
mdb.models['eigen-multiweb'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
del mdb.models['eigen-multiweb'].rootAssembly.features['panel-1']
mdb.models['eigen-multiweb'].rootAssembly.deleteSets(setNames=(
    'Fixed-Follower', 'Fixed-Main', 'Load-Follower', 'Load-Main', 
    'Web-Follower', 'Web-Main'))
mdb.models['eigen-multiweb'].ConstrainedSketch(name='__profile__', sheetSize=
    4.0)
mdb.models['eigen-multiweb'].sketches['__profile__'].Line(point1=(-1.5, 0.0), 
    point2=(1.5, 0.0))
mdb.models['eigen-multiweb'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['eigen-multiweb'].sketches['__profile__'].geometry[2])
mdb.models['eigen-multiweb'].sketches['__profile__'].Line(point1=(-0.9, 0.0), 
    point2=(-0.9, 0.125))
mdb.models['eigen-multiweb'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['eigen-multiweb'].sketches['__profile__'].geometry[3])
mdb.models['eigen-multiweb'].sketches['__profile__'].Line(point1=(-0.3, 0.0), 
    point2=(-0.3, 0.125))
mdb.models['eigen-multiweb'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['eigen-multiweb'].sketches['__profile__'].geometry[4])
mdb.models['eigen-multiweb'].sketches['__profile__'].Line(point1=(0.3, 0.0), 
    point2=(0.3, 0.125))
mdb.models['eigen-multiweb'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['eigen-multiweb'].sketches['__profile__'].geometry[5])
mdb.models['eigen-multiweb'].sketches['__profile__'].Line(point1=(0.9, 0.0), 
    point2=(0.9, 0.125))
mdb.models['eigen-multiweb'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['eigen-multiweb'].sketches['__profile__'].geometry[6])
mdb.models['eigen-multiweb'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['eigen-multiweb'].parts['Part-1'].BaseShellExtrude(depth=3.0, 
    sketch=mdb.models['eigen-multiweb'].sketches['__profile__'])
del mdb.models['eigen-multiweb'].sketches['__profile__']
mdb.models['eigen-multiweb'].parts['Part-1'].setElementType(elemTypes=(
    ElemType(elemCode=S4R, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    hourglassControl=DEFAULT), ElemType(elemCode=S3, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['eigen-multiweb'].parts['Part-1'].faces.getSequenceFromMask((
    '[#1ff ]', ), ), ))
mdb.models['eigen-multiweb'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['eigen-multiweb'].parts['Part-1'].edges.getSequenceFromMask((
    '[#fff08a1 ]', ), ), size=0.0216667)
mdb.models['eigen-multiweb'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['eigen-multiweb'].parts['Part-1'].edges.getSequenceFromMask((
    '[#f75e ]', ), ), size=0.02)
mdb.models['eigen-multiweb'].parts['Part-1'].generateMesh()
# Save by sbonnell on 2025_09_09-08.48.01; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-multiweb'].parts['Part-1'].PartFromMesh(copySets=True, name=
    'panel')
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
mdb.models['eigen-multiweb'].parts['panel'].editNode(coordinate2=0.0132275, 
    nodes=
    mdb.models['eigen-multiweb'].parts['panel'].nodes.getSequenceFromMask(
    mask=('[#0:37 #3000000 #0:4 #1800000 #0:4 #c00000 #0:4', ' #600000 ]', ), 
    ))
# Save by sbonnell on 2025_09_09-08.50.02; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-multiweb'].parts['panel'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    elements=mdb.models['eigen-multiweb'].parts['panel'].elements.getSequenceFromMask(
    mask=('[#ffffffff:703 #f ]', ), )), sectionName='plate', 
    thicknessAssignment=FROM_SECTION)
mdb.models['eigen-multiweb'].parts['panel'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    elements=mdb.models['eigen-multiweb'].parts['panel'].elements.getSequenceFromMask(
    mask=('[#0:703 #fffffff0 #ffffffff:111 #fffff ]', ), )), sectionName='web', 
    thicknessAssignment=FROM_SECTION)
mdb.models['eigen-multiweb'].sections['flange'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='M1', 
    nodalThicknessField='', numIntPts=5, preIntegrate=OFF, thickness=0.004, 
    thicknessField='', thicknessType=UNIFORM)
mdb.models['eigen-multiweb'].parts['panel'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    elements=mdb.models['eigen-multiweb'].parts['panel'].elements.getSequenceFromMask(
    mask=('[#0:703 #38e380 #0:26 #8e000000 #38e38e3 #0:26 #e0000000', 
    ' #38e38e38 #0:27 #8e38e38e #3 #0:26 #e38e0 ]', ), )), sectionName=
    'local-thickness', thicknessAssignment=FROM_SECTION)
# Save by sbonnell on 2025_09_09-08.52.44; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-multiweb'].rootAssembly.Instance(dependent=ON, name='panel-1'
    , part=mdb.models['eigen-multiweb'].parts['panel'])
mdb.models['eigen-multiweb'].rootAssembly.rotate(angle=90.0, axisDirection=(
    0.0, 1.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('panel-1', ))
mdb.models['eigen-multiweb'].rootAssembly.rotate(angle=90.0, axisDirection=(
    1.0, 0.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('panel-1', ))
mdb.models['eigen-multiweb'].rootAssembly.translate(instanceList=('panel-1', ), 
    vector=(-1.5, 0.0, 0.0))
# Save by sbonnell on 2025_09_09-08.56.59; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-multiweb'].rootAssembly.Set(name='Load-Main', nodes=
    mdb.models['eigen-multiweb'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#4 ]', ), ))
mdb.models['eigen-multiweb'].rootAssembly.Set(name='Load-Follower', nodes=
    mdb.models['eigen-multiweb'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#a62 #0:4 #fffffe00 #3f #0:10 #fffffc00 #7f', 
    ' #0:9 #ffffc000 #7ff #0:4 #1fffffff #0 #ff800000', ' #fffff ]', ), ))
# Save by sbonnell on 2025_09_09-08.57.38; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-multiweb'].rootAssembly.Set(name='Fixed-Main', nodes=
    mdb.models['eigen-multiweb'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#8 ]', ), ))
mdb.models['eigen-multiweb'].rootAssembly.Set(name='Fixed-Follower', nodes=
    mdb.models['eigen-multiweb'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#599 #0:9 #f8000000 #ffffffff #1fffff #0:9 #f0000000', 
    ' #1ffffff #0:10 #e0000000 #ffffffff #7fffff ]', ), ))
mdb.models['eigen-multiweb'].rootAssembly.Set(name='Fixed-Follower', nodes=
    mdb.models['eigen-multiweb'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#591 #0:9 #f8000000 #ffffffff #1fffff #0:9 #f0000000', 
    ' #1ffffff #0:10 #e0000000 #ffffffff #7fffff ]', ), ))
# Save by sbonnell on 2025_09_09-08.58.33; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-multiweb'].rootAssembly.sets.changeKey(fromName=
    'Load-Follower', toName='Edge-Follower')
mdb.models['eigen-multiweb'].rootAssembly.sets.changeKey(fromName='Load-Main', 
    toName='Edge-Main')
mdb.models['eigen-multiweb'].rootAssembly.Set(name='Load-Main', nodes=
    mdb.models['eigen-multiweb'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:47 #800000 ]', ), ))
mdb.models['eigen-multiweb'].rootAssembly.Set(name='Load-Follower', nodes=
    mdb.models['eigen-multiweb'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:37 #2000000 #0:4 #1000000 #0:9 #400000 ]', ), ))
# Save by sbonnell on 2025_09_09-08.59.27; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-multiweb'].rootAssembly.Set(name='Web1-Main', nodes=
    mdb.models['eigen-multiweb'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#2 ]', ), ))
mdb.models['eigen-multiweb'].rootAssembly.Set(name='Web2-Main', nodes=
    mdb.models['eigen-multiweb'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#20 ]', ), ))
mdb.models['eigen-multiweb'].rootAssembly.Set(name='Web3-Main', nodes=
    mdb.models['eigen-multiweb'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#800 ]', ), ))
mdb.models['eigen-multiweb'].rootAssembly.Set(name='Web4-Main', nodes=
    mdb.models['eigen-multiweb'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#40 ]', ), ))
mdb.models['eigen-multiweb'].rootAssembly.Set(name='Web1-Follower', nodes=
    mdb.models['eigen-multiweb'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#30001 #0:46 #ffc0000 ]', ), ))
mdb.models['eigen-multiweb'].rootAssembly.Set(name='Web2-Follower', nodes=
    mdb.models['eigen-multiweb'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#c010 #0:41 #1ff80000 ]', ), ))
mdb.models['eigen-multiweb'].rootAssembly.Set(name='Web3-Follower', nodes=
    mdb.models['eigen-multiweb'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#c0400 #0:51 #7fe0000 ]', ), ))
mdb.models['eigen-multiweb'].rootAssembly.Set(name='Web4-Follower', nodes=
    mdb.models['eigen-multiweb'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#3080 #0:36 #3ff00000 ]', ), ))
# Save by sbonnell on 2025_09_09-09.01.56; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-multiweb'].Equation(name='Web1', terms=((1.0, 
    'Web1-Follower', 2), (-1.0, 'Web1-Main', 2)))
mdb.models['eigen-multiweb'].Equation(name='Web2', terms=((1.0, 
    'Web2-Follower', 2), (-1.0, 'Web2-Main', 2)))
mdb.models['eigen-multiweb'].Equation(name='Web3', terms=((1.0, 
    'Web3-Follower', 2), (-1.0, 'Web3-Main', 2)))
mdb.models['eigen-multiweb'].Equation(name='Web4', terms=((1.0, 
    'Web4-Follower', 2), (-1.0, 'Web4-Main', 2)))
mdb.models['eigen-multiweb'].Equation(name='Free-Edge', terms=((1.0, 
    'Edge-Follower', 1), (-1.0, 'Edge-Main', 1)))
mdb.models['eigen-multiweb'].Equation(name='Edge-Fixed', terms=((1.0, 
    'Fixed-Follower', 1), (-1.0, 'Fixed-Main', 1)))
mdb.models['eigen-multiweb'].constraints.changeKey(fromName='Edge-Fixed', 
    toName='Fixed-Edge')
# Save by sbonnell on 2025_09_09-09.04.08; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-multiweb'].Equation(name='Constraint-7', terms=((1.0, 
    'Load-Follower', 1), (-1.0, 'Load-Main', 1)))
mdb.models['eigen-multiweb'].constraints.changeKey(fromName='Constraint-7', 
    toName='Load')
mdb.models['eigen-multiweb'].ConcentratedForce(cf1=250000.0, createStepName=
    'buckle', distributionType=UNIFORM, field='', localCsys=None, name='Load-1'
    , region=Region(
    nodes=mdb.models['eigen-multiweb'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:37 #2000000 #0:4 #1000000 #0:9 #400000 #0:13', ' #1000000 ]', ), 
    )))
mdb.models['eigen-multiweb'].loads['Load-1'].setValues(distributionType=UNIFORM
    , field='', region=Region(
    nodes=mdb.models['eigen-multiweb'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:37 #2000000 #0:4 #1000000 #0:4 #800000 #0:4', ' #400000 ]', ), 
    )))
# Save by sbonnell on 2025_09_09-09.05.53; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-multiweb'].DisplacementBC(amplitude=UNSET, buckleCase=
    PERTURBATION_AND_BUCKLING, createStepName='buckle', distributionType=
    UNIFORM, fieldName='', fixed=OFF, localCsys=None, name='Edge', region=
    Region(
    nodes=mdb.models['eigen-multiweb'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#fff #0:4 #fffffe00 #ffffffff:6 #1fffff #0:4 #fffffc00', 
    ' #7f #0:3 #f0000000 #ffffffff:6 #7ff #0:4 #ffffffff:3', ' #fffff ]', ), ))
    , u1=UNSET, u2=UNSET, u3=0.0, ur1=UNSET, ur2=UNSET, ur3=UNSET)
# Save by sbonnell on 2025_09_09-09.06.38; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-multiweb'].DisplacementBC(amplitude=UNSET, buckleCase=
    PERTURBATION_AND_BUCKLING, createStepName='buckle', distributionType=
    UNIFORM, fieldName='', fixed=OFF, localCsys=None, name='Centre', region=
    Region(
    nodes=mdb.models['eigen-multiweb'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:530 #8 ]', ), )), u1=UNSET, u2=0.0, u3=UNSET, ur1=UNSET, ur2=
    UNSET, ur3=UNSET)
mdb.models['eigen-multiweb'].DisplacementBC(amplitude=UNSET, buckleCase=
    PERTURBATION_AND_BUCKLING, createStepName='buckle', distributionType=
    UNIFORM, fieldName='', fixed=OFF, localCsys=None, name='End', region=
    Region(
    nodes=mdb.models['eigen-multiweb'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:37 #1000000 #0:4 #800000 #0:4 #400000 #0:4', ' #200000 ]', ), ))
    , u1=0.0, u2=UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
# Save by sbonnell on 2025_09_09-09.07.19; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='riks-multiweb', objectToCopy=mdb.models['eigen-multiweb'])
mdb.models['riks-multiweb'].StaticRiksStep(initialArcInc=0.001, 
    maintainAttributes=True, maxArcInc=1e+36, maxNumInc=50, minArcInc=0.0007, 
    name='buckle', previous='Initial', totalArcLength=70.0)
mdb.models['riks-multiweb'].steps.changeKey(fromName='buckle', toName='riks')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='eigen-multiweb', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='eigen-multiweb', nodalOutputPrecision=
    SINGLE, numCpus=4, numDomains=4, numGPUs=4, queue=None, resultsFormat=ODB, 
    scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['eigen-multiweb'].submit(consistencyChecking=OFF)
mdb.jobs['eigen-multiweb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'BUCKLE OPTION IS NOT SUPPORTED FOR ELEMENT LOOP PARALLELIZATION. IF YOU HAVE SPECIFIED ELEMENT LOOP PARALLELIZATION, IT WILL BE TURNED OFF FOR THIS ANALYSIS.', 
    'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\eigen-multiweb.odb', 
    'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 17996, 
    'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-multiweb', 'memory': 530.0})
mdb.jobs['eigen-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 87.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-multiweb', 'memory': 548.0})
mdb.jobs['eigen-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 87.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(STATUS, {'totalTime': 0.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 1, 
    'jobName': 'eigen-multiweb', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['eigen-multiweb']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(JOB_COMPLETED, {
    'time': 'Tue Sep  9 09:11:16 2025', 'jobName': 'eigen-multiweb'})
# Save by sbonnell on 2025_09_09-09.13.21; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='riks-multiweb', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='riks-multiweb', nodalOutputPrecision=
    SINGLE, numCpus=4, numDomains=4, numGPUs=4, queue=None, resultsFormat=ODB, 
    scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
mdb.models['eigen-multiweb'].parts['panel'].editNode(nodes=
    mdb.models['eigen-multiweb'].parts['panel'].nodes.getSequenceFromMask(
    mask=('[#0:37 #3000000 #0:4 #1800000 #0:4 #c00000 #0:4', ' #600000 ]', ), )
    , offset2=-0.002)
mdb.models['riks-multiweb'].parts['panel'].editNode(nodes=
    mdb.models['riks-multiweb'].parts['panel'].nodes.getSequenceFromMask(mask=(
    '[#0:37 #3000000 #0:4 #1800000 #0:4 #c00000 #0:4', ' #600000 ]', ), ), 
    offset2=-0.002)
# Save by sbonnell on 2025_09_09-09.22.42; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['riks-multiweb'].rootAssembly.regenerate()
mdb.models['eigen-multiweb'].rootAssembly.regenerate()
mdb.models['eigen-multiweb'].rootAssembly.regenerate()
mdb.models['riks-multiweb'].rootAssembly.regenerate()
mdb.models['eigen-multiweb'].rootAssembly.regenerate()
mdb.jobs['eigen-multiweb'].submit(consistencyChecking=OFF)
mdb.jobs['eigen-multiweb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'BUCKLE OPTION IS NOT SUPPORTED FOR ELEMENT LOOP PARALLELIZATION. IF YOU HAVE SPECIFIED ELEMENT LOOP PARALLELIZATION, IT WILL BE TURNED OFF FOR THIS ANALYSIS.', 
    'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\eigen-multiweb.odb', 
    'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 9760, 
    'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-multiweb', 'memory': 530.0})
mdb.jobs['eigen-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 87.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-multiweb', 'memory': 548.0})
mdb.jobs['eigen-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 87.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(STATUS, {'totalTime': 0.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 1, 
    'jobName': 'eigen-multiweb', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['eigen-multiweb']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(JOB_COMPLETED, {
    'time': 'Tue Sep  9 09:24:50 2025', 'jobName': 'eigen-multiweb'})
mdb.models['riks-multiweb'].steps['riks'].setValues(initialArcInc=0.0001, 
    maxArcInc=1e+36, minArcInc=1e-06, totalArcLength=50.0)
mdb.models['riks-multiweb'].steps['riks'].setValues(nlgeom=ON)
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
mdb.models['eigen-multiweb'].parts['panel'].editNode(nodes=
    mdb.models['eigen-multiweb'].parts['panel'].nodes.getSequenceFromMask(
    mask=('[#0:37 #3000000 #0:4 #1800000 #0:4 #c00000 #0:4', ' #600000 ]', ), )
    , offset2=0.002)
# Save by sbonnell on 2025_09_09-09.46.40; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
mdb.models['riks-multiweb'].parts['panel'].editNode(nodes=
    mdb.models['riks-multiweb'].parts['panel'].nodes.getSequenceFromMask(mask=(
    '[#0:37 #3000000 #0:4 #1800000 #0:4 #c00000 #0:4', ' #600000 ]', ), ), 
    offset2=0.002)
# Save by sbonnell on 2025_09_09-09.47.24; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['riks-multiweb'].rootAssembly.regenerate()
mdb.models['eigen-multiweb'].rootAssembly.regenerate()
mdb.models['eigen-multiweb'].rootAssembly.regenerate()
mdb.models['riks-multiweb'].rootAssembly.regenerate()
mdb.jobs['eigen-multiweb'].submit(consistencyChecking=OFF)
mdb.jobs['eigen-multiweb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'BUCKLE OPTION IS NOT SUPPORTED FOR ELEMENT LOOP PARALLELIZATION. IF YOU HAVE SPECIFIED ELEMENT LOOP PARALLELIZATION, IT WILL BE TURNED OFF FOR THIS ANALYSIS.', 
    'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\eigen-multiweb.odb', 
    'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 22448, 
    'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-multiweb', 'memory': 530.0})
mdb.jobs['eigen-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 87.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-multiweb', 'memory': 548.0})
mdb.jobs['eigen-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 87.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(STATUS, {'totalTime': 0.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 1, 
    'jobName': 'eigen-multiweb', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['eigen-multiweb']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(JOB_COMPLETED, {
    'time': 'Tue Sep  9 09:48:44 2025', 'jobName': 'eigen-multiweb'})
# Save by sbonnell on 2025_09_09-09.51.33; build 2020 2019_09_13-10.49.31 163176
# Save by sbonnell on 2025_09_09-09.51.35; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['eigen-multiweb'].submit(consistencyChecking=OFF)
mdb.jobs['eigen-multiweb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'BUCKLE OPTION IS NOT SUPPORTED FOR ELEMENT LOOP PARALLELIZATION. IF YOU HAVE SPECIFIED ELEMENT LOOP PARALLELIZATION, IT WILL BE TURNED OFF FOR THIS ANALYSIS.', 
    'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\eigen-multiweb.odb', 
    'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 12504, 
    'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-multiweb', 'memory': 530.0})
mdb.jobs['eigen-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 87.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-multiweb', 'memory': 548.0})
mdb.jobs['eigen-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 87.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(STATUS, {'totalTime': 0.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 1, 
    'jobName': 'eigen-multiweb', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['eigen-multiweb']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(JOB_COMPLETED, {
    'time': 'Tue Sep  9 09:57:18 2025', 'jobName': 'eigen-multiweb'})
del mdb.jobs['riks-web-panel']
del mdb.jobs['eigen-web-panel']
# Save by sbonnell on 2025_09_09-09.57.42; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['riks-multiweb'].steps['riks'].setValues(initialArcInc=1e-08, 
    maxArcInc=1e+36, minArcInc=1e-10, totalArcLength=30.0)
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
mdb.models['eigen-multiweb'].parts['panel'].editNode(nodes=
    mdb.models['eigen-multiweb'].parts['panel'].nodes.getSequenceFromMask(
    mask=('[#0:37 #3000000 #0:4 #1800000 #0:4 #c00000 #0:4', ' #600000 ]', ), )
    , offset2=-0.002)
# Save by sbonnell on 2025_09_09-11.03.22; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-multiweb'].rootAssembly.regenerate()
mdb.models['eigen-multiweb'].rootAssembly.regenerate()
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
mdb.models['riks-multiweb'].parts['panel'].editNode(nodes=
    mdb.models['riks-multiweb'].parts['panel'].nodes.getSequenceFromMask(mask=(
    '[#0:37 #3000000 #0:4 #1800000 #0:4 #c00000 #0:4', ' #600000 ]', ), ), 
    offset2=-0.002)
# Save by sbonnell on 2025_09_09-11.04.12; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['riks-multiweb'].rootAssembly.regenerate()
mdb.models['riks-multiweb'].rootAssembly.regenerate()
# Save by sbonnell on 2025_09_09-11.04.19; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['eigen-multiweb'].submit(consistencyChecking=OFF)
mdb.jobs['eigen-multiweb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'BUCKLE OPTION IS NOT SUPPORTED FOR ELEMENT LOOP PARALLELIZATION. IF YOU HAVE SPECIFIED ELEMENT LOOP PARALLELIZATION, IT WILL BE TURNED OFF FOR THIS ANALYSIS.', 
    'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\eigen-multiweb.odb', 
    'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 7340, 
    'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-multiweb', 'memory': 530.0})
mdb.jobs['eigen-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 87.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-multiweb', 'memory': 548.0})
mdb.jobs['eigen-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 87.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(STATUS, {'totalTime': 0.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 1, 
    'jobName': 'eigen-multiweb', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['eigen-multiweb']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(JOB_COMPLETED, {
    'time': 'Tue Sep  9 11:05:40 2025', 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb'].submit(consistencyChecking=OFF)
mdb.jobs['eigen-multiweb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'BUCKLE OPTION IS NOT SUPPORTED FOR ELEMENT LOOP PARALLELIZATION. IF YOU HAVE SPECIFIED ELEMENT LOOP PARALLELIZATION, IT WILL BE TURNED OFF FOR THIS ANALYSIS.', 
    'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\eigen-multiweb.odb', 
    'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 14932, 
    'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-multiweb', 'memory': 530.0})
mdb.jobs['eigen-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 87.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-multiweb', 'memory': 548.0})
mdb.jobs['eigen-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 87.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(STATUS, {'totalTime': 0.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 1, 
    'jobName': 'eigen-multiweb', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['eigen-multiweb']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(JOB_COMPLETED, {
    'time': 'Tue Sep  9 11:24:36 2025', 'jobName': 'eigen-multiweb'})
mdb.models['riks-multiweb'].steps['riks'].setValues(initialArcInc=0.0001)
mdb.models['riks-multiweb'].loads['Load-1'].setValues(cf1=1000000.0, 
    distributionType=UNIFORM, field='', region=Region(
    nodes=mdb.models['riks-multiweb'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:37 #2000000 ]', ), )))
# Save by sbonnell on 2025_09_09-11.33.19; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['riks-multiweb'].constraints['Web1'].suppress()
mdb.models['riks-multiweb'].constraints['Web2'].suppress()
mdb.models['riks-multiweb'].constraints['Web3'].suppress()
mdb.models['riks-multiweb'].constraints['Web4'].suppress()
# Save by sbonnell on 2025_09_09-11.35.44; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['riks-multiweb'].boundaryConditions['End'].suppress()
mdb.models['riks-multiweb'].boundaryConditions['Centre'].setValues(u1=0.0, ur1=
    0.0, ur2=0.0, ur3=0.0)
mdb.models['riks-multiweb'].boundaryConditions['Centre'].setValues(u3=0.0)
mdb.models['riks-multiweb'].boundaryConditions['Edge'].suppress()
# Save by sbonnell on 2025_09_09-11.44.39; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['riks-multiweb'].boundaryConditions['Edge'].resume()
mdb.models['riks-multiweb'].boundaryConditions['End'].resume()
mdb.models['riks-multiweb'].boundaryConditions['Centre'].setValues(u1=UNSET, 
    u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['riks-multiweb'].constraints['Web1'].resume()
mdb.models['riks-multiweb'].constraints['Web2'].resume()
mdb.models['riks-multiweb'].constraints['Web3'].resume()
mdb.models['riks-multiweb'].constraints['Web4'].resume()
# Save by sbonnell on 2025_09_09-11.51.07; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['riks-multiweb'].submit(consistencyChecking=OFF)
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\riks-multiweb.odb', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 7444, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'riks-multiweb', 'memory': 517.0})
mdb.jobs['riks-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 84.0, 
    'phase': STANDARD_PHASE, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 1U', 
    'incrementLPF': 3.33333060221012e-06, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 6})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 2U', 
    'incrementLPF': 8.33332471162529e-07, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 6})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 3U', 
    'incrementLPF': 5.20830312444362e-08, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 7})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 4U', 
    'incrementLPF': 1.03184760155758e-08, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 7})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 5U', 
    'incrementLPF': 1.01769655639991e-08, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'riks-multiweb'})
mdb.models['riks-multiweb'].boundaryConditions['Centre'].setValues(u1=0.0)
mdb.jobs['riks-multiweb'].submit(consistencyChecking=OFF)
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\riks-multiweb.odb', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 16488, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'riks-multiweb', 'memory': 517.0})
mdb.jobs['riks-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 84.0, 
    'phase': STANDARD_PHASE, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 1U', 
    'incrementLPF': 3.3333303155293e-06, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 6})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 2U', 
    'incrementLPF': 8.33332421267448e-07, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 3U', 
    'incrementLPF': 5.20768032624892e-08, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 4U', 
    'incrementLPF': 1.00362491218467e-08, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 5U', 
    'incrementLPF': 1.0028235831369e-08, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'riks-multiweb'})
mdb.models['riks-multiweb'].constraints['Web1'].suppress()
mdb.models['riks-multiweb'].constraints['Web2'].suppress()
mdb.models['riks-multiweb'].constraints['Web3'].suppress()
mdb.models['riks-multiweb'].constraints['Web4'].suppress()
# Save by sbonnell on 2025_09_09-11.54.32; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['riks-multiweb'].submit(consistencyChecking=OFF)
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\riks-multiweb.odb', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 1780, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'riks-multiweb', 'memory': 521.0})
mdb.jobs['riks-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 84.0, 
    'phase': STANDARD_PHASE, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 1U', 
    'incrementLPF': 3.33333029957612e-06, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 6})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 2U', 
    'incrementLPF': 8.33332074999305e-07, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 6})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 3U', 
    'incrementLPF': 5.20809124351191e-08, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 7})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 4U', 
    'incrementLPF': 1.00375335066986e-08, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 5U', 
    'incrementLPF': 1.00272996972246e-08, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'riks-multiweb'})
mdb.models['riks-multiweb'].constraints['Fixed-Edge'].suppress()
mdb.models['riks-multiweb'].constraints['Free-Edge'].suppress()
mdb.models['riks-multiweb'].constraints['Load'].suppress()
# Save by sbonnell on 2025_09_09-11.56.50; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['riks-multiweb'].submit(consistencyChecking=OFF)
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\riks-multiweb.odb', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 21276, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'riks-multiweb', 'memory': 517.0})
mdb.jobs['riks-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 83.0, 
    'phase': STANDARD_PHASE, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 1U', 
    'incrementLPF': 3.33333193550141e-06, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 2U', 
    'incrementLPF': 8.33329900080469e-07, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 3U', 
    'incrementLPF': 5.2060208413406e-08, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 6})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 4U', 
    'incrementLPF': 1.00618686431992e-08, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 6})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 5U', 
    'incrementLPF': 1.00562744418308e-08, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 6})
mdb.jobs['riks-multiweb']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'riks-multiweb'})
mdb.models['riks-multiweb'].boundaryConditions['Centre'].setValues(u1=UNSET)
# Save by sbonnell on 2025_09_09-11.57.54; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['riks-multiweb'].submit(consistencyChecking=OFF)
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\riks-multiweb.odb', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 12916, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'riks-multiweb', 'memory': 517.0})
mdb.jobs['riks-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 83.0, 
    'phase': STANDARD_PHASE, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 1U', 
    'incrementLPF': 3.3333322566049e-06, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 6})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 2U', 
    'incrementLPF': 8.33332509463674e-07, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 8})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 3U', 
    'incrementLPF': 5.20758169548533e-08, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 5})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 4U', 
    'incrementLPF': 1e-08, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 5U', 
    'incrementLPF': 1e-08, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'riks-multiweb'})
mdb.models['riks-multiweb'].ConcentratedForce(cf3=-10000.0, createStepName=
    'riks', distributionType=UNIFORM, field='', localCsys=None, name='Load-2', 
    region=Region(
    nodes=mdb.models['riks-multiweb'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:530 #8 ]', ), )))
mdb.models['riks-multiweb'].loads['Load-1'].suppress()
mdb.jobs['riks-multiweb'].submit(consistencyChecking=OFF)
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\riks-multiweb.odb', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 11268, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'riks-multiweb', 'memory': 517.0})
mdb.jobs['riks-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 83.0, 
    'phase': STANDARD_PHASE, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 1U', 
    'incrementLPF': 3.33332273683529e-06, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 6})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 2U', 
    'incrementLPF': 8.33271116713874e-07, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 6})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 3U', 
    'incrementLPF': 5.11285948867239e-08, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 7})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 4U', 
    'incrementLPF': 1e-08, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 6})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 5U', 
    'incrementLPF': 1e-08, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 6})
mdb.jobs['riks-multiweb']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'riks-multiweb'})
mdb.models['riks-multiweb'].steps['riks'].setValues(nlgeom=OFF)
mdb.jobs['riks-multiweb'].submit(consistencyChecking=OFF)
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE NLGEOM FLAG SHOULD BE ACTIVATED FOR THE RIKS STEP. OTHERWISE, THE GEOMETRIC NONLINEARITY WILL NOT BE CONSIDERED.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\riks-multiweb.odb', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 5916, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'riks-multiweb', 'memory': 517.0})
mdb.jobs['riks-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 83.0, 
    'phase': STANDARD_PHASE, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 3.33333333333333e-06, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 3.33333333333333e-06, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 3.33333333333333e-06, 'increment': 2, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 6.66666666666666e-06, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 4.99999999999999e-06, 'increment': 3, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.16666666666666e-05, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 7.49999999999999e-06, 'increment': 4, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.91666666666666e-05, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.12500000000001e-05, 'increment': 5, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 3.04166666666667e-05, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.68749999999999e-05, 'increment': 6, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 4.72916666666667e-05, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 2.53125e-05, 'increment': 7, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 7.26041666666666e-05, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 3.79687499999994e-05, 'increment': 8, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000110572916666666, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 5.6953125e-05, 'increment': 9, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000167526041666666, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 8.54296874999999e-05, 'increment': 10, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000252955729166666, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000128144531250001, 'increment': 11, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000381100260416666, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 11, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000192216796875, 'increment': 12, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000573317057291666, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 12, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0002883251953125, 'increment': 13, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000861642252604166, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 13, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000432487792968751, 'increment': 14, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00129413004557292, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 14, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000648731689453125, 'increment': 15, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00194286173502604, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 15, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000973097534179681, 'increment': 16, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00291595926920572, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 16, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00145964630126953, 'increment': 17, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00437560557047525, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 17, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00218946945190431, 'increment': 18, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00656507502237956, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 18, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00328420417785644, 'increment': 19, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.009849279200236, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 19, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00492630626678466, 'increment': 20, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0147755854670207, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 20, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00738945940017694, 'increment': 21, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0221650448671976, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 21, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0110841891002655, 'increment': 22, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0332492339674631, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 22, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0166262836503983, 'increment': 23, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0498755176178614, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 23, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0249394254755974, 'increment': 24, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0748149430934588, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 24, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.037409138213396, 'increment': 25, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.112224081306855, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 25, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0561137073200935, 'increment': 26, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.168337788626948, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 26, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0841705609801406, 'increment': 27, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.252508349607089, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 27, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.126255841470211, 'increment': 28, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.3787641910773, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 28, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.189383762205318, 'increment': 29, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.568147953282618, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 29, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.284075643307975, 'increment': 30, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.852223596590594, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 30, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.426113464961963, 'increment': 31, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.27833706155256, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 31, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.639170197442947, 'increment': 32, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.9175072589955, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 32, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.958755296164417, 'increment': 33, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 2.87626255515992, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 33, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.43813294424663, 'increment': 34, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 4.31439549940656, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 34, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 2.15719941636995, 'increment': 35, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 6.4715949157765, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 35, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 3.2357991245549, 'increment': 36, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 9.7073940403314, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 36, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 4.85369868683236, 'increment': 37, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 14.5610927271638, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 37, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 7.28054803024853, 'increment': 38, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 21.8416407574123, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 38, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 10.9208220453728, 'increment': 39, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 32.7624628027851, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 39, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 16.3812330680593, 'increment': 40, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 49.1436958708443, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 40, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 24.5718496020888, 'increment': 41, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 73.7155454729331, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 41, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 36.8577744031333, 'increment': 42, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 110.573319876066, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 42, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 55.2866616047001, 'increment': 43, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 165.859981480767, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 43, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 82.9299924070498, 'increment': 44, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 248.789973887816, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 44, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 124.394988610575, 'increment': 45, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 373.184962498391, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 45, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 186.592482915863, 'increment': 46, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 559.777445414254, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 46, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 279.888724373794, 'increment': 47, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 839.666169788048, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 47, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 419.833086560691, 'increment': 48, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1259.49925634874, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 48, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 629.749629841033, 'increment': 49, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1889.24888618977, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 49, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 944.624444761552, 'increment': 50, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 2833.87333095132, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 50, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(JOB_COMPLETED, {
    'time': 'Tue Sep  9 12:01:41 2025', 'jobName': 'riks-multiweb'})
mdb.models['riks-multiweb'].constraints['Fixed-Edge'].resume()
mdb.models['riks-multiweb'].constraints['Free-Edge'].resume()
mdb.models['riks-multiweb'].constraints['Load'].resume()
mdb.models['riks-multiweb'].constraints['Web1'].resume()
mdb.models['riks-multiweb'].constraints['Web2'].resume()
mdb.models['riks-multiweb'].constraints['Web3'].resume()
mdb.models['riks-multiweb'].constraints['Web4'].resume()
del mdb.models['riks-multiweb'].loads['Load-2']
mdb.models['riks-multiweb'].loads['Load-1'].suppress()
mdb.models['riks-multiweb'].loads['Load-1'].resume()
# Save by sbonnell on 2025_09_09-12.02.19; build 2020 2019_09_13-10.49.31 163176
# Save by sbonnell on 2025_09_09-12.02.21; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['riks-multiweb'].submit(consistencyChecking=OFF)
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE NLGEOM FLAG SHOULD BE ACTIVATED FOR THE RIKS STEP. OTHERWISE, THE GEOMETRIC NONLINEARITY WILL NOT BE CONSIDERED.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\riks-multiweb.odb', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 15720, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'riks-multiweb', 'memory': 517.0})
mdb.jobs['riks-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 84.0, 
    'phase': STANDARD_PHASE, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 3.33333333333334e-06, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 3.33333333333334e-06, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 3.33333333333334e-06, 'increment': 2, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 6.66666666666668e-06, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 5e-06, 'increment': 3, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.16666666666667e-05, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 7.50000000000003e-06, 'increment': 4, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.91666666666667e-05, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.12500000000001e-05, 'increment': 5, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 3.04166666666668e-05, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.68750000000001e-05, 'increment': 6, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 4.72916666666668e-05, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 2.53125e-05, 'increment': 7, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 7.26041666666669e-05, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 3.79687500000002e-05, 'increment': 8, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000110572916666667, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 5.69531249999999e-05, 'increment': 9, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000167526041666667, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 8.54296875000008e-05, 'increment': 10, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000252955729166668, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00012814453125, 'increment': 11, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000381100260416668, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 11, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000192216796875, 'increment': 12, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000573317057291668, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 12, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000288325195312501, 'increment': 13, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000861642252604168, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 13, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00043248779296875, 'increment': 14, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00129413004557292, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 14, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000648731689453125, 'increment': 15, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00194286173502604, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 15, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000973097534179685, 'increment': 16, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00291595926920573, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 16, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00145964630126953, 'increment': 17, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00437560557047526, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 17, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00218946945190431, 'increment': 18, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00656507502237956, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 18, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00328420417785645, 'increment': 19, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00984927920023601, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 19, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00492630626678467, 'increment': 20, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0147755854670207, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 20, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00738945940017705, 'increment': 21, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0221650448671977, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 21, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0110841891002655, 'increment': 22, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0332492339674632, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 22, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0166262836503981, 'increment': 23, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0498755176178613, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 23, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0249394254755974, 'increment': 24, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0748149430934587, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 24, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0374091382133961, 'increment': 25, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.112224081306855, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 25, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0561137073200943, 'increment': 26, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.168337788626949, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 26, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0841705609801415, 'increment': 27, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.252508349607091, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 27, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.126255841470212, 'increment': 28, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.378764191077302, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 28, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.189383762205318, 'increment': 29, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.56814795328262, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 29, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.284075643307976, 'increment': 30, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.852223596590596, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 30, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.426113464961966, 'increment': 31, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.27833706155256, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 31, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.639170197442951, 'increment': 32, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.91750725899551, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 32, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.958755296164422, 'increment': 33, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 2.87626255515994, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 33, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.43813294424664, 'increment': 34, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 4.31439549940658, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 34, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 2.15719941636996, 'increment': 35, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 6.47159491577654, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 35, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 3.23579912455494, 'increment': 36, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 9.70739404033147, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 36, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 4.8536986868324, 'increment': 37, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 14.5610927271639, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 37, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 7.28054803024859, 'increment': 38, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 21.8416407574125, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 38, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 10.9208220453729, 'increment': 39, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 32.7624628027854, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 39, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 16.3812330680593, 'increment': 40, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 49.1436958708447, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 40, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 24.5718496020889, 'increment': 41, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 73.7155454729337, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 41, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 36.8577744031334, 'increment': 42, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 110.573319876067, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 42, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 55.2866616047002, 'increment': 43, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 165.859981480767, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 43, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 82.9299924070505, 'increment': 44, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 248.789973887818, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 44, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 124.394988610576, 'increment': 45, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 373.184962498393, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 45, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 186.592482915864, 'increment': 46, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 559.777445414258, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 46, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 279.888724373795, 'increment': 47, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 839.666169788053, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 47, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 419.833086560692, 'increment': 48, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1259.49925634874, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 48, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 629.749629841042, 'increment': 49, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1889.24888618979, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 49, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 944.624444761551, 'increment': 50, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 2833.87333095134, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 50, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(JOB_COMPLETED, {
    'time': 'Tue Sep  9 12:03:26 2025', 'jobName': 'riks-multiweb'})
mdb.models['riks-multiweb'].steps['riks'].setValues(maxArcInc=1e+36, 
    totalArcLength=1.0)
mdb.jobs['riks-multiweb'].submit(consistencyChecking=OFF)
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE NLGEOM FLAG SHOULD BE ACTIVATED FOR THE RIKS STEP. OTHERWISE, THE GEOMETRIC NONLINEARITY WILL NOT BE CONSIDERED.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\riks-multiweb.odb', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 13488, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'riks-multiweb', 'memory': 517.0})
mdb.jobs['riks-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 84.0, 
    'phase': STANDARD_PHASE, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0001, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0001, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0001, 'increment': 2, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0002, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000150000000000001, 'increment': 3, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000350000000000001, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000225000000000001, 'increment': 4, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000575000000000002, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000337500000000001, 'increment': 5, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000912500000000003, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000506250000000002, 'increment': 6, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00141875000000001, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000759375000000001, 'increment': 7, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00217812500000001, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0011390625, 'increment': 8, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0033171875, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00170859375000001, 'increment': 9, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00502578125000002, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.002562890625, 'increment': 10, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00758867187500002, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00384433593750001, 'increment': 11, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0114330078125, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 11, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00576650390625002, 'increment': 12, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0171995117187501, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 12, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00864975585937504, 'increment': 13, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0258492675781251, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 13, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0129746337890626, 'increment': 14, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0388239013671877, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 14, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0194619506835939, 'increment': 15, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0582858520507816, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 15, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0291929260253908, 'increment': 16, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0874787780761724, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 16, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0437893890380862, 'increment': 17, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.131268167114259, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 17, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.065684083557129, 'increment': 18, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.196952250671388, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 18, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0985261253356939, 'increment': 19, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.295478376007081, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 19, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.147789188003541, 'increment': 20, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.443267564010623, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 20, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.221683782005312, 'increment': 21, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.664951346015935, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 21, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.332525673007965, 'increment': 22, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.9974770190239, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 22, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.498788509511964, 'increment': 23, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.49626552853586, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 23, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.748182764267963, 'increment': 24, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 2.24444829280383, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 24, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.12227414640195, 'increment': 25, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 3.36672243920578, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 25, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.68341121960293, 'increment': 26, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 5.05013365880871, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 26, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 2.52511682940441, 'increment': 27, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 7.57525048821312, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 27, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 3.78767524410661, 'increment': 28, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 11.3629257323197, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 28, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 5.68151286615989, 'increment': 29, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 17.0444385984796, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 29, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 8.5222692992399, 'increment': 30, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 25.5667078977195, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 30, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 12.7834039488598, 'increment': 31, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 38.3501118465793, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 31, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 19.1751059232896, 'increment': 32, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 57.5252177698689, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 32, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 28.7626588849346, 'increment': 33, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 86.2878766548035, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 33, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 43.1439883274018, 'increment': 34, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 129.431864982205, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 34, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 64.7159824911019, 'increment': 35, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 194.147847473307, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 35, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 97.073973736654, 'increment': 36, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 291.221821209961, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 36, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 145.610960604981, 'increment': 37, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 436.832781814942, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 37, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 218.41644090747, 'increment': 38, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 655.249222722413, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 38, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 327.624661361208, 'increment': 39, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 982.873884083621, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 39, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 491.436992041814, 'increment': 40, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1474.31087612543, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 40, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 737.155488062718, 'increment': 41, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 2211.46636418815, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 41, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1105.73323209407, 'increment': 42, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 3317.19959628222, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 42, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1658.59984814111, 'increment': 43, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 4975.79944442333, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 43, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 2487.89977221167, 'increment': 44, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 7463.699216635, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 44, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 3731.84965831748, 'increment': 45, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 11195.5488749525, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 45, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 5597.77448747623, 'increment': 46, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 16793.3233624287, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 46, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 8396.66173121438, 'increment': 47, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 25189.9850936431, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 47, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 12594.9925968215, 'increment': 48, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 37784.9776904646, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 48, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 18892.4888952323, 'increment': 49, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 56677.4665856969, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 49, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 28338.7333428486, 'increment': 50, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 85016.1999285456, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 50, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(JOB_COMPLETED, {
    'time': 'Tue Sep  9 12:06:26 2025', 'jobName': 'riks-multiweb'})
# Save by sbonnell on 2025_09_09-12.06.44; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['riks-multiweb'].loads['Load-1'].suppress()
mdb.models['riks-multiweb'].DisplacementBC(amplitude=UNSET, createStepName=
    'riks', distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, 
    name='Displacement', region=Region(
    nodes=mdb.models['riks-multiweb'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:47 #800000 ]', ), )), u1=0.15, u2=UNSET, u3=UNSET, ur1=UNSET, 
    ur2=UNSET, ur3=UNSET)
# Save by sbonnell on 2025_09_09-14.03.43; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['riks-multiweb'].submit(consistencyChecking=OFF)
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE NLGEOM FLAG SHOULD BE ACTIVATED FOR THE RIKS STEP. OTHERWISE, THE GEOMETRIC NONLINEARITY WILL NOT BE CONSIDERED.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\riks-multiweb.odb', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 6776, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'riks-multiweb', 'memory': 517.0})
mdb.jobs['riks-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 84.0, 
    'phase': STANDARD_PHASE, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 9.99999999999997e-05, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 9.99999999999997e-05, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 9.99999999999995e-05, 'increment': 2, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000199999999999999, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00015, 'increment': 3, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000349999999999999, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000225, 'increment': 4, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000574999999999999, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0003375, 'increment': 5, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000912499999999998, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000506250000000001, 'increment': 6, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00141875, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000759374999999996, 'increment': 7, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.002178125, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00113906249999999, 'increment': 8, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00331718749999999, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00170859375, 'increment': 9, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00502578124999999, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00256289062499999, 'increment': 10, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00758867187499998, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00384433593749997, 'increment': 11, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0114330078124999, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 11, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00576650390624999, 'increment': 12, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0171995117187499, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 12, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.008649755859375, 'increment': 13, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0258492675781249, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 13, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0129746337890625, 'increment': 14, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0388239013671875, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 14, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0194619506835937, 'increment': 15, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0582858520507812, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 15, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0291929260253906, 'increment': 16, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0874787780761718, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 16, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0437893890380858, 'increment': 17, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.131268167114258, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 17, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0656840835571287, 'increment': 18, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.196952250671386, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 18, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.098526125335693, 'increment': 19, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.295478376007079, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 19, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.14778918800354, 'increment': 20, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.443267564010619, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 20, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.22168378200531, 'increment': 21, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.66495134601593, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 21, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.332525673007962, 'increment': 22, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.997477019023892, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 22, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.498788509511919, 'increment': 23, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.49626552853581, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 23, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.74818276426789, 'increment': 24, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 2.2444482928037, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 24, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.12227414640184, 'increment': 25, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 3.36672243920554, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 25, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.68341121960276, 'increment': 26, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 5.0501336588083, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 26, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 2.52511682940415, 'increment': 27, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 7.57525048821246, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 27, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 3.78767524410624, 'increment': 28, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 11.3629257323187, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 28, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 5.68151286615933, 'increment': 29, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 17.044438598478, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 29, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 8.52226929923908, 'increment': 30, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 25.5667078977171, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 30, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 12.7834039488585, 'increment': 31, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 38.3501118465756, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 31, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 19.1751059232876, 'increment': 32, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 57.5252177698632, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 32, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 28.7626588849318, 'increment': 33, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 86.287876654795, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 33, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 43.1439883273976, 'increment': 34, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 129.431864982193, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 34, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 64.7159824910956, 'increment': 35, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 194.147847473288, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 35, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 97.0739737366444, 'increment': 36, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 291.221821209933, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 36, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 145.610960604967, 'increment': 37, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 436.832781814899, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 37, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 218.416440907449, 'increment': 38, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 655.249222722348, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 38, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 327.624661361176, 'increment': 39, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 982.873884083524, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 39, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 491.436992041765, 'increment': 40, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1474.31087612529, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 40, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 737.155488062644, 'increment': 41, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 2211.46636418793, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 41, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1105.73323209396, 'increment': 42, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 3317.1995962819, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 42, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1658.59984814095, 'increment': 43, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 4975.79944442285, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 43, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 2487.89977221142, 'increment': 44, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 7463.69921663427, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 44, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 3731.84965831711, 'increment': 45, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 11195.5488749514, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 45, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 5597.77448747566, 'increment': 46, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 16793.323362427, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 46, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 8396.66173121354, 'increment': 47, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 25189.9850936406, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 47, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 12594.9925968203, 'increment': 48, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 37784.9776904609, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 48, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 18892.4888952304, 'increment': 49, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 56677.4665856913, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 49, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 28338.7333428458, 'increment': 50, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 85016.1999285371, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 50, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(JOB_COMPLETED, {
    'time': 'Tue Sep  9 14:04:55 2025', 'jobName': 'riks-multiweb'})
mdb.models['riks-multiweb'].steps['riks'].setValues(initialArcInc=1e-06, 
    maxArcInc=1e+36, totalArcLength=30.0)
mdb.jobs['riks-multiweb'].submit(consistencyChecking=OFF)
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE NLGEOM FLAG SHOULD BE ACTIVATED FOR THE RIKS STEP. OTHERWISE, THE GEOMETRIC NONLINEARITY WILL NOT BE CONSIDERED.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\riks-multiweb.odb', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 17940, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'riks-multiweb', 'memory': 517.0})
mdb.jobs['riks-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 84.0, 
    'phase': STANDARD_PHASE, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 3.33333333333334e-08, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 3.33333333333334e-08, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 3.33333333333334e-08, 'increment': 2, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 6.66666666666668e-08, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 5e-08, 'increment': 3, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.16666666666667e-07, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 7.50000000000001e-08, 'increment': 4, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.91666666666667e-07, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.125e-07, 'increment': 5, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 3.04166666666667e-07, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.68750000000001e-07, 'increment': 6, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 4.72916666666668e-07, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 2.53125000000001e-07, 'increment': 7, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 7.26041666666668e-07, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 3.79687499999997e-07, 'increment': 8, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.10572916666667e-06, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 5.69531250000001e-07, 'increment': 9, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.67526041666667e-06, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 8.54296874999999e-07, 'increment': 10, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 2.52955729166667e-06, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.2814453125e-06, 'increment': 11, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 3.81100260416666e-06, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 11, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.92216796875e-06, 'increment': 12, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 5.73317057291666e-06, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 12, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 2.88325195312501e-06, 'increment': 13, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 8.61642252604168e-06, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 13, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 4.32487792968752e-06, 'increment': 14, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.29413004557292e-05, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 14, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 6.48731689453125e-06, 'increment': 15, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.94286173502604e-05, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 15, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 9.73097534179686e-06, 'increment': 16, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 2.91595926920573e-05, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 16, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.45964630126952e-05, 'increment': 17, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 4.37560557047525e-05, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 17, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 2.18946945190429e-05, 'increment': 18, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 6.56507502237954e-05, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 18, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 3.28420417785643e-05, 'increment': 19, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 9.84927920023597e-05, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 19, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 4.92630626678467e-05, 'increment': 20, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000147755854670206, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 20, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 7.38945940017701e-05, 'increment': 21, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000221650448671976, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 21, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000110841891002656, 'increment': 22, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000332492339674632, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 22, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000166262836503982, 'increment': 23, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000498755176178614, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 23, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000249394254755974, 'increment': 24, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000748149430934589, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 24, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000374091382133956, 'increment': 25, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00112224081306855, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 25, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000561137073200936, 'increment': 26, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00168337788626948, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 26, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000841705609801408, 'increment': 27, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00252508349607089, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 27, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00126255841470211, 'increment': 28, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.003787641910773, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 28, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00189383762205318, 'increment': 29, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00568147953282618, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 29, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00284075643307975, 'increment': 30, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00852223596590593, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 30, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00426113464961966, 'increment': 31, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0127833706155256, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 31, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00639170197442947, 'increment': 32, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0191750725899551, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 32, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00958755296164418, 'increment': 33, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0287626255515992, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 33, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0143813294424664, 'increment': 34, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0431439549940656, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 34, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0215719941636996, 'increment': 35, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0647159491577652, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 35, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0323579912455492, 'increment': 36, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0970739404033144, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 36, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0485369868683242, 'increment': 37, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.145610927271639, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 37, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0728054803024854, 'increment': 38, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.218416407574124, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 38, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.109208220453729, 'increment': 39, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.327624628027853, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 39, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.163812330680592, 'increment': 40, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.491436958708445, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 40, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.245718496020889, 'increment': 41, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.737155454729334, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 41, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.368577744031334, 'increment': 42, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.10573319876067, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 42, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.552866616047001, 'increment': 43, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.65859981480767, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 43, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.829299924070495, 'increment': 44, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 2.48789973887816, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 44, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.24394988610575, 'increment': 45, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 3.73184962498392, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 45, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.86592482915862, 'increment': 46, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 5.59777445414254, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 46, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 2.79888724373795, 'increment': 47, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 8.39666169788049, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 47, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 4.19833086560689, 'increment': 48, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 12.5949925634874, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 48, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 6.29749629841037, 'increment': 49, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 18.8924888618977, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 49, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 9.44624444761553, 'increment': 50, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 28.3387333095133, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 50, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(JOB_COMPLETED, {
    'time': 'Tue Sep  9 14:06:59 2025', 'jobName': 'riks-multiweb'})
del mdb.models['riks-multiweb'].boundaryConditions['Displacement']
mdb.models['riks-multiweb'].loads['Load-1'].resume()
mdb.jobs['riks-multiweb'].submit(consistencyChecking=OFF)
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE NLGEOM FLAG SHOULD BE ACTIVATED FOR THE RIKS STEP. OTHERWISE, THE GEOMETRIC NONLINEARITY WILL NOT BE CONSIDERED.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\riks-multiweb.odb', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 21100, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'riks-multiweb', 'memory': 517.0})
mdb.jobs['riks-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 84.0, 
    'phase': STANDARD_PHASE, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 3.33333333333335e-08, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 3.33333333333335e-08, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 3.33333333333334e-08, 'increment': 2, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 6.66666666666669e-08, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 5e-08, 'increment': 3, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.16666666666667e-07, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 7.50000000000001e-08, 'increment': 4, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.91666666666667e-07, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.125e-07, 'increment': 5, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 3.04166666666667e-07, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.68750000000001e-07, 'increment': 6, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 4.72916666666668e-07, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 2.53125000000001e-07, 'increment': 7, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 7.26041666666669e-07, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 3.79687499999998e-07, 'increment': 8, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.10572916666667e-06, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 5.69531250000001e-07, 'increment': 9, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.67526041666667e-06, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 8.54296874999995e-07, 'increment': 10, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 2.52955729166666e-06, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.2814453125e-06, 'increment': 11, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 3.81100260416666e-06, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 11, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.92216796875e-06, 'increment': 12, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 5.73317057291666e-06, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 12, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 2.88325195312501e-06, 'increment': 13, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 8.61642252604166e-06, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 13, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 4.32487792968752e-06, 'increment': 14, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.29413004557292e-05, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 14, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 6.48731689453125e-06, 'increment': 15, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.94286173502604e-05, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 15, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 9.73097534179687e-06, 'increment': 16, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 2.91595926920573e-05, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 16, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.45964630126952e-05, 'increment': 17, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 4.37560557047525e-05, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 17, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 2.1894694519043e-05, 'increment': 18, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 6.56507502237954e-05, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 18, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 3.28420417785643e-05, 'increment': 19, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 9.84927920023598e-05, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 19, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 4.92630626678467e-05, 'increment': 20, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000147755854670207, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 20, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 7.38945940017701e-05, 'increment': 21, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000221650448671977, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 21, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000110841891002656, 'increment': 22, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000332492339674633, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 22, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000166262836503982, 'increment': 23, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000498755176178615, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 23, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000249394254755974, 'increment': 24, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.000748149430934589, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 24, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000374091382133956, 'increment': 25, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00112224081306855, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 25, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000561137073200936, 'increment': 26, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00168337788626948, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 26, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000841705609801408, 'increment': 27, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00252508349607089, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 27, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00126255841470211, 'increment': 28, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.003787641910773, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 28, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00189383762205318, 'increment': 29, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00568147953282618, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 29, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00284075643307975, 'increment': 30, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.00852223596590593, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 30, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00426113464961966, 'increment': 31, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0127833706155256, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 31, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00639170197442947, 'increment': 32, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0191750725899551, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 32, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00958755296164418, 'increment': 33, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0287626255515992, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 33, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0143813294424664, 'increment': 34, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0431439549940656, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 34, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0215719941636996, 'increment': 35, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0647159491577652, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 35, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0323579912455491, 'increment': 36, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.0970739404033143, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 36, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0485369868683241, 'increment': 37, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.145610927271638, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 37, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0728054803024853, 'increment': 38, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.218416407574124, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 38, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.109208220453729, 'increment': 39, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.327624628027852, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 39, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.163812330680593, 'increment': 40, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.491436958708445, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 40, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.245718496020888, 'increment': 41, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 0.737155454729333, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 41, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.368577744031334, 'increment': 42, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.10573319876067, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 42, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.552866616047001, 'increment': 43, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.65859981480767, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 43, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.829299924070492, 'increment': 44, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 2.48789973887816, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 44, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.24394988610575, 'increment': 45, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 3.73184962498391, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 45, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.86592482915862, 'increment': 46, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 5.59777445414253, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 46, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 2.79888724373794, 'increment': 47, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 8.39666169788047, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 47, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 4.19833086560688, 'increment': 48, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 12.5949925634874, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 48, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 6.29749629841035, 'increment': 49, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 18.8924888618977, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 49, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 9.44624444761551, 'increment': 50, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 28.3387333095132, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 50, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(JOB_COMPLETED, {
    'time': 'Tue Sep  9 14:08:38 2025', 'jobName': 'riks-multiweb'})
mdb.models['riks-multiweb'].steps['riks'].setValues(nlgeom=ON)
mdb.jobs['riks-multiweb'].submit(consistencyChecking=OFF)
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\riks-multiweb.odb', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 16144, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'riks-multiweb', 'memory': 517.0})
mdb.jobs['riks-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 84.0, 
    'phase': STANDARD_PHASE, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 1U', 
    'incrementLPF': 3.33316692041015e-08, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 7})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 2U', 
    'incrementLPF': 1.02281462880917e-08, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 6})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 3U', 
    'incrementLPF': 1.03235563501433e-08, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 7})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 4U', 
    'incrementLPF': 1.01792563713477e-08, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 0.0, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 5, 
    'incrementLPF': 3.17891438802085e-14, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 3.17891438802085e-14, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 3.1789143880437e-14, 'increment': 2, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 6.35782877606455e-14, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 4.76837158206009e-14, 'increment': 3, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.11262003581246e-13, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 7.15255737306648e-14, 'increment': 4, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.82787577311911e-13, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 1U', 
    'incrementLPF': -1.01780942842435e-08, 'increment': 5, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 1.82787577311911e-13, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 2U', 
    'incrementLPF': -1.01768733214568e-08, 'increment': 5, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 1.82787577311911e-13, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 3U', 
    'incrementLPF': -1.01770703285496e-08, 'increment': 5, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 1.82787577311911e-13, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 4, 
    'incrementLPF': 8.84028850125637e-17, 'increment': 5, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'lpf': 1.82875980196924e-13, 'equilibrium': 1})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 1U', 
    'incrementLPF': -1.01779866452754e-08, 'increment': 6, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 1.82875980196924e-13, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 2U', 
    'incrementLPF': -1.0177968395909e-08, 'increment': 6, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 1.82875980196924e-13, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'riks-multiweb'})
mdb.models['riks-multiweb'].DisplacementBC(amplitude=UNSET, createStepName=
    'riks', distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, 
    name='Displacement', region=Region(
    nodes=mdb.models['riks-multiweb'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:37 #2000000 ]', ), )), u1=0.15, u2=UNSET, u3=UNSET, ur1=UNSET, 
    ur2=UNSET, ur3=UNSET)
mdb.models['riks-multiweb'].loads['Load-1'].suppress()
mdb.jobs['riks-multiweb'].submit(consistencyChecking=OFF)
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\riks-multiweb.odb', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 15712, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'riks-multiweb', 'memory': 517.0})
mdb.jobs['riks-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 84.0, 
    'phase': STANDARD_PHASE, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'A ZERO DISPLACEMENT SOLUTION WAS FOUND IN THE FIRST ITERATION OF A RIKS STEP. THE ANALYSIS CANNOT PROCEED. THE MOST LIKELY CAUSE IS THAT ALL DISPLACEMENT DEGREES-OF-FREEDOM ARE CONSTRAINED TO BE ZERO.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'riks-multiweb'})
del mdb.models['riks-multiweb'].boundaryConditions['Displacement']
mdb.models['riks-multiweb'].loads['Load-1'].resume()
mdb.models['riks-multiweb'].steps['riks'].setValues(initialArcInc=0.01, 
    minArcInc=1e-08)
mdb.jobs['riks-multiweb'].submit(consistencyChecking=OFF)
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\riks-multiweb.odb', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 5220, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'riks-multiweb', 'memory': 517.0})
mdb.jobs['riks-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 84.0, 
    'phase': STANDARD_PHASE, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000333316462725065, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.000333316462725065, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000333282730244062, 'increment': 2, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.000666599192969127, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000499860845330417, 'increment': 3, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.00116646003829954, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000749648981074267, 'increment': 4, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.00191610901937381, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00112415339211437, 'increment': 5, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.00304026241148818, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00168551013028829, 'increment': 6, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.00472577254177647, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00252664605445465, 'increment': 7, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.00725241859623112, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00378632858544011, 'increment': 8, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.0110387471816712, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00567131042994154, 'increment': 9, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.0167100576116128, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00848858444789107, 'increment': 10, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.0251986420595038, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0126916181056216, 'increment': 11, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.0378902601651255, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 11, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.018944930863726, 'increment': 12, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.0568351910288514, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 12, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0282104164630516, 'increment': 13, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.0850456074919031, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 13, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0418537781789519, 'increment': 14, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.126899385670855, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 14, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0617546287873461, 'increment': 15, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.188654014458201, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 15, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0903680722988879, 'increment': 16, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 0.279022086757089, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 16, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.130610390319078, 'increment': 17, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 0.409632477076167, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 17, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.185312038746236, 'increment': 18, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 0.594944515822403, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 18, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.255830379221459, 'increment': 19, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 0.850774895043862, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 19, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.33948705738371, 'increment': 20, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 1.19026195242757, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 20, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.426425084998997, 'increment': 21, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 1.61668703742657, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 21, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.498792915843973, 'increment': 22, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 2.11547995327054, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 22, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.53673221477911, 'increment': 23, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 2.65221216804965, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 23, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.531106212537771, 'increment': 24, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 3.18331838058742, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 24, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.494378237582333, 'increment': 25, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 3.67769661816976, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 25, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.461302095888048, 'increment': 26, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 4.1389987140578, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 26, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.476818603336541, 'increment': 27, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 4.61581731739434, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 27, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 16 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 16 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 16 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.571299188253575, 'increment': 28, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 5.18711650564792, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 28, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 16 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 44 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.720018431880399, 'increment': 29, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'lpf': 5.90713493752832, 'equilibrium': 5})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 29, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 56 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 44 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 16 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 1U', 
    'incrementLPF': -0.403683476069226, 'increment': 30, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 5.90713493752832, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 55 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 730 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3066 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 2U', 
    'incrementLPF': 64.7422974278966, 'increment': 30, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 5.90713493752832, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 3, 
    'incrementLPF': 0.00982185782404955, 'increment': 30, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 5.91695679535237, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 30, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00935827984587003, 'increment': 31, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 5.92631507519824, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 31, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0113570539545882, 'increment': 32, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 5.93767212915282, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 32, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00742748338316314, 'increment': 33, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 5.94509961253599, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 33, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 49 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 49 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': -0.00858769015744078, 'increment': 34, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 5.93651192237855, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 34, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 49 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 49 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 49 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': -0.0233007647411625, 'increment': 35, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 5.91321115763738, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 35, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 49 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 49 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 49 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': -0.0317118772398706, 'increment': 36, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 5.88149928039751, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 36, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 49 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 49 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 49 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': -0.0361705976353537, 'increment': 37, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 5.84532868276216, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 37, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 49 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 46 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 49 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 49 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': -0.0296727133632592, 'increment': 38, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 5.8156559693989, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 38, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 49 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 42 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 40 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 45 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 1U', 
    'incrementLPF': -0.265402168482043, 'increment': 39, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 5.8156559693989, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 49 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 49 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 2, 
    'incrementLPF': -0.00486384042257432, 'increment': 39, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 5.81079212897633, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 39, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 50 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 49 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 49 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00708268109208928, 'increment': 40, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 5.81787481006842, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 40, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 49 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 45 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 50 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0397193623877947, 'increment': 41, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 5.85759417245621, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 41, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 50 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 41 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 44 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 30 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 42 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 1U', 
    'incrementLPF': 0.336135877501474, 'increment': 42, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'lpf': 5.85759417245621, 'equilibrium': 5})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 50 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 46 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 50 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 2, 
    'incrementLPF': 0.0361239070280866, 'increment': 42, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 5.8937180794843, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 42, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 50 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 45 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 46 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 44 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 1U', 
    'incrementLPF': 0.041103353767678, 'increment': 43, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 5.8937180794843, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 50 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 49 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 2, 
    'incrementLPF': 0.0243826730428863, 'increment': 43, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 5.91810075252718, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 43, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 49 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 46 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0417591521829711, 'increment': 44, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 5.95985990471015, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 44, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 43 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 1U', 
    'incrementLPF': 0.0669018773810579, 'increment': 45, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'lpf': 5.95985990471015, 'equilibrium': 5})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 2, 
    'incrementLPF': 0.0257886193094855, 'increment': 45, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 5.98564852401964, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 45, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 46 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0362969383287362, 'increment': 46, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 6.02194546234838, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 46, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 43 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 47 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 49 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 47 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 1U', 
    'incrementLPF': 0.082190001783151, 'increment': 47, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'lpf': 6.02194546234838, 'equilibrium': 6})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 2, 
    'incrementLPF': 0.00926783032606095, 'increment': 47, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 6.03121329267444, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 47, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 46 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 49 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 50 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0186161367698335, 'increment': 48, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'lpf': 6.04982942944427, 'equilibrium': 5})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 48, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 50 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 44 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 50 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 47 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 1U', 
    'incrementLPF': 0.0388913847083261, 'increment': 49, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 6.04982942944427, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 50 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 48 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 50 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 50 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 2, 
    'incrementLPF': 0.00694593568241132, 'increment': 49, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 6.05677536512668, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 49, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 50 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 49 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 50 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 50 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00781292947855902, 'increment': 50, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 6.06458829460524, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 50, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(JOB_COMPLETED, {
    'time': 'Tue Sep  9 14:18:08 2025', 'jobName': 'riks-multiweb'})
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
mdb.models['eigen-multiweb'].parts['panel'].editNode(coordinate2=0.0072, nodes=
    mdb.models['eigen-multiweb'].parts['panel'].nodes.getSequenceFromMask(
    mask=('[#0:37 #3000000 #0:4 #1800000 #0:4 #c00000 #0:4', ' #600000 ]', ), 
    ))
# Save by sbonnell on 2025_09_09-14.37.04; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-multiweb'].rootAssembly.regenerate()
mdb.models['eigen-multiweb'].rootAssembly.regenerate()
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
mdb.models['riks-multiweb'].parts['panel'].editNode(coordinate2=0.0072, nodes=
    mdb.models['riks-multiweb'].parts['panel'].nodes.getSequenceFromMask(mask=(
    '[#0:37 #3000000 #0:4 #1800000 #0:4 #c00000 #0:4', ' #600000 ]', ), ))
# Save by sbonnell on 2025_09_09-14.38.37; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['riks-multiweb'].rootAssembly.regenerate()
mdb.models['riks-multiweb'].rootAssembly.regenerate()
mdb.jobs['eigen-multiweb'].submit(consistencyChecking=OFF)
mdb.jobs['eigen-multiweb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'BUCKLE OPTION IS NOT SUPPORTED FOR ELEMENT LOOP PARALLELIZATION. IF YOU HAVE SPECIFIED ELEMENT LOOP PARALLELIZATION, IT WILL BE TURNED OFF FOR THIS ANALYSIS.', 
    'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\eigen-multiweb.odb', 
    'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 14440, 
    'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-multiweb', 'memory': 530.0})
mdb.jobs['eigen-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 87.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'eigen-multiweb', 'memory': 548.0})
mdb.jobs['eigen-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 87.0, 
    'phase': STANDARD_PHASE, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(STATUS, {'totalTime': 0.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 1, 
    'jobName': 'eigen-multiweb', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['eigen-multiweb']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'eigen-multiweb'})
mdb.jobs['eigen-multiweb']._Message(JOB_COMPLETED, {
    'time': 'Tue Sep  9 14:40:07 2025', 'jobName': 'eigen-multiweb'})
mdb.jobs['riks-multiweb'].submit(consistencyChecking=OFF)
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\riks-multiweb.odb', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 13724, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'riks-multiweb', 'memory': 517.0})
mdb.jobs['riks-multiweb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(MINIMUM_MEMORY, {'minimum_memory': 84.0, 
    'phase': STANDARD_PHASE, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000333332984422983, 'increment': 1, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.000333332984422983, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000333332286646155, 'increment': 2, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.000666665271069138, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000499997123223402, 'increment': 3, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.00116666239429254, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000749992738737825, 'increment': 4, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.00191665513303036, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00112498247873766, 'increment': 5, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.00304163761176802, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0016874587760729, 'increment': 6, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.00472909638784092, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00253115448003021, 'increment': 7, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.00726025086787113, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00379665570299865, 'increment': 8, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.0110569065708698, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00569481174657821, 'increment': 9, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.016751718317448, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.00854182843826235, 'increment': 10, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.0252935467557103, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0128118580989952, 'increment': 11, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.0381054048547055, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 11, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.01921576645382, 'increment': 12, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.0573211713085255, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 12, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0288189983281609, 'increment': 13, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.0861401696366864, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 13, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0432176675353817, 'increment': 14, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.129357837172068, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 14, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0648008473136648, 'increment': 15, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.194158684485733, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 15, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0971389016509778, 'increment': 16, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.291297586136711, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 16, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.145550633628817, 'increment': 17, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.436848219765528, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 17, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.217902450375172, 'increment': 18, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.654750670140699, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 18, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.325606434337179, 'increment': 19, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.980357104477878, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 19, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.484168254376808, 'increment': 20, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 1.46452535885469, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 20, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.708186942247974, 'increment': 21, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 2.17271230110266, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 21, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.959264297642383, 'increment': 22, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 3.13197659874504, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 22, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.904615412349538, 'increment': 23, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 4.03659201109458, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 23, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.509194308839216, 'increment': 24, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 4.5457863199338, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 24, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.303129666109704, 'increment': 25, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 4.8489159860435, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 25, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.216797145062734, 'increment': 26, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 5.06571313110623, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 26, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.200297555475894, 'increment': 27, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 5.26601068658213, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 27, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.24427767274861, 'increment': 28, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 5.51028835933074, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 28, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.35763221309687, 'increment': 29, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 5.86792057242761, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 29, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 1U', 
    'incrementLPF': 0.504165551495511, 'increment': 30, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'lpf': 5.86792057242761, 'equilibrium': 5})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 2, 
    'incrementLPF': 0.202353707969436, 'increment': 30, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 6.07027428039704, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 30, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 51078 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 1U', 
    'incrementLPF': 28463.522325666, 'increment': 31, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 6.07027428039704, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 2, 
    'incrementLPF': 0.109432569215824, 'increment': 31, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 6.17970684961287, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 31, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.12345833904031, 'increment': 32, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 6.30316518865318, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 32, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.165313185669453, 'increment': 33, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 6.46847837432263, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 33, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.253918920092897, 'increment': 34, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 6.72239729441553, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 34, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.372718364084275, 'increment': 35, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 7.0951156584998, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 35, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.555475421572401, 'increment': 36, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'lpf': 7.6505910800722, 'equilibrium': 5})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 36, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.582552193348927, 'increment': 37, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 8.23314327342113, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 37, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.609739639544156, 'increment': 38, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 8.84288291296529, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 38, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.946153181537612, 'increment': 39, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 9.7890360945029, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 39, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.41252979517048, 'increment': 40, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'lpf': 11.2015658896734, 'equilibrium': 5})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 40, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.26556835375689, 'increment': 41, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'lpf': 12.4671342434303, 'equilibrium': 6})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 41, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.929382465570384, 'increment': 42, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'lpf': 13.3965167090007, 'equilibrium': 7})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 42, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 1U', 
    'incrementLPF': 0.286807251778417, 'increment': 43, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'lpf': 13.3965167090007, 'equilibrium': 5})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 2, 
    'incrementLPF': 0.146948896239683, 'increment': 43, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 13.5434656052403, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 43, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.101394359903417, 'increment': 44, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 13.6448599651438, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 44, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 1U', 
    'incrementLPF': 0.0407684744176273, 'increment': 45, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 12, 
    'phase': STANDARD_PHASE, 'lpf': 13.6448599651438, 'equilibrium': 12})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 2, 
    'incrementLPF': 0.0338815487378122, 'increment': 45, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 13.6787415138816, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 45, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 1U', 
    'incrementLPF': 0.0187260093118223, 'increment': 46, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 12, 
    'phase': STANDARD_PHASE, 'lpf': 13.6787415138816, 'equilibrium': 12})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 2U', 
    'incrementLPF': 0.016855495775355, 'increment': 46, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'lpf': 13.6787415138816, 'equilibrium': 9})
mdb.jobs['riks-multiweb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': ' 3U', 
    'incrementLPF': 0.00340228532613826, 'increment': 46, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 13.6787415138816, 'equilibrium': 4})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 4, 
    'incrementLPF': 0.000234305186509365, 'increment': 46, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 13.6789758190681, 'equilibrium': 2})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 46, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000349225714996783, 'increment': 47, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 13.6793250447831, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 47, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000511933026304691, 'increment': 48, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 13.6798369778094, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 48, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.000740459574646414, 'increment': 49, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 13.680577437384, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 49, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0010344278315935, 'increment': 50, 'step': 1, 
    'jobName': 'riks-multiweb', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 13.6816118652156, 'equilibrium': 3})
mdb.jobs['riks-multiweb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 50, 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'riks-multiweb'})
mdb.jobs['riks-multiweb']._Message(JOB_COMPLETED, {
    'time': 'Tue Sep  9 14:44:39 2025', 'jobName': 'riks-multiweb'})
del mdb.jobs['eigen-multiweb']
del mdb.jobs['riks-multiweb']
mdb.Model(name='eigen-complete', objectToCopy=mdb.models['eigen-multiweb'])
del mdb.models['eigen-complete'].parts['Part-1']
del mdb.models['eigen-complete'].parts['panel']
mdb.models['eigen-complete'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
del mdb.models['eigen-complete'].rootAssembly.features['panel-1']
mdb.models['eigen-complete'].rootAssembly.deleteSets(setNames=('Edge-Follower', 
    'Edge-Main', 'Fixed-Follower', 'Fixed-Main', 'Load-Follower', 'Load-Main', 
    'Web1-Follower', 'Web1-Main', 'Web2-Follower', 'Web2-Main', 
    'Web3-Follower', 'Web3-Main', 'Web4-Follower', 'Web4-Main'))
mdb.models['eigen-complete'].constraints.delete(('Fixed-Edge', 'Free-Edge', 
    'Load', 'Web1', 'Web2', 'Web3', 'Web4'))
del mdb.models['eigen-complete'].loads['Load-1']
mdb.models['eigen-complete'].boundaryConditions.delete(('Centre', 'Edge', 
    'End'))
mdb.models['eigen-complete'].ConstrainedSketch(name='__profile__', sheetSize=
    4.0)
mdb.models['eigen-complete'].sketches['__profile__'].Line(point1=(-1.5, 0.0), 
    point2=(1.5, 0.0))
mdb.models['eigen-complete'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['eigen-complete'].sketches['__profile__'].geometry[2])
mdb.models['eigen-complete'].sketches['__profile__'].Line(point1=(-0.9, 0.0), 
    point2=(-0.9, 0.125))
mdb.models['eigen-complete'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['eigen-complete'].sketches['__profile__'].geometry[3])
mdb.models['eigen-complete'].sketches['__profile__'].Line(point1=(-0.3, 0.0), 
    point2=(-0.3, 0.125))
mdb.models['eigen-complete'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['eigen-complete'].sketches['__profile__'].geometry[4])
mdb.models['eigen-complete'].sketches['__profile__'].Line(point1=(0.3, 0.0), 
    point2=(0.3, 0.125))
mdb.models['eigen-complete'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['eigen-complete'].sketches['__profile__'].geometry[5])
mdb.models['eigen-complete'].sketches['__profile__'].Line(point1=(0.9, 0.0), 
    point2=(0.9, 0.125))
mdb.models['eigen-complete'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['eigen-complete'].sketches['__profile__'].geometry[6])
mdb.models['eigen-complete'].sketches['__profile__'].Line(point1=(-0.95, 0.125)
    , point2=(-0.85, 0.125))
mdb.models['eigen-complete'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['eigen-complete'].sketches['__profile__'].geometry[7])
mdb.models['eigen-complete'].sketches['__profile__'].Line(point1=(-0.35, 0.125)
    , point2=(-0.25, 0.125))
mdb.models['eigen-complete'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['eigen-complete'].sketches['__profile__'].geometry[8])
mdb.models['eigen-complete'].sketches['__profile__'].Line(point1=(0.25, 0.125), 
    point2=(0.35, 0.125))
mdb.models['eigen-complete'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['eigen-complete'].sketches['__profile__'].geometry[9])
mdb.models['eigen-complete'].sketches['__profile__'].Line(point1=(0.85, 0.125), 
    point2=(0.95, 0.125))
mdb.models['eigen-complete'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['eigen-complete'].sketches['__profile__'].geometry[10])
# Save by sbonnell on 2025_09_09-15.08.11; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-complete'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['eigen-complete'].parts['Part-1'].BaseShellExtrude(depth=3.0, 
    sketch=mdb.models['eigen-complete'].sketches['__profile__'])
del mdb.models['eigen-complete'].sketches['__profile__']
mdb.models['eigen-complete'].parts['Part-1'].setElementType(elemTypes=(
    ElemType(elemCode=S4R, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    hourglassControl=DEFAULT), ElemType(elemCode=S3, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['eigen-complete'].parts['Part-1'].faces.getSequenceFromMask((
    '[#1ffff ]', ), ), ))
mdb.models['eigen-complete'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['eigen-complete'].parts['Part-1'].edges.getSequenceFromMask((
    '[#e0708a1 #381c ]', ), ), size=0.020833)
mdb.models['eigen-complete'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['eigen-complete'].parts['Part-1'].edges.getSequenceFromMask((
    '[#f75e ]', ), ), size=0.02)
mdb.models['eigen-complete'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['eigen-complete'].parts['Part-1'].edges.getSequenceFromMask((
    '[#31180000 #8c462 ]', ), ), size=0.025)
mdb.models['eigen-complete'].parts['Part-1'].generateMesh()
mdb.models['eigen-complete'].parts['Part-1'].deleteMesh()
mdb.models['eigen-complete'].parts['Part-1'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['eigen-complete'].parts['Part-1'].edges.getSequenceFromMask((
    '[#c0e00000 #70381 ]', ), ), size=0.025)
mdb.models['eigen-complete'].parts['Part-1'].generateMesh()
# Save by sbonnell on 2025_09_09-15.12.24; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-complete'].parts['Part-1'].PartFromMesh(copySets=True, name=
    'panel')
mdb.models['eigen-complete'].rootAssembly.Instance(dependent=ON, name='panel-1'
    , part=mdb.models['eigen-complete'].parts['panel'])
mdb.models['eigen-complete'].rootAssembly.rotate(angle=90.0, axisDirection=(
    0.0, 1.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('panel-1', ))
mdb.models['eigen-complete'].rootAssembly.rotate(angle=90.0, axisDirection=(
    1.0, 0.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('panel-1', ))
mdb.models['eigen-complete'].rootAssembly.translate(instanceList=('panel-1', ), 
    vector=(-1.5, 0.0, 0.0))
# Save by sbonnell on 2025_09_09-15.13.30; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-complete'].parts['panel'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    elements=mdb.models['eigen-complete'].parts['panel'].elements.getSequenceFromMask(
    mask=('[#ffffffff:703 #f ]', ), )), sectionName='plate', 
    thicknessAssignment=FROM_SECTION)
mdb.models['eigen-complete'].parts['panel'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    elements=mdb.models['eigen-complete'].parts['panel'].elements.getSequenceFromMask(
    mask=('[#0:703 #fffffff0 #ffffffff:27 #ff #0:18 #ffffffff:28 #f', 
    ' #0:17 #f0000000 #ffffffff:28 #0:18 #ff000000 #ffffffff:27 #fffffff ]', ), 
    )), sectionName='web', thicknessAssignment=FROM_SECTION)
mdb.models['eigen-complete'].parts['panel'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    elements=mdb.models['eigen-complete'].parts['panel'].elements.getSequenceFromMask(
    mask=(
    '[#0:731 #ffffff00 #ffffffff:18 #0:28 #fffffff0 #ffffffff:17 #fffffff', 
    ' #0:28 #ffffffff:18 #ffffff #0:27 #f0000000 #ffffffff:18 #fffff ]', ), )), 
    sectionName='flange', thicknessAssignment=FROM_SECTION)
mdb.models['eigen-complete'].parts['panel'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    elements=mdb.models['eigen-complete'].parts['panel'].elements.getSequenceFromMask(
    mask=('[#0:703 #38e380 #0:26 #8e000000 #e3 #0:18 #38e38', 
    ' #0:26 #38e00000 #e #0:17 #80000000 #38e3 #0:26', 
    ' #e38e0000 #0:18 #38000000 #38e #0:26 #e38e000 ]', ), )), sectionName=
    'local-thickness', thicknessAssignment=FROM_SECTION)
# Save by sbonnell on 2025_09_09-15.15.52; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-complete'].rootAssembly.regenerate()
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
mdb.models['eigen-complete'].parts['panel'].editNode(coordinate2=0.0132275, 
    nodes=
    mdb.models['eigen-complete'].parts['panel'].nodes.getSequenceFromMask(
    mask=('[#0:38 #300 #0:13 #600000 #0:14 #c #0:13', ' #18000 ]', ), ))
# Save by sbonnell on 2025_09_09-15.17.20; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-complete'].rootAssembly.regenerate()
mdb.models['eigen-complete'].rootAssembly.Set(name='Load-Main', nodes=
    mdb.models['eigen-complete'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:38 #200 ]', ), ))
mdb.models['eigen-complete'].rootAssembly.Set(name='Load-Follower', nodes=
    mdb.models['eigen-complete'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:52 #400000 #0:14 #8 #0:13 #10000 ]', ), ))
mdb.models['eigen-complete'].rootAssembly.Set(name='Free-Edge-Main', nodes=
    mdb.models['eigen-complete'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#4 ]', ), ))
mdb.models['eigen-complete'].rootAssembly.Set(name='Free-Edge-Follower', nodes=
    mdb.models['eigen-complete'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#a62 #0:4 #fe000000 #3fffff #0:10 #fc000000 #7fffff', 
    ' #0:9 #c0000000 #7ffffff #0:4 #ffff0000 #1fff #0', ' #ffffff80 #f ]', ), 
    ))
mdb.models['eigen-complete'].rootAssembly.Set(name='Fixed-Edge-Main', nodes=
    mdb.models['eigen-complete'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#100 ]', ), ))
mdb.models['eigen-complete'].rootAssembly.Set(name='Fixed-Edge-Follower', 
    nodes=
    mdb.models['eigen-complete'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#499 #0:10 #fffff800 #ffffffff #1f #0:9 #fffff000', 
    ' #1ff #0:10 #ffffe000 #ffffffff #7f ]', ), ))
# Save by sbonnell on 2025_09_09-15.19.38; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-complete'].rootAssembly.Set(name='Web1-Main', nodes=
    mdb.models['eigen-complete'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#2 ]', ), ))
mdb.models['eigen-complete'].rootAssembly.Set(name='Web2-Main', nodes=
    mdb.models['eigen-complete'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#20 ]', ), ))
mdb.models['eigen-complete'].rootAssembly.Set(name='Web3-Main', nodes=
    mdb.models['eigen-complete'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#800 ]', ), ))
mdb.models['eigen-complete'].rootAssembly.Set(name='Web4-Main', nodes=
    mdb.models['eigen-complete'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#40 ]', ), ))
mdb.models['eigen-complete'].rootAssembly.Set(name='Web4-Follower', nodes=
    mdb.models['eigen-complete'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#3080 #0:37 #3ff0 ]', ), ))
mdb.models['eigen-complete'].rootAssembly.Set(name='Web3-Follower', nodes=
    mdb.models['eigen-complete'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#c0000400 #0:80 #1ff800 ]', ), ))
mdb.models['eigen-complete'].rootAssembly.Set(name='Web2-Follower', nodes=
    mdb.models['eigen-complete'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#c0010 #0:51 #7fe0000 ]', ), ))
mdb.models['eigen-complete'].rootAssembly.Set(name='Web1-Follower', nodes=
    mdb.models['eigen-complete'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#3000001 #0:65 #c0000000 #ff ]', ), ))
# Save by sbonnell on 2025_09_09-15.22.22; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-complete'].Equation(name='Free-Edge', terms=((1.0, 
    'Free-Edge-Follower', 1), (-1.0, 'Free-Edge-Main', 1)))
mdb.models['eigen-complete'].Equation(name='Fixed-Edge', terms=((1.0, 
    'Fixed-Edge-Follower', 1), (-1.0, 'Fixed-Edge-Main', 1)))
mdb.models['eigen-complete'].Equation(name='Load', terms=((1.0, 
    'Load-Follower', 1), (-1.0, 'Load-Main', 1)))
mdb.models['eigen-complete'].Equation(name='Web1', terms=((1.0, 
    'Web1-Follower', 2), (-1.0, 'Web1-Main', 2)))
mdb.models['eigen-complete'].Equation(name='Web2', terms=((1.0, 
    'Web2-Follower', 2), (-1.0, 'Web2-Main', 2)))
mdb.models['eigen-complete'].Equation(name='Web3', terms=((1.0, 
    'Web3-Follower', 2), (-1.0, 'Web3-Main', 2)))
mdb.models['eigen-complete'].Equation(name='Web4', terms=((1.0, 
    'Web4-Follower', 2), (-1.0, 'Web4-Main', 2)))
# Save by sbonnell on 2025_09_09-15.24.36; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-complete'].DisplacementBC(amplitude=UNSET, buckleCase=
    PERTURBATION_AND_BUCKLING, createStepName='buckle', distributionType=
    UNIFORM, fieldName='', fixed=OFF, localCsys=None, name='Edge', region=
    Region(
    nodes=mdb.models['eigen-complete'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#fff #0:4 #fe000000 #ffffffff:7 #1f #0:3 #fc000000', 
    ' #7fffff #0:4 #fffff000 #ffffffff:5 #7ffffff #0:4 #ffff0000', 
    ' #ffffffff:3 #f ]', ), )), u1=UNSET, u2=UNSET, u3=0.0, ur1=UNSET, ur2=
    UNSET, ur3=UNSET)
mdb.models['eigen-complete'].DisplacementBC(amplitude=UNSET, buckleCase=
    PERTURBATION_AND_BUCKLING, createStepName='buckle', distributionType=
    UNIFORM, fieldName='', fixed=OFF, localCsys=None, name='Centre', region=
    Region(
    nodes=mdb.models['eigen-complete'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:568 #800 ]', ), )), u1=UNSET, u2=0.0, u3=UNSET, ur1=UNSET, ur2=
    UNSET, ur3=UNSET)
mdb.models['eigen-complete'].DisplacementBC(amplitude=UNSET, buckleCase=
    PERTURBATION_AND_BUCKLING, createStepName='buckle', distributionType=
    UNIFORM, fieldName='', fixed=OFF, localCsys=None, name='End', region=
    Region(
    nodes=mdb.models['eigen-complete'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:38 #100 #0:13 #200000 #0:14 #4 #0:13', ' #8000 ]', ), )), u1=0.0
    , u2=UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
# Save by sbonnell on 2025_09_09-15.25.46; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen-complete'].ConcentratedForce(cf1=1000000.0, createStepName=
    'buckle', distributionType=UNIFORM, field='', localCsys=None, name='Load-1'
    , region=Region(
    nodes=mdb.models['eigen-complete'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:38 #200 ]', ), )))
# Save by sbonnell on 2025_09_09-15.26.24; build 2020 2019_09_13-10.49.31 163176
# Save by sbonnell on 2025_09_09-15.26.29; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='riks-complete', objectToCopy=mdb.models['eigen-complete'])
mdb.models['riks-complete'].StaticRiksStep(maintainAttributes=True, name=
    'buckle', nlgeom=ON, previous='Initial')
mdb.models['riks-complete'].steps.changeKey(fromName='buckle', toName='riks')
mdb.models['riks-complete'].steps['riks'].setValues(initialArcInc=0.01, 
    maxArcInc=1e+36, maxNumInc=50, minArcInc=1e-08, totalArcLength=30.0)
# Save by sbonnell on 2025_09_09-15.27.37; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='eigen-complete', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='eigen-complete', nodalOutputPrecision=
    SINGLE, numCpus=4, numDomains=4, numGPUs=4, queue=None, resultsFormat=ODB, 
    scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='riks-complete', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='riks-complete', nodalOutputPrecision=
    SINGLE, numCpus=4, numDomains=4, numGPUs=4, queue=None, resultsFormat=ODB, 
    scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
# Save by sbonnell on 2025_09_09-15.28.11; build 2020 2019_09_13-10.49.31 163176
