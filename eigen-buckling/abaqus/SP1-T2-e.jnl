# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.JobFromInputFile(atTime=None, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, inputFileName=
    'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\SP1-UC1-r.inp'
    , memory=90, memoryUnits=PERCENTAGE, multiprocessingMode=DEFAULT, name=
    'SP1-UC1-r', nodalOutputPrecision=SINGLE, numCpus=4, numDomains=4, numGPUs=
    4, queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, 
    userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['SP1-UC1-r'].submit(consistencyChecking=OFF)
mdb.jobs['SP1-UC1-r']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'ABAQUS Buckling Analysis Set', 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\SP1-UC1-r.odb', 
    'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 14640, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(STEP, {'stepName': 'Incremental', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'SP1-UC1-r', 'memory': 729.0})
mdb.jobs['SP1-UC1-r']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(MINIMUM_MEMORY, {'minimum_memory': 98.0, 
    'phase': STANDARD_PHASE, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0499850448048777, 'increment': 1, 'step': 1, 
    'jobName': 'SP1-UC1-r', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.0499850448048777, 'equilibrium': 2})
mdb.jobs['SP1-UC1-r']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0499545049782615, 'increment': 2, 'step': 1, 
    'jobName': 'SP1-UC1-r', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.0999395497831392, 'equilibrium': 2})
mdb.jobs['SP1-UC1-r']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.0748728628689293, 'increment': 3, 'step': 1, 
    'jobName': 'SP1-UC1-r', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.174812412652068, 'equilibrium': 2})
mdb.jobs['SP1-UC1-r']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.112171397616449, 'increment': 4, 'step': 1, 
    'jobName': 'SP1-UC1-r', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.286983810268517, 'equilibrium': 2})
mdb.jobs['SP1-UC1-r']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.167927682754066, 'increment': 5, 'step': 1, 
    'jobName': 'SP1-UC1-r', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.454911493022583, 'equilibrium': 2})
mdb.jobs['SP1-UC1-r']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.251080443613534, 'increment': 6, 'step': 1, 
    'jobName': 'SP1-UC1-r', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'lpf': 0.705991936636117, 'equilibrium': 2})
mdb.jobs['SP1-UC1-r']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.374530713740386, 'increment': 7, 'step': 1, 
    'jobName': 'SP1-UC1-r', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 1.0805226503765, 'equilibrium': 3})
mdb.jobs['SP1-UC1-r']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.556025025108814, 'increment': 8, 'step': 1, 
    'jobName': 'SP1-UC1-r', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 1.63654767548532, 'equilibrium': 3})
mdb.jobs['SP1-UC1-r']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.816379227298563, 'increment': 9, 'step': 1, 
    'jobName': 'SP1-UC1-r', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 2.45292690278388, 'equilibrium': 3})
mdb.jobs['SP1-UC1-r']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.16223729518296, 'increment': 10, 'step': 1, 
    'jobName': 'SP1-UC1-r', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 3.61516419796684, 'equilibrium': 3})
mdb.jobs['SP1-UC1-r']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.4934179555978, 'increment': 11, 'step': 1, 
    'jobName': 'SP1-UC1-r', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 5.10858215356465, 'equilibrium': 4})
mdb.jobs['SP1-UC1-r']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 1.41827274317956, 'increment': 12, 'step': 1, 
    'jobName': 'SP1-UC1-r', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 6.5268548967442, 'equilibrium': 4})
mdb.jobs['SP1-UC1-r']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.939688120858774, 'increment': 13, 'step': 1, 
    'jobName': 'SP1-UC1-r', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 7.46654301760298, 'equilibrium': 3})
mdb.jobs['SP1-UC1-r']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.608784542095568, 'increment': 14, 'step': 1, 
    'jobName': 'SP1-UC1-r', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'lpf': 8.07532755969854, 'equilibrium': 3})
mdb.jobs['SP1-UC1-r']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.456024559372443, 'increment': 15, 'step': 1, 
    'jobName': 'SP1-UC1-r', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 8.53135211907099, 'equilibrium': 4})
mdb.jobs['SP1-UC1-r']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.402141368394114, 'increment': 16, 'step': 1, 
    'jobName': 'SP1-UC1-r', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 8.9334934874651, 'equilibrium': 4})
mdb.jobs['SP1-UC1-r']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.399538505666016, 'increment': 17, 'step': 1, 
    'jobName': 'SP1-UC1-r', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 9.33303199313112, 'equilibrium': 4})
mdb.jobs['SP1-UC1-r']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.428437330370037, 'increment': 18, 'step': 1, 
    'jobName': 'SP1-UC1-r', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 9.76146932350115, 'equilibrium': 4})
mdb.jobs['SP1-UC1-r']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.488488258947307, 'increment': 19, 'step': 1, 
    'jobName': 'SP1-UC1-r', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 10.2499575824485, 'equilibrium': 4})
mdb.jobs['SP1-UC1-r']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.587499965162065, 'increment': 20, 'step': 1, 
    'jobName': 'SP1-UC1-r', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 10.8374575476105, 'equilibrium': 4})
mdb.jobs['SP1-UC1-r']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(STATUS, {'attempts': 1, 
    'incrementLPF': 0.710583617813838, 'increment': 21, 'step': 1, 
    'jobName': 'SP1-UC1-r', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'lpf': 11.5480411654244, 'equilibrium': 4})
mdb.jobs['SP1-UC1-r']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'SP1-UC1-r'})
mdb.jobs['SP1-UC1-r']._Message(JOB_COMPLETED, {
    'time': 'Mon Sep  8 16:29:13 2025', 'jobName': 'SP1-UC1-r'})
mdb.models.changeKey(fromName='Model-1', toName='eigen')
mdb.models['eigen'].Material(description='Isotropic steel', name='M1')
mdb.models['eigen'].materials['M1'].Density(table=((7850.0, ), ))
mdb.models['eigen'].materials['M1'].Elastic(table=((210000000000.0, 0.3), ))
mdb.models['eigen'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='M1', name='plate', nodalThicknessField=
    '', numIntPts=5, poissonDefinition=DEFAULT, preIntegrate=OFF, temperature=
    GRADIENT, thickness=0.01, thicknessField='', thicknessModulus=None, 
    thicknessType=UNIFORM, useDensity=OFF)
mdb.models['eigen'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='M1', name='web', nodalThicknessField='', 
    numIntPts=5, poissonDefinition=DEFAULT, preIntegrate=OFF, temperature=
    GRADIENT, thickness=0.0078, thicknessField='', thicknessModulus=None, 
    thicknessType=UNIFORM, useDensity=OFF)
mdb.models['eigen'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='M1', name='flange', nodalThicknessField=
    '', numIntPts=5, poissonDefinition=DEFAULT, preIntegrate=OFF, temperature=
    GRADIENT, thickness=0.0004, thicknessField='', thicknessModulus=None, 
    thicknessType=UNIFORM, useDensity=OFF)
mdb.models['eigen'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='M1', name='local-thickness', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=0.078, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['eigen'].ConstrainedSketch(name='__profile__', sheetSize=4.0)
mdb.models['eigen'].sketches['__profile__'].rectangle(point1=(-1.5, 1.5), 
    point2=(1.5, -1.5))
mdb.models['eigen'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['eigen'].parts['Part-1'].BaseShell(sketch=
    mdb.models['eigen'].sketches['__profile__'])
del mdb.models['eigen'].sketches['__profile__']
mdb.models['eigen'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.02)
mdb.models['eigen'].parts['Part-1'].generateMesh()
# Save by sbonnell on 2025_09_08-16.43.37; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen'].parts['Part-1'].PartFromMesh(copySets=True, name='panel')
mdb.models['eigen'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['eigen'].rootAssembly.Instance(dependent=ON, name='panel-1', part=
    mdb.models['eigen'].parts['panel'])
mdb.models['eigen'].rootAssembly.Set(name='Load-Main', nodes=
    mdb.models['eigen'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:4 #400000 ]', ), ))
mdb.models['eigen'].rootAssembly.Set(name='Load-Follower', nodes=
    mdb.models['eigen'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:9 #2000 #0:4 #10 #0:3 #8000000 #0:4', 
    ' #40000 #0:4 #200 #0:4 #1 #0:3 #800000', 
    ' #0:4 #4000 #0:4 #20 #0:3 #10000000 #0:4', 
    ' #80000 #0:4 #400 #0:4 #2 #0:3 #1000000', 
    ' #0:4 #8000 #0:4 #40 #0:3 #20000000 #0:4', 
    ' #100000 #0:4 #800 #0:4 #4 #0:3 #2000000', 
    ' #0:4 #10000 #0:4 #80 #0:3 #40000000 #0:4', 
    ' #200000 #0:4 #1000 #0:4 #8 #0:3 #4000000', 
    ' #0:4 #20000 #0:4 #100 #0:3 #80000000 #0:4', 
    ' #400000 #0:4 #2000 #0:4 #10 #0:3 #8000000', 
    ' #0:4 #40000 #0:4 #200 #0:4 #1 #0:3', 
    ' #800000 #0:4 #4000 #0:4 #20 #0:3 #10000000', 
    ' #0:4 #80000 #0:4 #400 #0:4 #2 #0:3', 
    ' #1000000 #0:4 #8000 #0:4 #40 #0:3 #20000000', 
    ' #0:4 #100000 #0:4 #800 #0:4 #4 #0:3', 
    ' #2000000 #0:4 #10000 #0:4 #80 #0:3 #40000000', 
    ' #0:4 #200000 #0:4 #1000 #0:4 #8 #0:3', 
    ' #4000000 #0:4 #20000 #0:4 #100 #0:3 #80000000', 
    ' #0:4 #400000 #0:4 #2000 #0:4 #10 #0:3', 
    ' #8000000 #0:4 #40000 #0:4 #200 #0:4 #1', 
    ' #0:3 #800000 #0:4 #4000 #0:4 #20 #0:3', 
    ' #10000000 #0:4 #80000 #0:4 #400 #0:4 #2', 
    ' #0:3 #1000000 #0:4 #8000 #0:4 #40 #0:3', 
    ' #20000000 #0:4 #100000 #0:4 #800 #0:4 #4', 
    ' #0:3 #2000000 #0:4 #10000 #0:4 #80 #0:3', 
    ' #40000000 #0:4 #200000 #0:4 #1000 #0:4 #8', 
    ' #0:3 #4000000 #0:4 #20000 #0:4 #100 #0:3', 
    ' #80000000 #0:4 #400000 #0:4 #2000 #0:4 #10', 
    ' #0:3 #8000000 #0:4 #40000 #0:4 #200 #0:4', 
    ' #1 #0:3 #800000 #0:4 #4000 #0:4 #20', 
    ' #0:3 #10000000 #0:4 #80000 #0:4 #400 #0:4', 
    ' #2 #0:3 #1000000 #0:4 #8000 #0:4 #40', 
    ' #0:3 #20000000 #0:4 #100000 #0:4 #800 #0:4', 
    ' #4 #0:3 #2000000 #0:4 #10000 #0:4 #80', 
    ' #0:3 #40000000 #0:4 #200000 #0:4 #1000 #0:4', 
    ' #8 #0:3 #4000000 #0:4 #20000 #0:4 #100', 
    ' #0:3 #80000000 #0:4 #400000 #0:4 #2000 #0:4', 
    ' #10 #0:3 #8000000 #0:4 #40000 #0:4 #200', 
    ' #0:4 #1 #0:3 #800000 #0:4 #4000 #0:4', 
    ' #20 #0:3 #10000000 #0:4 #80000 #0:4 #400', 
    ' #0:4 #2 #0:3 #1000000 #0:4 #8000 #0:4', 
    ' #40 #0:3 #20000000 #0:4 #100000 #0:4 #800', 
    ' #0:4 #4 #0:3 #2000000 #0:4 #10000 ]', ), ))
mdb.models['eigen'].Equation(name='End-Link', terms=((1.0, 'Load-Follower', 1), 
    (-1.0, 'Load-Main', 1)))
mdb.models['eigen'].parts['panel'].SectionAssignment(offset=0.0, offsetField=''
    , offsetType=MIDDLE_SURFACE, region=Region(
    elements=mdb.models['eigen'].parts['panel'].elements.getSequenceFromMask(
    mask=('[#ffffffff:703 #f ]', ), )), sectionName='plate', 
    thicknessAssignment=FROM_SECTION)
# Save by sbonnell on 2025_09_08-16.46.06; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='riks', objectToCopy=mdb.models['eigen'])
mdb.models['eigen'].rootAssembly.regenerate()
mdb.models['eigen'].BuckleStep(name='buckle', numEigen=5, previous='Initial', 
    vectors=10)
mdb.models['eigen'].ConcentratedForce(cf1=1000000.0, createStepName='buckle', 
    distributionType=UNIFORM, field='', localCsys=None, name='Load-1', region=
    Region(
    nodes=mdb.models['eigen'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:358 #80000 ]', ), )))
mdb.models['eigen'].DisplacementBC(amplitude=UNSET, buckleCase=
    PERTURBATION_AND_BUCKLING, createStepName='buckle', distributionType=
    UNIFORM, fieldName='', fixed=OFF, localCsys=None, name='Edge', region=
    Region(
    nodes=mdb.models['eigen'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#ffffffff:4 #ffffff #0:4 #6000 #0:4 #30 #0:3', 
    ' #18000000 #0:4 #c0000 #0:4 #600 #0:4 #3', 
    ' #0:3 #1800000 #0:4 #c000 #0:4 #60 #0:3', 
    ' #30000000 #0:4 #180000 #0:4 #c00 #0:4 #6', 
    ' #0:3 #3000000 #0:4 #18000 #0:4 #c0 #0:3', 
    ' #60000000 #0:4 #300000 #0:4 #1800 #0:4 #c', 
    ' #0:3 #6000000 #0:4 #30000 #0:4 #180 #0:3', 
    ' #c0000000 #0:4 #600000 #0:4 #3000 #0:4 #18', 
    ' #0:3 #c000000 #0:4 #60000 #0:4 #300 #0:3', 
    ' #80000000 #1 #0:3 #c00000 #0:4 #6000 #0:4', 
    ' #30 #0:3 #18000000 #0:4 #c0000 #0:4 #600', 
    ' #0:4 #3 #0:3 #1800000 #0:4 #c000 #0:4', 
    ' #60 #0:3 #30000000 #0:4 #180000 #0:4 #c00', 
    ' #0:4 #6 #0:3 #3000000 #0:4 #18000 #0:4', 
    ' #c0 #0:3 #60000000 #0:4 #300000 #0:4 #1800', 
    ' #0:4 #c #0:3 #6000000 #0:4 #30000 #0:4', 
    ' #180 #0:3 #c0000000 #0:4 #600000 #0:4 #3000', 
    ' #0:4 #18 #0:3 #c000000 #0:4 #60000 #0:4', 
    ' #300 #0:3 #80000000 #1 #0:3 #c00000 #0:4', 
    ' #6000 #0:4 #30 #0:3 #18000000 #0:4 #c0000', 
    ' #0:4 #600 #0:4 #3 #0:3 #1800000 #0:4', 
    ' #c000 #0:4 #60 #0:3 #30000000 #0:4 #180000', 
    ' #0:4 #c00 #0:4 #6 #0:3 #3000000 #0:4', 
    ' #18000 #0:4 #c0 #0:3 #60000000 #0:4 #300000', 
    ' #0:4 #1800 #0:4 #c #0:3 #6000000 #0:4', 
    ' #30000 #0:4 #180 #0:3 #c0000000 #0:4 #600000', 
    ' #0:4 #3000 #0:4 #18 #0:3 #c000000 #0:4', 
    ' #60000 #0:4 #300 #0:3 #80000000 #1 #0:3', 
    ' #c00000 #0:4 #6000 #0:4 #30 #0:3 #18000000', 
    ' #0:4 #c0000 #0:4 #600 #0:4 #3 #0:3', 
    ' #1800000 #0:4 #c000 #0:4 #60 #0:3 #30000000', 
    ' #0:4 #180000 #0:4 #c00 #0:4 #6 #0:3', 
    ' #3000000 #0:4 #18000 #0:4 #c0 #0:3 #60000000', 
    ' #0:4 #300000 #0:4 #1800 #0:4 #c #0:3', 
    ' #6000000 #0:4 #30000 #0:4 #180 #0:3 #c0000000', 
    ' #0:4 #600000 #0:4 #3000 #0:4 #18 #0:3', 
    ' #c000000 #0:4 #60000 #0:4 #300 #0:3 #80000000', 
    ' #1 #0:3 #c00000 #0:4 #6000 #0:4 #30', 
    ' #0:3 #18000000 #0:4 #c0000 #0:4 #600 #0:4', 
    ' #3 #0:3 #1800000 #0:4 #c000 #0:4 #60', 
    ' #0:3 #30000000 #0:4 #180000 #0:4 #c00 #0:4', 
    ' #6 #0:3 #3000000 #0:4 #18000 #0:4 #c0', 
    ' #0:3 #60000000 #0:4 #300000 #0:4 #1800 #0:4', 
    ' #c #0:3 #fe000000 #ffffffff:4 #1ffff ]', ), )), u1=UNSET, u2=UNSET, u3=
    0.0, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['eigen'].DisplacementBC(amplitude=UNSET, buckleCase=
    PERTURBATION_AND_BUCKLING, createStepName='buckle', distributionType=
    UNIFORM, fieldName='', fixed=OFF, localCsys=None, name='Centre', region=
    Region(
    nodes=mdb.models['eigen'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:356 #100 ]', ), )), u1=UNSET, u2=0.0, u3=UNSET, ur1=UNSET, ur2=
    UNSET, ur3=UNSET)
mdb.models['eigen'].DisplacementBC(amplitude=UNSET, buckleCase=
    PERTURBATION_AND_BUCKLING, createStepName='buckle', distributionType=
    UNIFORM, fieldName='', fixed=OFF, localCsys=None, name='End', region=
    Region(
    nodes=mdb.models['eigen'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#1 #0:3 #800000 #0:4 #4000 #0:4 #20', 
    ' #0:3 #10000000 #0:4 #80000 #0:4 #400 #0:4', 
    ' #2 #0:3 #1000000 #0:4 #8000 #0:4 #40', 
    ' #0:3 #20000000 #0:4 #100000 #0:4 #800 #0:4', 
    ' #4 #0:3 #2000000 #0:4 #10000 #0:4 #80', 
    ' #0:3 #40000000 #0:4 #200000 #0:4 #1000 #0:4', 
    ' #8 #0:3 #4000000 #0:4 #20000 #0:4 #100', 
    ' #0:3 #80000000 #0:4 #400000 #0:4 #2000 #0:4', 
    ' #10 #0:3 #8000000 #0:4 #40000 #0:4 #200', 
    ' #0:4 #1 #0:3 #800000 #0:4 #4000 #0:4', 
    ' #20 #0:3 #10000000 #0:4 #80000 #0:4 #400', 
    ' #0:4 #2 #0:3 #1000000 #0:4 #8000 #0:4', 
    ' #40 #0:3 #20000000 #0:4 #100000 #0:4 #800', 
    ' #0:4 #4 #0:3 #2000000 #0:4 #10000 #0:4', 
    ' #80 #0:3 #40000000 #0:4 #200000 #0:4 #1000', 
    ' #0:4 #8 #0:3 #4000000 #0:4 #20000 #0:4', 
    ' #100 #0:3 #80000000 #0:4 #400000 #0:4 #2000', 
    ' #0:4 #10 #0:3 #8000000 #0:4 #40000 #0:4', 
    ' #200 #0:4 #1 #0:3 #800000 #0:4 #4000', 
    ' #0:4 #20 #0:3 #10000000 #0:4 #80000 #0:4', 
    ' #400 #0:4 #2 #0:3 #1000000 #0:4 #8000', 
    ' #0:4 #40 #0:3 #20000000 #0:4 #100000 #0:4', 
    ' #800 #0:4 #4 #0:3 #2000000 #0:4 #10000', 
    ' #0:4 #80 #0:3 #40000000 #0:4 #200000 #0:4', 
    ' #1000 #0:4 #8 #0:3 #4000000 #0:4 #20000', 
    ' #0:4 #100 #0:3 #80000000 #0:4 #400000 #0:4', 
    ' #2000 #0:4 #10 #0:3 #8000000 #0:4 #40000', 
    ' #0:4 #200 #0:4 #1 #0:3 #800000 #0:4', 
    ' #4000 #0:4 #20 #0:3 #10000000 #0:4 #80000', 
    ' #0:4 #400 #0:4 #2 #0:3 #1000000 #0:4', 
    ' #8000 #0:4 #40 #0:3 #20000000 #0:4 #100000', 
    ' #0:4 #800 #0:4 #4 #0:3 #2000000 #0:4', 
    ' #10000 #0:4 #80 #0:3 #40000000 #0:4 #200000', 
    ' #0:4 #1000 #0:4 #8 #0:3 #4000000 #0:4', 
    ' #20000 #0:4 #100 #0:3 #80000000 #0:4 #400000', 
    ' #0:4 #2000 #0:4 #10 #0:3 #8000000 #0:4', 
    ' #40000 #0:4 #200 #0:4 #1 #0:3 #800000', 
    ' #0:4 #4000 #0:4 #20 #0:3 #10000000 #0:4', 
    ' #80000 #0:4 #400 #0:4 #2 #0:3 #1000000', 
    ' #0:4 #8000 #0:4 #40 #0:3 #20000000 #0:4', 
    ' #100000 #0:4 #800 #0:4 #4 #0:3 #2000000', 
    ' #0:4 #10000 #0:4 #80 #0:3 #40000000 #0:4', 
    ' #200000 #0:4 #1000 #0:4 #8 #0:3 #4000000 ]', ), )), u1=0.0, u2=UNSET, u3=
    UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
# Save by sbonnell on 2025_09_08-16.53.07; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.jobs['SP1-UC1-r']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='eigen', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='SP1-T2-e', nodalOutputPrecision=SINGLE, 
    numCpus=4, numDomains=4, numGPUs=4, queue=None, resultsFormat=ODB, scratch=
    '', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['SP1-T2-e'].submit(consistencyChecking=OFF)
mdb.jobs['SP1-T2-e']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 0, 'jobName': 'SP1-T2-e'})
mdb.jobs['SP1-T2-e']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'BUCKLE OPTION IS NOT SUPPORTED FOR ELEMENT LOOP PARALLELIZATION. IF YOU HAVE SPECIFIED ELEMENT LOOP PARALLELIZATION, IT WILL BE TURNED OFF FOR THIS ANALYSIS.', 
    'jobName': 'SP1-T2-e'})
mdb.jobs['SP1-T2-e']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\sbonnell\\Desktop\\lase\\projects\\ultimate-strength\\eigen-buckling\\abaqus\\SP1-T2-e.odb', 
    'jobName': 'SP1-T2-e'})
mdb.jobs['SP1-T2-e']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'SP1-T2-e'})
mdb.jobs['SP1-T2-e']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'APSD-CDW-MEC198', 'handle': 12672, 'jobName': 'SP1-T2-e'})
mdb.jobs['SP1-T2-e']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'SP1-T2-e'})
mdb.jobs['SP1-T2-e']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'SP1-T2-e'})
mdb.jobs['SP1-T2-e']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'SP1-T2-e', 'memory': 464.0})
mdb.jobs['SP1-T2-e']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'SP1-T2-e'})
mdb.jobs['SP1-T2-e']._Message(MINIMUM_MEMORY, {'minimum_memory': 77.0, 
    'phase': STANDARD_PHASE, 'jobName': 'SP1-T2-e'})
mdb.jobs['SP1-T2-e']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'SP1-T2-e', 'memory': 480.0})
mdb.jobs['SP1-T2-e']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'SP1-T2-e'})
mdb.jobs['SP1-T2-e']._Message(MINIMUM_MEMORY, {'minimum_memory': 77.0, 
    'phase': STANDARD_PHASE, 'jobName': 'SP1-T2-e'})
mdb.jobs['SP1-T2-e']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'SP1-T2-e'})
mdb.jobs['SP1-T2-e']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'SP1-T2-e'})
mdb.jobs['SP1-T2-e']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'SP1-T2-e'})
mdb.jobs['SP1-T2-e']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'SP1-T2-e'})
mdb.jobs['SP1-T2-e']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'SP1-T2-e'})
mdb.jobs['SP1-T2-e']._Message(STATUS, {'totalTime': 0.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 1, 
    'jobName': 'SP1-T2-e', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['SP1-T2-e']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'SP1-T2-e'})
mdb.jobs['SP1-T2-e']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'SP1-T2-e'})
mdb.jobs['SP1-T2-e']._Message(JOB_COMPLETED, {
    'time': 'Mon Sep  8 16:57:46 2025', 'jobName': 'SP1-T2-e'})
mdb.models['riks'].rootAssembly.regenerate()
mdb.models['riks'].StaticRiksStep(maxNumInc=500, name='riks', previous=
    'Initial')
mdb.models['riks'].ConcentratedForce(cf1=1000000.0, createStepName='riks', 
    distributionType=UNIFORM, field='', localCsys=None, name='Load-1', region=
    Region(
    nodes=mdb.models['riks'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:358 #80000 ]', ), )))
mdb.models['riks'].DisplacementBC(amplitude=UNSET, createStepName='riks', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'Edge', region=Region(
    nodes=mdb.models['riks'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#ffffffff:4 #ffffff #0:4 #6000 #0:4 #30 #0:3', 
    ' #18000000 #0:4 #c0000 #0:4 #600 #0:4 #3', 
    ' #0:3 #1800000 #0:4 #c000 #0:4 #60 #0:3', 
    ' #30000000 #0:4 #180000 #0:4 #c00 #0:4 #6', 
    ' #0:3 #3000000 #0:4 #18000 #0:4 #c0 #0:3', 
    ' #60000000 #0:4 #300000 #0:4 #1800 #0:4 #c', 
    ' #0:3 #6000000 #0:4 #30000 #0:4 #180 #0:3', 
    ' #c0000000 #0:4 #600000 #0:4 #3000 #0:4 #18', 
    ' #0:3 #c000000 #0:4 #60000 #0:4 #300 #0:3', 
    ' #80000000 #1 #0:3 #c00000 #0:4 #6000 #0:4', 
    ' #30 #0:3 #18000000 #0:4 #c0000 #0:4 #600', 
    ' #0:4 #3 #0:3 #1800000 #0:4 #c000 #0:4', 
    ' #60 #0:3 #30000000 #0:4 #180000 #0:4 #c00', 
    ' #0:4 #6 #0:3 #3000000 #0:4 #18000 #0:4', 
    ' #c0 #0:3 #60000000 #0:4 #300000 #0:4 #1800', 
    ' #0:4 #c #0:3 #6000000 #0:4 #30000 #0:4', 
    ' #180 #0:3 #c0000000 #0:4 #600000 #0:4 #3000', 
    ' #0:4 #18 #0:3 #c000000 #0:4 #60000 #0:4', 
    ' #300 #0:3 #80000000 #1 #0:3 #c00000 #0:4', 
    ' #6000 #0:4 #30 #0:3 #18000000 #0:4 #c0000', 
    ' #0:4 #600 #0:4 #3 #0:3 #1800000 #0:4', 
    ' #c000 #0:4 #60 #0:3 #30000000 #0:4 #180000', 
    ' #0:4 #c00 #0:4 #6 #0:3 #3000000 #0:4', 
    ' #18000 #0:4 #c0 #0:3 #60000000 #0:4 #300000', 
    ' #0:4 #1800 #0:4 #c #0:3 #6000000 #0:4', 
    ' #30000 #0:4 #180 #0:3 #c0000000 #0:4 #600000', 
    ' #0:4 #3000 #0:4 #18 #0:3 #c000000 #0:4', 
    ' #60000 #0:4 #300 #0:3 #80000000 #1 #0:3', 
    ' #c00000 #0:4 #6000 #0:4 #30 #0:3 #18000000', 
    ' #0:4 #c0000 #0:4 #600 #0:4 #3 #0:3', 
    ' #1800000 #0:4 #c000 #0:4 #60 #0:3 #30000000', 
    ' #0:4 #180000 #0:4 #c00 #0:4 #6 #0:3', 
    ' #3000000 #0:4 #18000 #0:4 #c0 #0:3 #60000000', 
    ' #0:4 #300000 #0:4 #1800 #0:4 #c #0:3', 
    ' #6000000 #0:4 #30000 #0:4 #180 #0:3 #c0000000', 
    ' #0:4 #600000 #0:4 #3000 #0:4 #18 #0:3', 
    ' #c000000 #0:4 #60000 #0:4 #300 #0:3 #80000000', 
    ' #1 #0:3 #c00000 #0:4 #6000 #0:4 #30', 
    ' #0:3 #18000000 #0:4 #c0000 #0:4 #600 #0:4', 
    ' #3 #0:3 #1800000 #0:4 #c000 #0:4 #60', 
    ' #0:3 #30000000 #0:4 #180000 #0:4 #c00 #0:4', 
    ' #6 #0:3 #3000000 #0:4 #18000 #0:4 #c0', 
    ' #0:3 #60000000 #0:4 #300000 #0:4 #1800 #0:4', 
    ' #c #0:3 #fe000000 #ffffffff:4 #1ffff ]', ), )), u1=UNSET, u2=UNSET, u3=
    0.0, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['riks'].DisplacementBC(amplitude=UNSET, createStepName='riks', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'Centre', region=Region(
    nodes=mdb.models['riks'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:356 #100 ]', ), )), u1=UNSET, u2=0.0, u3=UNSET, ur1=UNSET, ur2=
    UNSET, ur3=UNSET)
mdb.models['riks'].DisplacementBC(amplitude=UNSET, createStepName='riks', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'End', region=Region(
    nodes=mdb.models['riks'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#1 #0:3 #800000 #0:4 #4000 #0:4 #20', 
    ' #0:3 #10000000 #0:4 #80000 #0:4 #400 #0:4', 
    ' #2 #0:3 #1000000 #0:4 #8000 #0:4 #40', 
    ' #0:3 #20000000 #0:4 #100000 #0:4 #800 #0:4', 
    ' #4 #0:3 #2000000 #0:4 #10000 #0:4 #80', 
    ' #0:3 #40000000 #0:4 #200000 #0:4 #1000 #0:4', 
    ' #8 #0:3 #4000000 #0:4 #20000 #0:4 #100', 
    ' #0:3 #80000000 #0:4 #400000 #0:4 #2000 #0:4', 
    ' #10 #0:3 #8000000 #0:4 #40000 #0:4 #200', 
    ' #0:4 #1 #0:3 #800000 #0:4 #4000 #0:4', 
    ' #20 #0:3 #10000000 #0:4 #80000 #0:4 #400', 
    ' #0:4 #2 #0:3 #1000000 #0:4 #8000 #0:4', 
    ' #40 #0:3 #20000000 #0:4 #100000 #0:4 #800', 
    ' #0:4 #4 #0:3 #2000000 #0:4 #10000 #0:4', 
    ' #80 #0:3 #40000000 #0:4 #200000 #0:4 #1000', 
    ' #0:4 #8 #0:3 #4000000 #0:4 #20000 #0:4', 
    ' #100 #0:3 #80000000 #0:4 #400000 #0:4 #2000', 
    ' #0:4 #10 #0:3 #8000000 #0:4 #40000 #0:4', 
    ' #200 #0:4 #1 #0:3 #800000 #0:4 #4000', 
    ' #0:4 #20 #0:3 #10000000 #0:4 #80000 #0:4', 
    ' #400 #0:4 #2 #0:3 #1000000 #0:4 #8000', 
    ' #0:4 #40 #0:3 #20000000 #0:4 #100000 #0:4', 
    ' #800 #0:4 #4 #0:3 #2000000 #0:4 #10000', 
    ' #0:4 #80 #0:3 #40000000 #0:4 #200000 #0:4', 
    ' #1000 #0:4 #8 #0:3 #4000000 #0:4 #20000', 
    ' #0:4 #100 #0:3 #80000000 #0:4 #400000 #0:4', 
    ' #2000 #0:4 #10 #0:3 #8000000 #0:4 #40000', 
    ' #0:4 #200 #0:4 #1 #0:3 #800000 #0:4', 
    ' #4000 #0:4 #20 #0:3 #10000000 #0:4 #80000', 
    ' #0:4 #400 #0:4 #2 #0:3 #1000000 #0:4', 
    ' #8000 #0:4 #40 #0:3 #20000000 #0:4 #100000', 
    ' #0:4 #800 #0:4 #4 #0:3 #2000000 #0:4', 
    ' #10000 #0:4 #80 #0:3 #40000000 #0:4 #200000', 
    ' #0:4 #1000 #0:4 #8 #0:3 #4000000 #0:4', 
    ' #20000 #0:4 #100 #0:3 #80000000 #0:4 #400000', 
    ' #0:4 #2000 #0:4 #10 #0:3 #8000000 #0:4', 
    ' #40000 #0:4 #200 #0:4 #1 #0:3 #800000', 
    ' #0:4 #4000 #0:4 #20 #0:3 #10000000 #0:4', 
    ' #80000 #0:4 #400 #0:4 #2 #0:3 #1000000', 
    ' #0:4 #8000 #0:4 #40 #0:3 #20000000 #0:4', 
    ' #100000 #0:4 #800 #0:4 #4 #0:3 #2000000', 
    ' #0:4 #10000 #0:4 #80 #0:3 #40000000 #0:4', 
    ' #200000 #0:4 #1000 #0:4 #8 #0:3 #4000000 ]', ), )), u1=0.0, u2=UNSET, u3=
    UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
# Save by sbonnell on 2025_09_08-17.01.22; build 2020 2019_09_13-10.49.31 163176
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='riks', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='SP1-T2-r', nodalOutputPrecision=SINGLE, 
    numCpus=4, numDomains=4, numGPUs=4, queue=None, resultsFormat=ODB, scratch=
    '', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models.changeKey(fromName='eigen', toName='eigen-plate')
mdb.models.changeKey(fromName='riks', toName='riks-plate')
# Save by sbonnell on 2025_09_08-17.48.58; build 2020 2019_09_13-10.49.31 163176
