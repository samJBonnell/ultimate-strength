# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=4.0)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-1.5, 0.0), point2=(
    1.5, 0.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-1'].BaseShellExtrude(depth=3.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].Material(description='Isotropic Steel', name='M1')
mdb.models['Model-1'].materials['M1'].Density(table=((7850.0, ), ))
mdb.models['Model-1'].materials['M1'].Elastic(table=((210000000000.0, 0.3), ))
mdb.models['Model-1'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='M1', name='plate', nodalThicknessField=
    '', numIntPts=5, poissonDefinition=DEFAULT, preIntegrate=OFF, temperature=
    GRADIENT, thickness=0.01, thicknessField='', thicknessModulus=None, 
    thicknessType=UNIFORM, useDensity=OFF)
mdb.models['Model-1'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.02)
mdb.models['Model-1'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=S4R, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    hourglassControl=DEFAULT), ElemType(elemCode=S3, elemLibrary=STANDARD)), 
    regions=(mdb.models['Model-1'].parts['Part-1'].faces.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Part-1'].generateMesh()
# Save by sambonnell on 2025_09_05-19.16.51; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Part-1-1', 
    part=mdb.models['Model-1'].parts['Part-1'])
mdb.models['Model-1'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 1.0, 
    0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('Part-1-1', ))
mdb.models['Model-1'].rootAssembly.rotate(angle=90.0, axisDirection=(1.0, 0.0, 
    0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('Part-1-1', ))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('Part-1-1', ), 
    vector=(-1.5, 0.0, 0.0))
# Save by sambonnell on 2025_09_05-19.18.39; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].BuckleStep(name='eigen', numEigen=5, previous='Initial', 
    vectors=10)
# Save by sambonnell on 2025_09_05-19.22.02; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ShellEdgeLoad(createStepName='eigen', distributionType=
    UNIFORM, field='', localCsys=None, magnitude=1000000.0, name='Load-1', 
    region=Region(
    side1Edges=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#4 ]', ), )))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, buckleCase=
    PERTURBATION_AND_BUCKLING, createStepName='eigen', distributionType=UNIFORM
    , fieldName='', fixed=OFF, localCsys=None, name='BC-1', region=Region(
    edges=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#f ]', ), )), u1=UNSET, u2=UNSET, u3=0.0, ur1=UNSET, ur2=UNSET, 
    ur3=UNSET)
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, buckleCase=
    PERTURBATION_AND_BUCKLING, createStepName='eigen', distributionType=UNIFORM
    , fieldName='', fixed=OFF, localCsys=None, name='BC-2', region=Region(
    edges=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), u1=0.0, u2=UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, 
    ur3=UNSET)
mdb.models['Model-1'].rootAssembly.Set(name='Set-1', nodes=
    mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0:356 #100 ]', ), ))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, buckleCase=
    PERTURBATION_AND_BUCKLING, createStepName='eigen', distributionType=UNIFORM
    , fieldName='', fixed=OFF, localCsys=None, name='BC-3', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-1'], u1=UNSET, u2=0.0, u3=
    UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=4, numDomains=4, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs.changeKey(fromName='Job-1', toName='SP1-T1-e')
mdb.models['Model-1'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    faces=mdb.models['Model-1'].parts['Part-1'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='plate', thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models.changeKey(fromName='Model-1', toName='eigen')
mdb.Model(name='riks', objectToCopy=mdb.models['eigen'])
del mdb.jobs['SP1-T1-e']
del mdb.models['riks'].steps['eigen']
mdb.models['riks'].StaticStep(name='riks', nlgeom=ON, previous='Initial')
mdb.models['riks'].ShellEdgeLoad(createStepName='riks', distributionType=
    UNIFORM, field='', localCsys=None, magnitude=1000000.0, name='Load-1', 
    region=Region(
    side1Edges=mdb.models['riks'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#4 ]', ), )))
mdb.models['riks'].DisplacementBC(amplitude=UNSET, createStepName='riks', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-1', region=Region(
    edges=mdb.models['riks'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#f ]', ), )), u1=UNSET, u2=UNSET, u3=0.0, ur1=UNSET, ur2=UNSET, 
    ur3=UNSET)
mdb.models['riks'].DisplacementBC(amplitude=UNSET, createStepName='riks', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-2', region=Region(
    edges=mdb.models['riks'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), u1=0.0, u2=UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, 
    ur3=UNSET)
mdb.models['riks'].DisplacementBC(amplitude=UNSET, createStepName='riks', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-3', region=mdb.models['riks'].rootAssembly.sets['Set-1'], u1=UNSET, u2=
    0.0, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='eigen', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='SP1-T1-e', nodalOutputPrecision=SINGLE, 
    numCpus=4, numDomains=4, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
# Save by sambonnell on 2025_09_07-19.52.12; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='riks', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='ST1-T1-r', nodalOutputPrecision=SINGLE, 
    numCpus=4, numDomains=4, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs.changeKey(fromName='ST1-T1-r', toName='SP1-T1-r')
mdb.models['riks'].steps['riks'].setValues(maxInc=1.0, maxNumInc=500)
mdb.models['riks'].steps['riks'].setValues(initialInc=0.0001)
# Save by sambonnell on 2025_09_07-20.04.05; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen'].parts['Part-1'].Set(name='Master', nodes=
    mdb.models['eigen'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#ffffffff:4 #7fffff ]', ), ))
mdb.models['eigen'].parts['Part-1'].Set(name='Master', nodes=
    mdb.models['eigen'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#ffffffff:4 #3fffff ]', ), ))
mdb.models['eigen'].parts['Part-1'].sets.changeKey(fromName='Master', toName=
    'Follower')
mdb.models['eigen'].parts['Part-1'].Set(name='Main', nodes=
    mdb.models['eigen'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#0:4 #400000 ]', ), ))
mdb.models['eigen'].rootAssembly.regenerate()
mdb.models['eigen'].Equation(name='Constraint-1', terms=((1.0, 
    'Part-1-1.Follower', 1), (-1.0, 'Part-1-1.Main', 1)))
mdb.models['eigen'].parts['Part-1'].Set(name='Follower', nodes=
    mdb.models['eigen'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#0:707 #f8000000 #ffffffff:4 #1ffff ]', ), ))
mdb.models['eigen'].parts['Part-1'].Set(name='Main', nodes=
    mdb.models['eigen'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#0:707 #4000000 ]', ), ))
# Save by sambonnell on 2025_09_07-20.26.08; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['eigen'].rootAssembly.regenerate()
mdb.models['riks'].parts['Part-1'].Set(name='Main', nodes=
    mdb.models['riks'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#0:712 #10000 ]', ), ))
mdb.models['riks'].parts['Part-1'].Set(name='Follower', nodes=
    mdb.models['riks'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#0:4 #400000 #0:4 #2000 #0:4 #10 #0:3', 
    ' #8000000 #0:4 #40000 #0:4 #200 #0:4 #1', 
    ' #0:3 #800000 #0:4 #4000 #0:4 #20 #0:3', 
    ' #10000000 #0:4 #80000 #0:4 #400 #0:4 #2', 
    ' #0:3 #1000000 #0:4 #8000 #0:4 #40 #0:3', 
    ' #20000000 #0:4 #100000 #0:4 #800 #0:4 #4', 
    ' #0:3 #2000000 #0:4 #10000 #0:4 #80 #0:3', 
    ' #40000000 #0:4 #200000 #0:4 #1000 #0:4 #8', 
    ' #0:3 #4000000 #0:4 #20000 #0:4 #100 #0:3', 
    ' #80000000 #0:4 #400000 #0:4 #2000 #0:4 #10', 
    ' #0:3 #8000000 #0:4 #40000 #0:4 #200 #0:4', 
    ' #1 #0:3 #800000 #0:4 #4000 #0:4 #20', 
    ' #0:3 #10000000 #0:4 #80000 #0:4 #400 #0:4', 
    ' #2 #0:3 #1000000 #0:4 #8000 #0:4 #40', 
    ' #0:3 #20000000 #0:4 #100000 #0:4 #800 #0:4', 
    ' #4 #0:3 #2000000 #0:4 #10000 #0:4 #80', 
    ' #0:3 #40000000 #0:4 #200000 #0:4 #1000 #0:4', 
    ' #8 #0:3 #4000000 #0:4 #20000 #0:4 #100', 
    ' #0:3 #80000000 #0:4 #400000 #0:4 #2000 #0:4', 
    ' #10 #0:3 #8000000 #0:4 #40000 #0:4 #200', 
    ' #0:4 #1 #0:3 #800000 #0:4 #4000 #0:4', 
    ' #20 #0:3 #10000000 #0:4 #80000 #0:4 #400', 
    ' #0:4 #2 #0:3 #1000000 #0:4 #8000 #0:4', 
    ' #40 #0:3 #20000000 #0:4 #100000 #0:4 #800', 
    ' #0:4 #4 #0:3 #2000000 #0:4 #10000 #0:4', 
    ' #80 #0:3 #40000000 #0:4 #200000 #0:4 #1000', 
    ' #0:4 #8 #0:3 #4000000 #0:4 #20000 #0:4', 
    ' #100 #0:3 #80000000 #0:4 #400000 #0:4 #2000', 
    ' #0:4 #10 #0:3 #8000000 #0:4 #40000 #0:4', 
    ' #200 #0:4 #1 #0:3 #800000 #0:4 #4000', 
    ' #0:4 #20 #0:3 #10000000 #0:4 #80000 #0:4', 
    ' #400 #0:4 #2 #0:3 #1000000 #0:4 #8000', 
    ' #0:4 #40 #0:3 #20000000 #0:4 #100000 #0:4', 
    ' #800 #0:4 #4 #0:3 #2000000 #0:4 #10000', 
    ' #0:4 #80 #0:3 #40000000 #0:4 #200000 #0:4', 
    ' #1000 #0:4 #8 #0:3 #4000000 #0:4 #20000', 
    ' #0:4 #100 #0:3 #80000000 #0:4 #400000 #0:4', 
    ' #2000 #0:4 #10 #0:3 #8000000 #0:4 #40000', 
    ' #0:4 #200 #0:4 #1 #0:3 #800000 #0:4', 
    ' #4000 #0:4 #20 #0:3 #10000000 #0:4 #80000', 
    ' #0:4 #400 #0:4 #2 #0:3 #1000000 #0:4', 
    ' #8000 #0:4 #40 #0:3 #20000000 #0:4 #100000', 
    ' #0:4 #800 #0:4 #4 #0:3 #2000000 ]', ), ))
# Save by sambonnell on 2025_09_07-20.27.18; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['riks'].rootAssembly.regenerate()
mdb.models['riks'].Equation(name='Constraint-1', terms=((1.0, 
    'Part-1-1.Follower', 1), (-1.0, 'Part-1-1.Main', 1)))
del mdb.models['riks'].constraints['Constraint-1']
del mdb.models['riks'].loads['Load-1']
mdb.models['riks'].boundaryConditions.delete(('BC-1', 'BC-2', 'BC-3'))
del mdb.models['riks']
mdb.models['eigen'].boundaryConditions.delete(('BC-1', 'BC-2', 'BC-3'))
del mdb.models['eigen'].loads['Load-1']
del mdb.models['eigen'].constraints['Constraint-1']
del mdb.models['eigen'].rootAssembly.features['Part-1-1']
mdb.models['eigen'].parts['Part-1'].PartFromMesh(copySets=True, name='panel')
mdb.models['eigen'].rootAssembly.Instance(dependent=ON, name='panel-1', part=
    mdb.models['eigen'].parts['panel'])
mdb.models['eigen'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 1.0, 
    0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('panel-1', ))
mdb.models['eigen'].rootAssembly.rotate(angle=-90.0, axisDirection=(1.0, 0.0, 
    0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('panel-1', ))
mdb.models['eigen'].rootAssembly.translate(instanceList=('panel-1', ), vector=(
    -1.5, 0.0, 0.0))
mdb.models['eigen'].parts['Part-1'].deleteSets(setNames=('Follower', 'Main'))
mdb.models['eigen'].rootAssembly.deleteSets(setNames=('Set-1', 
    'panel-1.Follower', 'panel-1.Main'))
mdb.models['eigen'].parts['panel'].deleteSets(setNames=('Follower', 'Main'))
mdb.models['eigen'].rootAssembly.regenerate()
mdb.models['eigen'].ConcentratedForce(cf1=10000.0, createStepName='eigen', 
    distributionType=UNIFORM, field='', localCsys=None, name='Load-1', region=
    Region(
    nodes=mdb.models['eigen'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:707 #fc000000 #ffffffff:4 #1ffff ]', ), )))
mdb.models['eigen'].DisplacementBC(amplitude=UNSET, buckleCase=
    PERTURBATION_AND_BUCKLING, createStepName='eigen', distributionType=UNIFORM
    , fieldName='', fixed=OFF, localCsys=None, name='BC-1', region=Region(
    nodes=mdb.models['eigen'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#ffffffff:4 #ffffff #0:4 #6000 #0:4 #30 #0:3', 
    ' #18000000 #0:4 #c0000 #0:4 #600 #0:4 #3', 
    ' #0:3 #1800000 #0:4 #c000 #0:4 #60 #0:3', 
    ' #30000000 #0:4 #180000 #0:4 #c00 #0:4 #6', 
    ' #0:3 #3000000 #0:4 #18000 #0:4 #c0 #0:3', 
    ' #60000000 #0:4 #300000 #0:4 #1800 #0:4 #c', 
    ' #0:3 #6000000 #0:4 #30000 #0:4 #180 #0:3', 
    ' #c0000000 #0:4 #600000 #0:4 #3000 #0:4 #18', 
    ' #0:3 #c000000 #0:4 #60000 #0:4 #300 #0:3', 
    ' #80000000 #1 #0:3 #c00000 #0:4 #6000 #0:4', 
    ' #30 #0:3 #18000000 #0:4 #c0000 #0:4 #600', 
    ' #0:4 #3 #0:3 #1800000 #0:4 #c000 #0:4', 
    ' #60 #0:3 #30000000 #0:4 #180000 #0:4 #c00', 
    ' #0:4 #6 #0:3 #3000000 #0:4 #18000 #0:4', 
    ' #c0 #0:3 #60000000 #0:4 #300000 #0:4 #1800', 
    ' #0:4 #c #0:3 #6000000 #0:4 #30000 #0:4', 
    ' #180 #0:3 #c0000000 #0:4 #600000 #0:4 #3000', 
    ' #0:4 #18 #0:3 #c000000 #0:4 #60000 #0:4', 
    ' #300 #0:3 #80000000 #1 #0:3 #c00000 #0:4', 
    ' #6000 #0:4 #30 #0:3 #18000000 #0:4 #c0000', 
    ' #0:4 #600 #0:4 #3 #0:3 #1800000 #0:4', 
    ' #c000 #0:4 #60 #0:3 #30000000 #0:4 #180000', 
    ' #0:4 #c00 #0:4 #6 #0:3 #3000000 #0:4', 
    ' #18000 #0:4 #c0 #0:3 #60000000 #0:4 #300000', 
    ' #0:4 #1800 #0:4 #c #0:3 #6000000 #0:4', 
    ' #30000 #0:4 #180 #0:3 #c0000000 #0:4 #600000', 
    ' #0:4 #3000 #0:4 #18 #0:3 #c000000 #0:4', 
    ' #60000 #0:4 #300 #0:3 #80000000 #1 #0:3', 
    ' #c00000 #0:4 #6000 #0:4 #30 #0:3 #18000000', 
    ' #0:4 #c0000 #0:4 #600 #0:4 #3 #0:3', 
    ' #1800000 #0:4 #c000 #0:4 #60 #0:3 #30000000', 
    ' #0:4 #180000 #0:4 #c00 #0:4 #6 #0:3', 
    ' #3000000 #0:4 #18000 #0:4 #c0 #0:3 #60000000', 
    ' #0:4 #300000 #0:4 #1800 #0:4 #c #0:3', 
    ' #6000000 #0:4 #30000 #0:4 #180 #0:3 #c0000000', 
    ' #0:4 #600000 #0:4 #3000 #0:4 #18 #0:3', 
    ' #c000000 #0:4 #60000 #0:4 #300 #0:3 #80000000', 
    ' #1 #0:3 #c00000 #0:4 #6000 #0:4 #30', 
    ' #0:3 #18000000 #0:4 #c0000 #0:4 #600 #0:4', 
    ' #3 #0:3 #1800000 #0:4 #c000 #0:4 #60', 
    ' #0:3 #30000000 #0:4 #180000 #0:4 #c00 #0:4', 
    ' #6 #0:3 #3000000 #0:4 #18000 #0:4 #c0', 
    ' #0:3 #60000000 #0:4 #300000 #0:4 #1800 #0:4', 
    ' #c #0:3 #fe000000 #ffffffff:4 #1ffff ]', ), )), u1=UNSET, u2=UNSET, u3=
    0.0, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['eigen'].rootAssembly.Set(name='Main', nodes=
    mdb.models['eigen'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:712 #10000 ]', ), ))
mdb.models['eigen'].rootAssembly.Set(name='Follower', nodes=
    mdb.models['eigen'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:707 #fc000000 #ffffffff:4 #ffff ]', ), ))
mdb.models['eigen'].DisplacementBC(amplitude=UNSET, buckleCase=
    PERTURBATION_AND_BUCKLING, createStepName='eigen', distributionType=UNIFORM
    , fieldName='', fixed=OFF, localCsys=None, name='BC-2', region=Region(
    nodes=mdb.models['eigen'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#ffffffff:4 #7fffff ]', ), )), u1=0.0, u2=UNSET, u3=UNSET, ur1=
    UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['eigen'].DisplacementBC(amplitude=UNSET, buckleCase=
    PERTURBATION_AND_BUCKLING, createStepName='eigen', distributionType=UNIFORM
    , fieldName='', fixed=OFF, localCsys=None, name='BC-3', region=Region(
    nodes=mdb.models['eigen'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:356 #100 ]', ), )), u1=UNSET, u2=0.0, u3=UNSET, ur1=UNSET, ur2=
    UNSET, ur3=UNSET)
mdb.models['eigen'].Equation(name='Constraint-1', terms=((1.0, 'Follower', 1), 
    (-1.0, 'Main', 1)))
del mdb.jobs['SP1-T1-e']
del mdb.jobs['SP1-T1-r']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='eigen', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='SP1-T1-e', nodalOutputPrecision=SINGLE, 
    numCpus=4, numDomains=4, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.Model(name='riks', objectToCopy=mdb.models['eigen'])
del mdb.models['riks'].steps['eigen']
mdb.models['riks'].StaticRiksStep(maxNumInc=500, name='riks', nlgeom=ON, 
    previous='Initial')
mdb.models['riks'].ConcentratedForce(cf1=10000.0, createStepName='riks', 
    distributionType=UNIFORM, field='', localCsys=None, name='Load-1', region=
    Region(
    nodes=mdb.models['riks'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#1 #0:3 #800000 #0:4 #4000 #0:4 #20', 
    ' #0:3 #10000000 #0:4 #80000 #0:4 #400 #0:4', 
    ' #2 #0:3 #1000000 #0:4 #8000 #0:4 #40', 
    ' #0:3 #20000000 #0:4 #100000 #0:4 #800 #0:4', 
    ' #4 #0:3 #2000000 #0:4 #10000 #0:4 #80', 
    ' #0:3 #40000000 #0:4 #200000 #0:4 #1000 #0:4', 
    ' #8 #0:3 #4000000 #0:4 #20000 #0:4 #100', 
    ' #0:3 #80000000 #0:4 #400000 #0:4 #2000 #0:4', 
    ' #10 #0:3 #8000000 #0:4 #40000 #0:4 #200', 
    ' #0:4 #1 #0:3 #800000 #0:4 #4000 #0:4', 
    ' #20 #0:3 #10000000 #0:4 #80000 #0:4 #400', 
    ' #0:4 #2 #0:3 #1000000 #0:4 #8000 #0:4', 
    ' #40 #0:3 #20000000 #0:4 #100000 #0:4 #800', 
    ' #0:4 #4 #0:3 #2000000 #0:4 #10000 #0:4', 
    ' #80 #0:3 #40000000 #0:4 #200000 #0:4 #1000', 
    ' #0:4 #8 #0:3 #4000000 #0:4 #20000 #0:4', 
    ' #100 #0:3 #80000000 #0:4 #400000 #0:4 #2000', 
    ' #0:4 #10 #0:3 #8000000 #0:4 #40000 #0:4', 
    ' #200 #0:4 #1 #0:3 #800000 #0:4 #4000', 
    ' #0:4 #20 #0:3 #10000000 #0:4 #80000 #0:4', 
    ' #400 #0:4 #2 #0:3 #1000000 #0:4 #8000', 
    ' #0:4 #40 #0:3 #20000000 #0:4 #100000 #0:4', 
    ' #800 #0:4 #4 #0:3 #2000000 #0:4 #10000', 
    ' #0:4 #80 #0:3 #40000000 #0:4 #200000 #0:4', 
    ' #1000 #0:4 #8 #0:3 #4000000 #0:4 #20000', 
    ' #0:4 #100 #0:3 #80000000 #0:4 #400000 #0:4', 
    ' #2000 #0:4 #10 #0:3 #8000000 #0:4 #40000', 
    ' #0:4 #200 #0:4 #1 #0:3 #800000 #0:4', 
    ' #4000 #0:4 #20 #0:3 #10000000 #0:4 #80000', 
    ' #0:4 #400 #0:4 #2 #0:3 #1000000 #0:4', 
    ' #8000 #0:4 #40 #0:3 #20000000 #0:4 #100000', 
    ' #0:4 #800 #0:4 #4 #0:3 #2000000 #0:4', 
    ' #10000 #0:4 #80 #0:3 #40000000 #0:4 #200000', 
    ' #0:4 #1000 #0:4 #8 #0:3 #4000000 #0:4', 
    ' #20000 #0:4 #100 #0:3 #80000000 #0:4 #400000', 
    ' #0:4 #2000 #0:4 #10 #0:3 #8000000 #0:4', 
    ' #40000 #0:4 #200 #0:4 #1 #0:3 #800000', 
    ' #0:4 #4000 #0:4 #20 #0:3 #10000000 #0:4', 
    ' #80000 #0:4 #400 #0:4 #2 #0:3 #1000000', 
    ' #0:4 #8000 #0:4 #40 #0:3 #20000000 #0:4', 
    ' #100000 #0:4 #800 #0:4 #4 #0:3 #2000000', 
    ' #0:4 #10000 #0:4 #80 #0:3 #40000000 #0:4', 
    ' #200000 #0:4 #1000 #0:4 #8 #0:3 #4000000 ]', ), )))
mdb.models['riks'].DisplacementBC(amplitude=UNSET, createStepName='riks', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-1', region=Region(
    nodes=mdb.models['riks'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#ffffffff:4 #ffffff #0:4 #6000 #0:4 #30 #0:3', 
    ' #18000000 #0:4 #c0000 #0:4 #600 #0:4 #3', 
    ' #0:3 #1800000 #0:4 #c000 #0:4 #60 #0:3', 
    ' #30000000 #0:4 #180000 #0:4 #c00 #0:4 #6', 
    ' #0:3 #3000000 #0:4 #18000 #0:4 #c0 #0:3', 
    ' #60000000 #0:4 #300000 #0:4 #1800 #0:4 #c', 
    ' #0:3 #6000000 #0:4 #30000 #0:4 #180 #0:3', 
    ' #c0000000 #0:4 #600000 #0:4 #3000 #0:4 #18', 
    ' #0:3 #c000000 #0:4 #60000 #0:4 #300 #0:3', 
    ' #80000000 #1 #0:3 #c00000 #0:4 #6000 #0:4', 
    ' #30 #0:3 #18000000 #0:4 #c0000 #0:4 #600', 
    ' #0:4 #3 #0:3 #1800000 #0:4 #c000 #0:4', 
    ' #60 #0:3 #30000000 #0:4 #180000 #0:4 #c00', 
    ' #0:4 #6 #0:3 #3000000 #0:4 #18000 #0:4', 
    ' #c0 #0:3 #60000000 #0:4 #300000 #0:4 #1800', 
    ' #0:4 #c #0:3 #6000000 #0:4 #30000 #0:4', 
    ' #180 #0:3 #c0000000 #0:4 #600000 #0:4 #3000', 
    ' #0:4 #18 #0:3 #c000000 #0:4 #60000 #0:4', 
    ' #300 #0:3 #80000000 #1 #0:3 #c00000 #0:4', 
    ' #6000 #0:4 #30 #0:3 #18000000 #0:4 #c0000', 
    ' #0:4 #600 #0:4 #3 #0:3 #1800000 #0:4', 
    ' #c000 #0:4 #60 #0:3 #30000000 #0:4 #180000', 
    ' #0:4 #c00 #0:4 #6 #0:3 #3000000 #0:4', 
    ' #18000 #0:4 #c0 #0:3 #60000000 #0:4 #300000', 
    ' #0:4 #1800 #0:4 #c #0:3 #6000000 #0:4', 
    ' #30000 #0:4 #180 #0:3 #c0000000 #0:4 #600000', 
    ' #0:4 #3000 #0:4 #18 #0:3 #c000000 #0:4', 
    ' #60000 #0:4 #300 #0:3 #80000000 #1 #0:3', 
    ' #c00000 #0:4 #6000 #0:4 #30 #0:3 #18000000', 
    ' #0:4 #c0000 #0:4 #600 #0:4 #3 #0:3', 
    ' #1800000 #0:4 #c000 #0:4 #60 #0:3 #30000000', 
    ' #0:4 #180000 #0:4 #c00 #0:4 #6 #0:3', 
    ' #3000000 #0:4 #18000 #0:4 #c0 #0:3 #60000000', 
    ' #0:4 #300000 #0:4 #1800 #0:4 #c #0:3', 
    ' #6000000 #0:4 #30000 #0:4 #180 #0:3 #c0000000', 
    ' #0:4 #600000 #0:4 #3000 #0:4 #18 #0:3', 
    ' #c000000 #0:4 #60000 #0:4 #300 #0:3 #80000000', 
    ' #1 #0:3 #c00000 #0:4 #6000 #0:4 #30', 
    ' #0:3 #18000000 #0:4 #c0000 #0:4 #600 #0:4', 
    ' #3 #0:3 #1800000 #0:4 #c000 #0:4 #60', 
    ' #0:3 #30000000 #0:4 #180000 #0:4 #c00 #0:4', 
    ' #6 #0:3 #3000000 #0:4 #18000 #0:4 #c0', 
    ' #0:3 #60000000 #0:4 #300000 #0:4 #1800 #0:4', 
    ' #c #0:3 #fe000000 #ffffffff:4 #1ffff ]', ), )), u1=UNSET, u2=UNSET, u3=
    0.0, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['riks'].DisplacementBC(amplitude=UNSET, createStepName='riks', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-2', region=Region(
    nodes=mdb.models['riks'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:4 #400000 #0:4 #2000 #0:4 #10 #0:3', 
    ' #8000000 #0:4 #40000 #0:4 #200 #0:4 #1', 
    ' #0:3 #800000 #0:4 #4000 #0:4 #20 #0:3', 
    ' #10000000 #0:4 #80000 #0:4 #400 #0:4 #2', 
    ' #0:3 #1000000 #0:4 #8000 #0:4 #40 #0:3', 
    ' #20000000 #0:4 #100000 #0:4 #800 #0:4 #4', 
    ' #0:3 #2000000 #0:4 #10000 #0:4 #80 #0:3', 
    ' #40000000 #0:4 #200000 #0:4 #1000 #0:4 #8', 
    ' #0:3 #4000000 #0:4 #20000 #0:4 #100 #0:3', 
    ' #80000000 #0:4 #400000 #0:4 #2000 #0:4 #10', 
    ' #0:3 #8000000 #0:4 #40000 #0:4 #200 #0:4', 
    ' #1 #0:3 #800000 #0:4 #4000 #0:4 #20', 
    ' #0:3 #10000000 #0:4 #80000 #0:4 #400 #0:4', 
    ' #2 #0:3 #1000000 #0:4 #8000 #0:4 #40', 
    ' #0:3 #20000000 #0:4 #100000 #0:4 #800 #0:4', 
    ' #4 #0:3 #2000000 #0:4 #10000 #0:4 #80', 
    ' #0:3 #40000000 #0:4 #200000 #0:4 #1000 #0:4', 
    ' #8 #0:3 #4000000 #0:4 #20000 #0:4 #100', 
    ' #0:3 #80000000 #0:4 #400000 #0:4 #2000 #0:4', 
    ' #10 #0:3 #8000000 #0:4 #40000 #0:4 #200', 
    ' #0:4 #1 #0:3 #800000 #0:4 #4000 #0:4', 
    ' #20 #0:3 #10000000 #0:4 #80000 #0:4 #400', 
    ' #0:4 #2 #0:3 #1000000 #0:4 #8000 #0:4', 
    ' #40 #0:3 #20000000 #0:4 #100000 #0:4 #800', 
    ' #0:4 #4 #0:3 #2000000 #0:4 #10000 #0:4', 
    ' #80 #0:3 #40000000 #0:4 #200000 #0:4 #1000', 
    ' #0:4 #8 #0:3 #4000000 #0:4 #20000 #0:4', 
    ' #100 #0:3 #80000000 #0:4 #400000 #0:4 #2000', 
    ' #0:4 #10 #0:3 #8000000 #0:4 #40000 #0:4', 
    ' #200 #0:4 #1 #0:3 #800000 #0:4 #4000', 
    ' #0:4 #20 #0:3 #10000000 #0:4 #80000 #0:4', 
    ' #400 #0:4 #2 #0:3 #1000000 #0:4 #8000', 
    ' #0:4 #40 #0:3 #20000000 #0:4 #100000 #0:4', 
    ' #800 #0:4 #4 #0:3 #2000000 #0:4 #10000', 
    ' #0:4 #80 #0:3 #40000000 #0:4 #200000 #0:4', 
    ' #1000 #0:4 #8 #0:3 #4000000 #0:4 #20000', 
    ' #0:4 #100 #0:3 #80000000 #0:4 #400000 #0:4', 
    ' #2000 #0:4 #10 #0:3 #8000000 #0:4 #40000', 
    ' #0:4 #200 #0:4 #1 #0:3 #800000 #0:4', 
    ' #4000 #0:4 #20 #0:3 #10000000 #0:4 #80000', 
    ' #0:4 #400 #0:4 #2 #0:3 #1000000 #0:4', 
    ' #8000 #0:4 #40 #0:3 #20000000 #0:4 #100000', 
    ' #0:4 #800 #0:4 #4 #0:3 #2000000 #0:4', ' #10000 ]', ), )), u1=0.0, u2=
    UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['riks'].DisplacementBC(amplitude=UNSET, createStepName='riks', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-3', region=Region(
    nodes=mdb.models['riks'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:356 #100 ]', ), )), u1=UNSET, u2=0.0, u3=UNSET, ur1=UNSET, ur2=
    UNSET, ur3=UNSET)
del mdb.models['riks'].boundaryConditions['BC-2']
mdb.models['riks'].loads['Load-1'].setValues(distributionType=UNIFORM, field=''
    , region=Region(
    nodes=mdb.models['riks'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#0:707 #fc000000 #ffffffff:4 #1ffff ]', ), )))
mdb.models['riks'].DisplacementBC(amplitude=UNSET, createStepName='riks', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-2', region=Region(
    nodes=mdb.models['riks'].rootAssembly.instances['panel-1'].nodes.getSequenceFromMask(
    mask=('[#ffffffff:4 #7fffff ]', ), )), u1=0.0, u2=UNSET, u3=UNSET, ur1=
    UNSET, ur2=UNSET, ur3=UNSET)
# Save by sambonnell on 2025_09_07-20.41.37; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='riks', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='SP1-T1-r', nodalOutputPrecision=SINGLE, 
    numCpus=4, numDomains=4, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
# Save by sambonnell on 2025_09_07-22.07.50; build 2022 2021_09_15-10.57.30 176069
